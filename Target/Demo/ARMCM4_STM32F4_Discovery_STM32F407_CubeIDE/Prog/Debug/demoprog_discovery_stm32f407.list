
demoprog_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb4  0802018c  0802018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08021d40  08021d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d58  08021d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08021d58  08021d58  00011d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d60  08021d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d60  08021d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021d64  08021d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08021d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08021d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08021d74  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3f9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a99  00000000  00000000  0002a435  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e0f  00000000  00000000  0002cd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ba0  00000000  00000000  0004db5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c907b  00000000  00000000  000556ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e77a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001278  00000000  00000000  0011e7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000035c8  00000000  00000000  0011fa70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0802018c <__do_global_dtors_aux>:
 802018c:	b510      	push	{r4, lr}
 802018e:	4c05      	ldr	r4, [pc, #20]	; (80201a4 <__do_global_dtors_aux+0x18>)
 8020190:	7823      	ldrb	r3, [r4, #0]
 8020192:	b933      	cbnz	r3, 80201a2 <__do_global_dtors_aux+0x16>
 8020194:	4b04      	ldr	r3, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x1c>)
 8020196:	b113      	cbz	r3, 802019e <__do_global_dtors_aux+0x12>
 8020198:	4804      	ldr	r0, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x20>)
 802019a:	f3af 8000 	nop.w
 802019e:	2301      	movs	r3, #1
 80201a0:	7023      	strb	r3, [r4, #0]
 80201a2:	bd10      	pop	{r4, pc}
 80201a4:	2000000c 	.word	0x2000000c
 80201a8:	00000000 	.word	0x00000000
 80201ac:	08021d28 	.word	0x08021d28

080201b0 <frame_dummy>:
 80201b0:	b508      	push	{r3, lr}
 80201b2:	4b03      	ldr	r3, [pc, #12]	; (80201c0 <frame_dummy+0x10>)
 80201b4:	b11b      	cbz	r3, 80201be <frame_dummy+0xe>
 80201b6:	4903      	ldr	r1, [pc, #12]	; (80201c4 <frame_dummy+0x14>)
 80201b8:	4803      	ldr	r0, [pc, #12]	; (80201c8 <frame_dummy+0x18>)
 80201ba:	f3af 8000 	nop.w
 80201be:	bd08      	pop	{r3, pc}
 80201c0:	00000000 	.word	0x00000000
 80201c4:	20000010 	.word	0x20000010
 80201c8:	08021d28 	.word	0x08021d28

080201cc <__aeabi_uldivmod>:
 80201cc:	b953      	cbnz	r3, 80201e4 <__aeabi_uldivmod+0x18>
 80201ce:	b94a      	cbnz	r2, 80201e4 <__aeabi_uldivmod+0x18>
 80201d0:	2900      	cmp	r1, #0
 80201d2:	bf08      	it	eq
 80201d4:	2800      	cmpeq	r0, #0
 80201d6:	bf1c      	itt	ne
 80201d8:	f04f 31ff 	movne.w	r1, #4294967295
 80201dc:	f04f 30ff 	movne.w	r0, #4294967295
 80201e0:	f000 b972 	b.w	80204c8 <__aeabi_idiv0>
 80201e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80201e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80201ec:	f000 f806 	bl	80201fc <__udivmoddi4>
 80201f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80201f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80201f8:	b004      	add	sp, #16
 80201fa:	4770      	bx	lr

080201fc <__udivmoddi4>:
 80201fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020200:	9e08      	ldr	r6, [sp, #32]
 8020202:	4604      	mov	r4, r0
 8020204:	4688      	mov	r8, r1
 8020206:	2b00      	cmp	r3, #0
 8020208:	d14b      	bne.n	80202a2 <__udivmoddi4+0xa6>
 802020a:	428a      	cmp	r2, r1
 802020c:	4615      	mov	r5, r2
 802020e:	d967      	bls.n	80202e0 <__udivmoddi4+0xe4>
 8020210:	fab2 f282 	clz	r2, r2
 8020214:	b14a      	cbz	r2, 802022a <__udivmoddi4+0x2e>
 8020216:	f1c2 0720 	rsb	r7, r2, #32
 802021a:	fa01 f302 	lsl.w	r3, r1, r2
 802021e:	fa20 f707 	lsr.w	r7, r0, r7
 8020222:	4095      	lsls	r5, r2
 8020224:	ea47 0803 	orr.w	r8, r7, r3
 8020228:	4094      	lsls	r4, r2
 802022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 802022e:	0c23      	lsrs	r3, r4, #16
 8020230:	fbb8 f7fe 	udiv	r7, r8, lr
 8020234:	fa1f fc85 	uxth.w	ip, r5
 8020238:	fb0e 8817 	mls	r8, lr, r7, r8
 802023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020240:	fb07 f10c 	mul.w	r1, r7, ip
 8020244:	4299      	cmp	r1, r3
 8020246:	d909      	bls.n	802025c <__udivmoddi4+0x60>
 8020248:	18eb      	adds	r3, r5, r3
 802024a:	f107 30ff 	add.w	r0, r7, #4294967295
 802024e:	f080 811b 	bcs.w	8020488 <__udivmoddi4+0x28c>
 8020252:	4299      	cmp	r1, r3
 8020254:	f240 8118 	bls.w	8020488 <__udivmoddi4+0x28c>
 8020258:	3f02      	subs	r7, #2
 802025a:	442b      	add	r3, r5
 802025c:	1a5b      	subs	r3, r3, r1
 802025e:	b2a4      	uxth	r4, r4
 8020260:	fbb3 f0fe 	udiv	r0, r3, lr
 8020264:	fb0e 3310 	mls	r3, lr, r0, r3
 8020268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8020270:	45a4      	cmp	ip, r4
 8020272:	d909      	bls.n	8020288 <__udivmoddi4+0x8c>
 8020274:	192c      	adds	r4, r5, r4
 8020276:	f100 33ff 	add.w	r3, r0, #4294967295
 802027a:	f080 8107 	bcs.w	802048c <__udivmoddi4+0x290>
 802027e:	45a4      	cmp	ip, r4
 8020280:	f240 8104 	bls.w	802048c <__udivmoddi4+0x290>
 8020284:	3802      	subs	r0, #2
 8020286:	442c      	add	r4, r5
 8020288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 802028c:	eba4 040c 	sub.w	r4, r4, ip
 8020290:	2700      	movs	r7, #0
 8020292:	b11e      	cbz	r6, 802029c <__udivmoddi4+0xa0>
 8020294:	40d4      	lsrs	r4, r2
 8020296:	2300      	movs	r3, #0
 8020298:	e9c6 4300 	strd	r4, r3, [r6]
 802029c:	4639      	mov	r1, r7
 802029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202a2:	428b      	cmp	r3, r1
 80202a4:	d909      	bls.n	80202ba <__udivmoddi4+0xbe>
 80202a6:	2e00      	cmp	r6, #0
 80202a8:	f000 80eb 	beq.w	8020482 <__udivmoddi4+0x286>
 80202ac:	2700      	movs	r7, #0
 80202ae:	e9c6 0100 	strd	r0, r1, [r6]
 80202b2:	4638      	mov	r0, r7
 80202b4:	4639      	mov	r1, r7
 80202b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202ba:	fab3 f783 	clz	r7, r3
 80202be:	2f00      	cmp	r7, #0
 80202c0:	d147      	bne.n	8020352 <__udivmoddi4+0x156>
 80202c2:	428b      	cmp	r3, r1
 80202c4:	d302      	bcc.n	80202cc <__udivmoddi4+0xd0>
 80202c6:	4282      	cmp	r2, r0
 80202c8:	f200 80fa 	bhi.w	80204c0 <__udivmoddi4+0x2c4>
 80202cc:	1a84      	subs	r4, r0, r2
 80202ce:	eb61 0303 	sbc.w	r3, r1, r3
 80202d2:	2001      	movs	r0, #1
 80202d4:	4698      	mov	r8, r3
 80202d6:	2e00      	cmp	r6, #0
 80202d8:	d0e0      	beq.n	802029c <__udivmoddi4+0xa0>
 80202da:	e9c6 4800 	strd	r4, r8, [r6]
 80202de:	e7dd      	b.n	802029c <__udivmoddi4+0xa0>
 80202e0:	b902      	cbnz	r2, 80202e4 <__udivmoddi4+0xe8>
 80202e2:	deff      	udf	#255	; 0xff
 80202e4:	fab2 f282 	clz	r2, r2
 80202e8:	2a00      	cmp	r2, #0
 80202ea:	f040 808f 	bne.w	802040c <__udivmoddi4+0x210>
 80202ee:	1b49      	subs	r1, r1, r5
 80202f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80202f4:	fa1f f885 	uxth.w	r8, r5
 80202f8:	2701      	movs	r7, #1
 80202fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80202fe:	0c23      	lsrs	r3, r4, #16
 8020300:	fb0e 111c 	mls	r1, lr, ip, r1
 8020304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020308:	fb08 f10c 	mul.w	r1, r8, ip
 802030c:	4299      	cmp	r1, r3
 802030e:	d907      	bls.n	8020320 <__udivmoddi4+0x124>
 8020310:	18eb      	adds	r3, r5, r3
 8020312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020316:	d202      	bcs.n	802031e <__udivmoddi4+0x122>
 8020318:	4299      	cmp	r1, r3
 802031a:	f200 80cd 	bhi.w	80204b8 <__udivmoddi4+0x2bc>
 802031e:	4684      	mov	ip, r0
 8020320:	1a59      	subs	r1, r3, r1
 8020322:	b2a3      	uxth	r3, r4
 8020324:	fbb1 f0fe 	udiv	r0, r1, lr
 8020328:	fb0e 1410 	mls	r4, lr, r0, r1
 802032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020330:	fb08 f800 	mul.w	r8, r8, r0
 8020334:	45a0      	cmp	r8, r4
 8020336:	d907      	bls.n	8020348 <__udivmoddi4+0x14c>
 8020338:	192c      	adds	r4, r5, r4
 802033a:	f100 33ff 	add.w	r3, r0, #4294967295
 802033e:	d202      	bcs.n	8020346 <__udivmoddi4+0x14a>
 8020340:	45a0      	cmp	r8, r4
 8020342:	f200 80b6 	bhi.w	80204b2 <__udivmoddi4+0x2b6>
 8020346:	4618      	mov	r0, r3
 8020348:	eba4 0408 	sub.w	r4, r4, r8
 802034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020350:	e79f      	b.n	8020292 <__udivmoddi4+0x96>
 8020352:	f1c7 0c20 	rsb	ip, r7, #32
 8020356:	40bb      	lsls	r3, r7
 8020358:	fa22 fe0c 	lsr.w	lr, r2, ip
 802035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8020360:	fa01 f407 	lsl.w	r4, r1, r7
 8020364:	fa20 f50c 	lsr.w	r5, r0, ip
 8020368:	fa21 f30c 	lsr.w	r3, r1, ip
 802036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020370:	4325      	orrs	r5, r4
 8020372:	fbb3 f9f8 	udiv	r9, r3, r8
 8020376:	0c2c      	lsrs	r4, r5, #16
 8020378:	fb08 3319 	mls	r3, r8, r9, r3
 802037c:	fa1f fa8e 	uxth.w	sl, lr
 8020380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020384:	fb09 f40a 	mul.w	r4, r9, sl
 8020388:	429c      	cmp	r4, r3
 802038a:	fa02 f207 	lsl.w	r2, r2, r7
 802038e:	fa00 f107 	lsl.w	r1, r0, r7
 8020392:	d90b      	bls.n	80203ac <__udivmoddi4+0x1b0>
 8020394:	eb1e 0303 	adds.w	r3, lr, r3
 8020398:	f109 30ff 	add.w	r0, r9, #4294967295
 802039c:	f080 8087 	bcs.w	80204ae <__udivmoddi4+0x2b2>
 80203a0:	429c      	cmp	r4, r3
 80203a2:	f240 8084 	bls.w	80204ae <__udivmoddi4+0x2b2>
 80203a6:	f1a9 0902 	sub.w	r9, r9, #2
 80203aa:	4473      	add	r3, lr
 80203ac:	1b1b      	subs	r3, r3, r4
 80203ae:	b2ad      	uxth	r5, r5
 80203b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80203b4:	fb08 3310 	mls	r3, r8, r0, r3
 80203b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80203bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80203c0:	45a2      	cmp	sl, r4
 80203c2:	d908      	bls.n	80203d6 <__udivmoddi4+0x1da>
 80203c4:	eb1e 0404 	adds.w	r4, lr, r4
 80203c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80203cc:	d26b      	bcs.n	80204a6 <__udivmoddi4+0x2aa>
 80203ce:	45a2      	cmp	sl, r4
 80203d0:	d969      	bls.n	80204a6 <__udivmoddi4+0x2aa>
 80203d2:	3802      	subs	r0, #2
 80203d4:	4474      	add	r4, lr
 80203d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80203da:	fba0 8902 	umull	r8, r9, r0, r2
 80203de:	eba4 040a 	sub.w	r4, r4, sl
 80203e2:	454c      	cmp	r4, r9
 80203e4:	46c2      	mov	sl, r8
 80203e6:	464b      	mov	r3, r9
 80203e8:	d354      	bcc.n	8020494 <__udivmoddi4+0x298>
 80203ea:	d051      	beq.n	8020490 <__udivmoddi4+0x294>
 80203ec:	2e00      	cmp	r6, #0
 80203ee:	d069      	beq.n	80204c4 <__udivmoddi4+0x2c8>
 80203f0:	ebb1 050a 	subs.w	r5, r1, sl
 80203f4:	eb64 0403 	sbc.w	r4, r4, r3
 80203f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80203fc:	40fd      	lsrs	r5, r7
 80203fe:	40fc      	lsrs	r4, r7
 8020400:	ea4c 0505 	orr.w	r5, ip, r5
 8020404:	e9c6 5400 	strd	r5, r4, [r6]
 8020408:	2700      	movs	r7, #0
 802040a:	e747      	b.n	802029c <__udivmoddi4+0xa0>
 802040c:	f1c2 0320 	rsb	r3, r2, #32
 8020410:	fa20 f703 	lsr.w	r7, r0, r3
 8020414:	4095      	lsls	r5, r2
 8020416:	fa01 f002 	lsl.w	r0, r1, r2
 802041a:	fa21 f303 	lsr.w	r3, r1, r3
 802041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020422:	4338      	orrs	r0, r7
 8020424:	0c01      	lsrs	r1, r0, #16
 8020426:	fbb3 f7fe 	udiv	r7, r3, lr
 802042a:	fa1f f885 	uxth.w	r8, r5
 802042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8020432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020436:	fb07 f308 	mul.w	r3, r7, r8
 802043a:	428b      	cmp	r3, r1
 802043c:	fa04 f402 	lsl.w	r4, r4, r2
 8020440:	d907      	bls.n	8020452 <__udivmoddi4+0x256>
 8020442:	1869      	adds	r1, r5, r1
 8020444:	f107 3cff 	add.w	ip, r7, #4294967295
 8020448:	d22f      	bcs.n	80204aa <__udivmoddi4+0x2ae>
 802044a:	428b      	cmp	r3, r1
 802044c:	d92d      	bls.n	80204aa <__udivmoddi4+0x2ae>
 802044e:	3f02      	subs	r7, #2
 8020450:	4429      	add	r1, r5
 8020452:	1acb      	subs	r3, r1, r3
 8020454:	b281      	uxth	r1, r0
 8020456:	fbb3 f0fe 	udiv	r0, r3, lr
 802045a:	fb0e 3310 	mls	r3, lr, r0, r3
 802045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020462:	fb00 f308 	mul.w	r3, r0, r8
 8020466:	428b      	cmp	r3, r1
 8020468:	d907      	bls.n	802047a <__udivmoddi4+0x27e>
 802046a:	1869      	adds	r1, r5, r1
 802046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8020470:	d217      	bcs.n	80204a2 <__udivmoddi4+0x2a6>
 8020472:	428b      	cmp	r3, r1
 8020474:	d915      	bls.n	80204a2 <__udivmoddi4+0x2a6>
 8020476:	3802      	subs	r0, #2
 8020478:	4429      	add	r1, r5
 802047a:	1ac9      	subs	r1, r1, r3
 802047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020480:	e73b      	b.n	80202fa <__udivmoddi4+0xfe>
 8020482:	4637      	mov	r7, r6
 8020484:	4630      	mov	r0, r6
 8020486:	e709      	b.n	802029c <__udivmoddi4+0xa0>
 8020488:	4607      	mov	r7, r0
 802048a:	e6e7      	b.n	802025c <__udivmoddi4+0x60>
 802048c:	4618      	mov	r0, r3
 802048e:	e6fb      	b.n	8020288 <__udivmoddi4+0x8c>
 8020490:	4541      	cmp	r1, r8
 8020492:	d2ab      	bcs.n	80203ec <__udivmoddi4+0x1f0>
 8020494:	ebb8 0a02 	subs.w	sl, r8, r2
 8020498:	eb69 020e 	sbc.w	r2, r9, lr
 802049c:	3801      	subs	r0, #1
 802049e:	4613      	mov	r3, r2
 80204a0:	e7a4      	b.n	80203ec <__udivmoddi4+0x1f0>
 80204a2:	4660      	mov	r0, ip
 80204a4:	e7e9      	b.n	802047a <__udivmoddi4+0x27e>
 80204a6:	4618      	mov	r0, r3
 80204a8:	e795      	b.n	80203d6 <__udivmoddi4+0x1da>
 80204aa:	4667      	mov	r7, ip
 80204ac:	e7d1      	b.n	8020452 <__udivmoddi4+0x256>
 80204ae:	4681      	mov	r9, r0
 80204b0:	e77c      	b.n	80203ac <__udivmoddi4+0x1b0>
 80204b2:	3802      	subs	r0, #2
 80204b4:	442c      	add	r4, r5
 80204b6:	e747      	b.n	8020348 <__udivmoddi4+0x14c>
 80204b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80204bc:	442b      	add	r3, r5
 80204be:	e72f      	b.n	8020320 <__udivmoddi4+0x124>
 80204c0:	4638      	mov	r0, r7
 80204c2:	e708      	b.n	80202d6 <__udivmoddi4+0xda>
 80204c4:	4637      	mov	r7, r6
 80204c6:	e6e9      	b.n	802029c <__udivmoddi4+0xa0>

080204c8 <__aeabi_idiv0>:
 80204c8:	4770      	bx	lr
 80204ca:	bf00      	nop

080204cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80204cc:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 80204ce:	f000 f8ed 	bl	80206ac <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 80204d2:	f000 f893 	bl	80205fc <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 80204d6:	f000 f82b 	bl	8020530 <BootComInit>
} /*** end of AppInit ***/
 80204da:	bd08      	pop	{r3, pc}

080204dc <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80204dc:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80204de:	f000 f8ad 	bl	802063c <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80204e2:	f000 f887 	bl	80205f4 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80204e6:	bd08      	pop	{r3, pc}

080204e8 <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 80204e8:	b508      	push	{r3, lr}
  /* Configure UART peripheral. */
  rs232Handle.Instance = USART6;
 80204ea:	4808      	ldr	r0, [pc, #32]	; (802050c <BootComRs232Init+0x24>)
 80204ec:	4b08      	ldr	r3, [pc, #32]	; (8020510 <BootComRs232Init+0x28>)
 80204ee:	6003      	str	r3, [r0, #0]
  rs232Handle.Init.BaudRate = BOOT_COM_RS232_BAUDRATE;
 80204f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80204f4:	6043      	str	r3, [r0, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80204f6:	2300      	movs	r3, #0
 80204f8:	6083      	str	r3, [r0, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 80204fa:	60c3      	str	r3, [r0, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 80204fc:	6103      	str	r3, [r0, #16]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80204fe:	6183      	str	r3, [r0, #24]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 8020500:	220c      	movs	r2, #12
 8020502:	6142      	str	r2, [r0, #20]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8020504:	61c3      	str	r3, [r0, #28]
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 8020506:	f001 fb40 	bl	8021b8a <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 802050a:	bd08      	pop	{r3, pc}
 802050c:	20000028 	.word	0x20000028
 8020510:	40011400 	.word	0x40011400

08020514 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    1 if a byte was received, 0 otherwise.
**
****************************************************************************************/
static unsigned char Rs232ReceiveByte(unsigned char *data)
{
 8020514:	b508      	push	{r3, lr}
  HAL_StatusTypeDef result;

  /* receive a byte in a non-blocking manner */
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 8020516:	2300      	movs	r3, #0
 8020518:	2201      	movs	r2, #1
 802051a:	4601      	mov	r1, r0
 802051c:	4803      	ldr	r0, [pc, #12]	; (802052c <Rs232ReceiveByte+0x18>)
 802051e:	f001 fb63 	bl	8021be8 <HAL_UART_Receive>
  /* process the result */
  if (result == HAL_OK)
 8020522:	b108      	cbz	r0, 8020528 <Rs232ReceiveByte+0x14>
  {
    /* success */
    return 1;
  }
  /* error occurred */
  return 0;
 8020524:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8020526:	bd08      	pop	{r3, pc}
    return 1;
 8020528:	2001      	movs	r0, #1
 802052a:	e7fc      	b.n	8020526 <Rs232ReceiveByte+0x12>
 802052c:	20000028 	.word	0x20000028

08020530 <BootComInit>:
{
 8020530:	b508      	push	{r3, lr}
  BootComRs232Init();
 8020532:	f7ff ffd9 	bl	80204e8 <BootComRs232Init>
} /*** end of BootComInit ***/
 8020536:	bd08      	pop	{r3, pc}

08020538 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020538:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802053c:	4905      	ldr	r1, [pc, #20]	; (8020554 <BootActivate+0x1c>)
 802053e:	68ca      	ldr	r2, [r1, #12]
 8020540:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020544:	4b04      	ldr	r3, [pc, #16]	; (8020558 <BootActivate+0x20>)
 8020546:	4313      	orrs	r3, r2
 8020548:	60cb      	str	r3, [r1, #12]
 802054a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802054e:	bf00      	nop
 8020550:	e7fd      	b.n	802054e <BootActivate+0x16>
 8020552:	bf00      	nop
 8020554:	e000ed00 	.word	0xe000ed00
 8020558:	05fa0004 	.word	0x05fa0004

0802055c <BootComRs232CheckActivationRequest>:
{
 802055c:	b508      	push	{r3, lr}
  if (xcpCtoRxInProgress == 0)
 802055e:	4b21      	ldr	r3, [pc, #132]	; (80205e4 <BootComRs232CheckActivationRequest+0x88>)
 8020560:	781b      	ldrb	r3, [r3, #0]
 8020562:	b9b3      	cbnz	r3, 8020592 <BootComRs232CheckActivationRequest+0x36>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 8020564:	4820      	ldr	r0, [pc, #128]	; (80205e8 <BootComRs232CheckActivationRequest+0x8c>)
 8020566:	f7ff ffd5 	bl	8020514 <Rs232ReceiveByte>
 802056a:	2801      	cmp	r0, #1
 802056c:	d000      	beq.n	8020570 <BootComRs232CheckActivationRequest+0x14>
} /*** end of BootComRs232CheckActivationRequest ***/
 802056e:	bd08      	pop	{r3, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8020570:	4b1d      	ldr	r3, [pc, #116]	; (80205e8 <BootComRs232CheckActivationRequest+0x8c>)
 8020572:	781b      	ldrb	r3, [r3, #0]
 8020574:	3b01      	subs	r3, #1
 8020576:	b2db      	uxtb	r3, r3
 8020578:	2b3f      	cmp	r3, #63	; 0x3f
 802057a:	d8f8      	bhi.n	802056e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxStartTime = TimerGet();
 802057c:	f000 f897 	bl	80206ae <TimerGet>
 8020580:	4b1a      	ldr	r3, [pc, #104]	; (80205ec <BootComRs232CheckActivationRequest+0x90>)
 8020582:	6018      	str	r0, [r3, #0]
        xcpCtoRxInProgress = 1;
 8020584:	4b17      	ldr	r3, [pc, #92]	; (80205e4 <BootComRs232CheckActivationRequest+0x88>)
 8020586:	2201      	movs	r2, #1
 8020588:	701a      	strb	r2, [r3, #0]
        xcpCtoRxLength = 0;
 802058a:	4b19      	ldr	r3, [pc, #100]	; (80205f0 <BootComRs232CheckActivationRequest+0x94>)
 802058c:	2200      	movs	r2, #0
 802058e:	701a      	strb	r2, [r3, #0]
 8020590:	e7ed      	b.n	802056e <BootComRs232CheckActivationRequest+0x12>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 8020592:	4b17      	ldr	r3, [pc, #92]	; (80205f0 <BootComRs232CheckActivationRequest+0x94>)
 8020594:	781b      	ldrb	r3, [r3, #0]
 8020596:	3301      	adds	r3, #1
 8020598:	4813      	ldr	r0, [pc, #76]	; (80205e8 <BootComRs232CheckActivationRequest+0x8c>)
 802059a:	4418      	add	r0, r3
 802059c:	f7ff ffba 	bl	8020514 <Rs232ReceiveByte>
 80205a0:	2801      	cmp	r0, #1
 80205a2:	d113      	bne.n	80205cc <BootComRs232CheckActivationRequest+0x70>
      xcpCtoRxLength++;
 80205a4:	4a12      	ldr	r2, [pc, #72]	; (80205f0 <BootComRs232CheckActivationRequest+0x94>)
 80205a6:	7813      	ldrb	r3, [r2, #0]
 80205a8:	3301      	adds	r3, #1
 80205aa:	b2db      	uxtb	r3, r3
 80205ac:	7013      	strb	r3, [r2, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80205ae:	4a0e      	ldr	r2, [pc, #56]	; (80205e8 <BootComRs232CheckActivationRequest+0x8c>)
 80205b0:	7812      	ldrb	r2, [r2, #0]
 80205b2:	4293      	cmp	r3, r2
 80205b4:	d1db      	bne.n	802056e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80205b6:	4a0b      	ldr	r2, [pc, #44]	; (80205e4 <BootComRs232CheckActivationRequest+0x88>)
 80205b8:	2100      	movs	r1, #0
 80205ba:	7011      	strb	r1, [r2, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 80205bc:	4a0a      	ldr	r2, [pc, #40]	; (80205e8 <BootComRs232CheckActivationRequest+0x8c>)
 80205be:	7852      	ldrb	r2, [r2, #1]
 80205c0:	2aff      	cmp	r2, #255	; 0xff
 80205c2:	d1d4      	bne.n	802056e <BootComRs232CheckActivationRequest+0x12>
 80205c4:	2b02      	cmp	r3, #2
 80205c6:	d1d2      	bne.n	802056e <BootComRs232CheckActivationRequest+0x12>
          BootActivate();
 80205c8:	f7ff ffb6 	bl	8020538 <BootActivate>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80205cc:	f000 f86f 	bl	80206ae <TimerGet>
 80205d0:	4b06      	ldr	r3, [pc, #24]	; (80205ec <BootComRs232CheckActivationRequest+0x90>)
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	3364      	adds	r3, #100	; 0x64
 80205d6:	4298      	cmp	r0, r3
 80205d8:	d9c9      	bls.n	802056e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80205da:	4b02      	ldr	r3, [pc, #8]	; (80205e4 <BootComRs232CheckActivationRequest+0x88>)
 80205dc:	2200      	movs	r2, #0
 80205de:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 80205e0:	e7c5      	b.n	802056e <BootComRs232CheckActivationRequest+0x12>
 80205e2:	bf00      	nop
 80205e4:	200000a9 	.word	0x200000a9
 80205e8:	20000068 	.word	0x20000068
 80205ec:	200000ac 	.word	0x200000ac
 80205f0:	200000aa 	.word	0x200000aa

080205f4 <BootComCheckActivationRequest>:
{
 80205f4:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 80205f6:	f7ff ffb1 	bl	802055c <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 80205fa:	bd08      	pop	{r3, pc}

080205fc <LedInit>:
** \brief     Initializes the LED.
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 80205fc:	b510      	push	{r4, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80205fe:	2201      	movs	r2, #1
 8020600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020604:	480b      	ldr	r0, [pc, #44]	; (8020634 <LedInit+0x38>)
 8020606:	f000 fe45 	bl	8021294 <HAL_GPIO_WritePin>

  //SET_LED3_ORANGE(GPIO_PIN_SET);
  SET_LED4_GREEN(GPIO_PIN_SET);
 802060a:	4c0b      	ldr	r4, [pc, #44]	; (8020638 <LedInit+0x3c>)
 802060c:	2201      	movs	r2, #1
 802060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8020612:	4620      	mov	r0, r4
 8020614:	f000 fe3e 	bl	8021294 <HAL_GPIO_WritePin>
  SET_LED5_RED(GPIO_PIN_SET);
 8020618:	2201      	movs	r2, #1
 802061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802061e:	4620      	mov	r0, r4
 8020620:	f000 fe38 	bl	8021294 <HAL_GPIO_WritePin>
  SET_LED6_BLUE(GPIO_PIN_SET);
 8020624:	2201      	movs	r2, #1
 8020626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802062a:	4620      	mov	r0, r4
 802062c:	f000 fe32 	bl	8021294 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8020630:	bd10      	pop	{r4, pc}
 8020632:	bf00      	nop
 8020634:	40020800 	.word	0x40020800
 8020638:	40020c00 	.word	0x40020c00

0802063c <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 802063c:	b570      	push	{r4, r5, r6, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 802063e:	f000 f836 	bl	80206ae <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 8020642:	4b17      	ldr	r3, [pc, #92]	; (80206a0 <LedToggle+0x64>)
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	1ac3      	subs	r3, r0, r3
 8020648:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802064c:	d315      	bcc.n	802067a <LedToggle+0x3e>
 802064e:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 8020650:	4b14      	ldr	r3, [pc, #80]	; (80206a4 <LedToggle+0x68>)
 8020652:	781b      	ldrb	r3, [r3, #0]
 8020654:	b993      	cbnz	r3, 802067c <LedToggle+0x40>
  {
    led_toggle_state = 1;
 8020656:	2501      	movs	r5, #1
 8020658:	4b12      	ldr	r3, [pc, #72]	; (80206a4 <LedToggle+0x68>)
 802065a:	701d      	strb	r5, [r3, #0]
    /* turn the LED on */
    //SET_LED3_ORANGE(GPIO_PIN_RESET);
    SET_LED4_GREEN(GPIO_PIN_SET);
 802065c:	4e12      	ldr	r6, [pc, #72]	; (80206a8 <LedToggle+0x6c>)
 802065e:	462a      	mov	r2, r5
 8020660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8020664:	4630      	mov	r0, r6
 8020666:	f000 fe15 	bl	8021294 <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_RESET);
    SET_LED6_BLUE(GPIO_PIN_SET);
 802066a:	462a      	mov	r2, r5
 802066c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020670:	4630      	mov	r0, r6
 8020672:	f000 fe0f 	bl	8021294 <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_SET);
    SET_LED6_BLUE(GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 8020676:	4b0a      	ldr	r3, [pc, #40]	; (80206a0 <LedToggle+0x64>)
 8020678:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 802067a:	bd70      	pop	{r4, r5, r6, pc}
    led_toggle_state = 0;
 802067c:	2500      	movs	r5, #0
 802067e:	4b09      	ldr	r3, [pc, #36]	; (80206a4 <LedToggle+0x68>)
 8020680:	701d      	strb	r5, [r3, #0]
    SET_LED4_GREEN(GPIO_PIN_RESET);
 8020682:	4e09      	ldr	r6, [pc, #36]	; (80206a8 <LedToggle+0x6c>)
 8020684:	462a      	mov	r2, r5
 8020686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802068a:	4630      	mov	r0, r6
 802068c:	f000 fe02 	bl	8021294 <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_RESET);
 8020690:	462a      	mov	r2, r5
 8020692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020696:	4630      	mov	r0, r6
 8020698:	f000 fdfc 	bl	8021294 <HAL_GPIO_WritePin>
 802069c:	e7eb      	b.n	8020676 <LedToggle+0x3a>
 802069e:	bf00      	nop
 80206a0:	200000b4 	.word	0x200000b4
 80206a4:	200000b0 	.word	0x200000b0
 80206a8:	40020c00 	.word	0x40020c00

080206ac <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80206ac:	4770      	bx	lr

080206ae <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80206ae:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80206b0:	f000 fa50 	bl	8020b54 <HAL_GetTick>
} /*** end of TimerGet ***/
 80206b4:	bd08      	pop	{r3, pc}
	...

080206b8 <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80206b8:	4a01      	ldr	r2, [pc, #4]	; (80206c0 <VectorBase_Config+0x8>)
 80206ba:	4b02      	ldr	r3, [pc, #8]	; (80206c4 <VectorBase_Config+0xc>)
 80206bc:	609a      	str	r2, [r3, #8]
}
 80206be:	4770      	bx	lr
 80206c0:	08020000 	.word	0x08020000
 80206c4:	e000ed00 	.word	0xe000ed00

080206c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80206c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80206cc:	2400      	movs	r4, #0
 80206ce:	9405      	str	r4, [sp, #20]
 80206d0:	9406      	str	r4, [sp, #24]
 80206d2:	9407      	str	r4, [sp, #28]
 80206d4:	9408      	str	r4, [sp, #32]
 80206d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80206d8:	9400      	str	r4, [sp, #0]
 80206da:	4b2b      	ldr	r3, [pc, #172]	; (8020788 <MX_GPIO_Init+0xc0>)
 80206dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206de:	f042 0204 	orr.w	r2, r2, #4
 80206e2:	631a      	str	r2, [r3, #48]	; 0x30
 80206e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206e6:	f002 0204 	and.w	r2, r2, #4
 80206ea:	9200      	str	r2, [sp, #0]
 80206ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80206ee:	9401      	str	r4, [sp, #4]
 80206f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80206f6:	631a      	str	r2, [r3, #48]	; 0x30
 80206f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80206fe:	9201      	str	r2, [sp, #4]
 8020700:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020702:	9402      	str	r4, [sp, #8]
 8020704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020706:	f042 0201 	orr.w	r2, r2, #1
 802070a:	631a      	str	r2, [r3, #48]	; 0x30
 802070c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802070e:	f002 0201 	and.w	r2, r2, #1
 8020712:	9202      	str	r2, [sp, #8]
 8020714:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020716:	9403      	str	r4, [sp, #12]
 8020718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802071a:	f042 0202 	orr.w	r2, r2, #2
 802071e:	631a      	str	r2, [r3, #48]	; 0x30
 8020720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020722:	f002 0202 	and.w	r2, r2, #2
 8020726:	9203      	str	r2, [sp, #12]
 8020728:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802072a:	9404      	str	r4, [sp, #16]
 802072c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802072e:	f042 0208 	orr.w	r2, r2, #8
 8020732:	631a      	str	r2, [r3, #48]	; 0x30
 8020734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020736:	f003 0308 	and.w	r3, r3, #8
 802073a:	9304      	str	r3, [sp, #16]
 802073c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 802073e:	4f13      	ldr	r7, [pc, #76]	; (802078c <MX_GPIO_Init+0xc4>)
 8020740:	4622      	mov	r2, r4
 8020742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020746:	4638      	mov	r0, r7
 8020748:	f000 fda4 	bl	8021294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802074c:	4d10      	ldr	r5, [pc, #64]	; (8020790 <MX_GPIO_Init+0xc8>)
 802074e:	4622      	mov	r2, r4
 8020750:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8020754:	4628      	mov	r0, r5
 8020756:	f000 fd9d 	bl	8021294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 802075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802075e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020760:	2601      	movs	r6, #1
 8020762:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020764:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020766:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020768:	a905      	add	r1, sp, #20
 802076a:	4638      	mov	r0, r7
 802076c:	f000 fcae 	bl	80210cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8020770:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8020774:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020776:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020778:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802077a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802077c:	a905      	add	r1, sp, #20
 802077e:	4628      	mov	r0, r5
 8020780:	f000 fca4 	bl	80210cc <HAL_GPIO_Init>

}
 8020784:	b00b      	add	sp, #44	; 0x2c
 8020786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020788:	40023800 	.word	0x40023800
 802078c:	40020800 	.word	0x40020800
 8020790:	40020c00 	.word	0x40020c00

08020794 <MX_ETH_Init>:
{
 8020794:	b510      	push	{r4, lr}
  heth.Instance = ETH;
 8020796:	4812      	ldr	r0, [pc, #72]	; (80207e0 <MX_ETH_Init+0x4c>)
 8020798:	4b12      	ldr	r3, [pc, #72]	; (80207e4 <MX_ETH_Init+0x50>)
 802079a:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 802079c:	2201      	movs	r2, #1
 802079e:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80207a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80207a4:	6083      	str	r3, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80207a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80207aa:	60c3      	str	r3, [r0, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80207ac:	8202      	strh	r2, [r0, #16]
  heth.Init.MACAddr[0] =   0x00;
 80207ae:	6941      	ldr	r1, [r0, #20]
 80207b0:	2300      	movs	r3, #0
 80207b2:	700b      	strb	r3, [r1, #0]
  heth.Init.MACAddr[1] =   0x80;
 80207b4:	6941      	ldr	r1, [r0, #20]
 80207b6:	2480      	movs	r4, #128	; 0x80
 80207b8:	704c      	strb	r4, [r1, #1]
  heth.Init.MACAddr[2] =   0xE1;
 80207ba:	6941      	ldr	r1, [r0, #20]
 80207bc:	24e1      	movs	r4, #225	; 0xe1
 80207be:	708c      	strb	r4, [r1, #2]
  heth.Init.MACAddr[3] =   0x01;
 80207c0:	6941      	ldr	r1, [r0, #20]
 80207c2:	70ca      	strb	r2, [r1, #3]
  heth.Init.MACAddr[4] =   0x02;
 80207c4:	6942      	ldr	r2, [r0, #20]
 80207c6:	2102      	movs	r1, #2
 80207c8:	7111      	strb	r1, [r2, #4]
  heth.Init.MACAddr[5] =   0x03;
 80207ca:	6942      	ldr	r2, [r0, #20]
 80207cc:	2103      	movs	r1, #3
 80207ce:	7151      	strb	r1, [r2, #5]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80207d0:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80207d2:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80207d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80207d8:	6203      	str	r3, [r0, #32]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 80207da:	f000 fb4b 	bl	8020e74 <HAL_ETH_Init>
}
 80207de:	bd10      	pop	{r4, pc}
 80207e0:	20000120 	.word	0x20000120
 80207e4:	40028000 	.word	0x40028000

080207e8 <SystemClock_Config>:
{
 80207e8:	b530      	push	{r4, r5, lr}
 80207ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80207ec:	2230      	movs	r2, #48	; 0x30
 80207ee:	2100      	movs	r1, #0
 80207f0:	a808      	add	r0, sp, #32
 80207f2:	f001 fa91 	bl	8021d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80207f6:	2400      	movs	r4, #0
 80207f8:	9403      	str	r4, [sp, #12]
 80207fa:	9404      	str	r4, [sp, #16]
 80207fc:	9405      	str	r4, [sp, #20]
 80207fe:	9406      	str	r4, [sp, #24]
 8020800:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020802:	9401      	str	r4, [sp, #4]
 8020804:	4b1b      	ldr	r3, [pc, #108]	; (8020874 <SystemClock_Config+0x8c>)
 8020806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802080c:	641a      	str	r2, [r3, #64]	; 0x40
 802080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020814:	9301      	str	r3, [sp, #4]
 8020816:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020818:	9402      	str	r4, [sp, #8]
 802081a:	4b17      	ldr	r3, [pc, #92]	; (8020878 <SystemClock_Config+0x90>)
 802081c:	681a      	ldr	r2, [r3, #0]
 802081e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020822:	601a      	str	r2, [r3, #0]
 8020824:	681b      	ldr	r3, [r3, #0]
 8020826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802082a:	9302      	str	r3, [sp, #8]
 802082c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802082e:	2301      	movs	r3, #1
 8020830:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020836:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020838:	2502      	movs	r5, #2
 802083a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802083c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020840:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020842:	2304      	movs	r3, #4
 8020844:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8020846:	22a8      	movs	r2, #168	; 0xa8
 8020848:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802084a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802084c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802084e:	a808      	add	r0, sp, #32
 8020850:	f000 fd26 	bl	80212a0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020854:	230f      	movs	r3, #15
 8020856:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020858:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802085a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802085c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020860:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020866:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020868:	2105      	movs	r1, #5
 802086a:	a803      	add	r0, sp, #12
 802086c:	f000 ff7a 	bl	8021764 <HAL_RCC_ClockConfig>
}
 8020870:	b015      	add	sp, #84	; 0x54
 8020872:	bd30      	pop	{r4, r5, pc}
 8020874:	40023800 	.word	0x40023800
 8020878:	40007000 	.word	0x40007000

0802087c <main>:
{
 802087c:	b508      	push	{r3, lr}
  VectorBase_Config();
 802087e:	f7ff ff1b 	bl	80206b8 <VectorBase_Config>
  HAL_Init();
 8020882:	f000 f941 	bl	8020b08 <HAL_Init>
  SystemClock_Config();
 8020886:	f7ff ffaf 	bl	80207e8 <SystemClock_Config>
  MX_GPIO_Init();
 802088a:	f7ff ff1d 	bl	80206c8 <MX_GPIO_Init>
  MX_ETH_Init();
 802088e:	f7ff ff81 	bl	8020794 <MX_ETH_Init>
  AppInit();
 8020892:	f7ff fe1b 	bl	80204cc <AppInit>
    AppTask();
 8020896:	f7ff fe21 	bl	80204dc <AppTask>
 802089a:	e7fc      	b.n	8020896 <main+0x1a>

0802089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802089c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802089e:	2100      	movs	r1, #0
 80208a0:	9100      	str	r1, [sp, #0]
 80208a2:	4b0b      	ldr	r3, [pc, #44]	; (80208d0 <HAL_MspInit+0x34>)
 80208a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80208a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80208aa:	645a      	str	r2, [r3, #68]	; 0x44
 80208ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80208ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80208b2:	9200      	str	r2, [sp, #0]
 80208b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80208b6:	9101      	str	r1, [sp, #4]
 80208b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80208ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80208be:	641a      	str	r2, [r3, #64]	; 0x40
 80208c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80208c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80208c6:	9301      	str	r3, [sp, #4]
 80208c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80208ca:	b002      	add	sp, #8
 80208cc:	4770      	bx	lr
 80208ce:	bf00      	nop
 80208d0:	40023800 	.word	0x40023800

080208d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80208d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208d6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80208d8:	2300      	movs	r3, #0
 80208da:	9307      	str	r3, [sp, #28]
 80208dc:	9308      	str	r3, [sp, #32]
 80208de:	9309      	str	r3, [sp, #36]	; 0x24
 80208e0:	930a      	str	r3, [sp, #40]	; 0x28
 80208e2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(heth->Instance==ETH)
 80208e4:	6802      	ldr	r2, [r0, #0]
 80208e6:	4b33      	ldr	r3, [pc, #204]	; (80209b4 <HAL_ETH_MspInit+0xe0>)
 80208e8:	429a      	cmp	r2, r3
 80208ea:	d001      	beq.n	80208f0 <HAL_ETH_MspInit+0x1c>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80208ec:	b00d      	add	sp, #52	; 0x34
 80208ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80208f0:	2400      	movs	r4, #0
 80208f2:	9401      	str	r4, [sp, #4]
 80208f4:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80208f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80208fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80208fe:	631a      	str	r2, [r3, #48]	; 0x30
 8020900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020902:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8020906:	9201      	str	r2, [sp, #4]
 8020908:	9a01      	ldr	r2, [sp, #4]
 802090a:	9402      	str	r4, [sp, #8]
 802090c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802090e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8020912:	631a      	str	r2, [r3, #48]	; 0x30
 8020914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020916:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 802091a:	9202      	str	r2, [sp, #8]
 802091c:	9a02      	ldr	r2, [sp, #8]
 802091e:	9403      	str	r4, [sp, #12]
 8020920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020922:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8020926:	631a      	str	r2, [r3, #48]	; 0x30
 8020928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802092a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802092e:	9203      	str	r2, [sp, #12]
 8020930:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020932:	9404      	str	r4, [sp, #16]
 8020934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020936:	f042 0204 	orr.w	r2, r2, #4
 802093a:	631a      	str	r2, [r3, #48]	; 0x30
 802093c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802093e:	f002 0204 	and.w	r2, r2, #4
 8020942:	9204      	str	r2, [sp, #16]
 8020944:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020946:	9405      	str	r4, [sp, #20]
 8020948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802094a:	f042 0201 	orr.w	r2, r2, #1
 802094e:	631a      	str	r2, [r3, #48]	; 0x30
 8020950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020952:	f002 0201 	and.w	r2, r2, #1
 8020956:	9205      	str	r2, [sp, #20]
 8020958:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802095a:	9406      	str	r4, [sp, #24]
 802095c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802095e:	f042 0202 	orr.w	r2, r2, #2
 8020962:	631a      	str	r2, [r3, #48]	; 0x30
 8020964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020966:	f003 0302 	and.w	r3, r3, #2
 802096a:	9306      	str	r3, [sp, #24]
 802096c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 802096e:	2332      	movs	r3, #50	; 0x32
 8020970:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020972:	2702      	movs	r7, #2
 8020974:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020976:	2603      	movs	r6, #3
 8020978:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802097a:	250b      	movs	r5, #11
 802097c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802097e:	a907      	add	r1, sp, #28
 8020980:	480d      	ldr	r0, [pc, #52]	; (80209b8 <HAL_ETH_MspInit+0xe4>)
 8020982:	f000 fba3 	bl	80210cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8020986:	2386      	movs	r3, #134	; 0x86
 8020988:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802098a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802098c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802098e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020990:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020992:	a907      	add	r1, sp, #28
 8020994:	4809      	ldr	r0, [pc, #36]	; (80209bc <HAL_ETH_MspInit+0xe8>)
 8020996:	f000 fb99 	bl	80210cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 802099a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 802099e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209a0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209a2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80209a4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80209a6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80209a8:	a907      	add	r1, sp, #28
 80209aa:	4805      	ldr	r0, [pc, #20]	; (80209c0 <HAL_ETH_MspInit+0xec>)
 80209ac:	f000 fb8e 	bl	80210cc <HAL_GPIO_Init>
}
 80209b0:	e79c      	b.n	80208ec <HAL_ETH_MspInit+0x18>
 80209b2:	bf00      	nop
 80209b4:	40028000 	.word	0x40028000
 80209b8:	40020800 	.word	0x40020800
 80209bc:	40020000 	.word	0x40020000
 80209c0:	40020400 	.word	0x40020400

080209c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80209c4:	b500      	push	{lr}
 80209c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80209c8:	2300      	movs	r3, #0
 80209ca:	9303      	str	r3, [sp, #12]
 80209cc:	9304      	str	r3, [sp, #16]
 80209ce:	9305      	str	r3, [sp, #20]
 80209d0:	9306      	str	r3, [sp, #24]
 80209d2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART6)
 80209d4:	6802      	ldr	r2, [r0, #0]
 80209d6:	4b15      	ldr	r3, [pc, #84]	; (8020a2c <HAL_UART_MspInit+0x68>)
 80209d8:	429a      	cmp	r2, r3
 80209da:	d002      	beq.n	80209e2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80209dc:	b009      	add	sp, #36	; 0x24
 80209de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART6_CLK_ENABLE();
 80209e2:	2100      	movs	r1, #0
 80209e4:	9101      	str	r1, [sp, #4]
 80209e6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80209ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80209ec:	f042 0220 	orr.w	r2, r2, #32
 80209f0:	645a      	str	r2, [r3, #68]	; 0x44
 80209f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80209f4:	f002 0220 	and.w	r2, r2, #32
 80209f8:	9201      	str	r2, [sp, #4]
 80209fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80209fc:	9102      	str	r1, [sp, #8]
 80209fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020a00:	f042 0204 	orr.w	r2, r2, #4
 8020a04:	631a      	str	r2, [r3, #48]	; 0x30
 8020a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a08:	f003 0304 	and.w	r3, r3, #4
 8020a0c:	9302      	str	r3, [sp, #8]
 8020a0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8020a10:	23c0      	movs	r3, #192	; 0xc0
 8020a12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a14:	2302      	movs	r3, #2
 8020a16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a18:	2303      	movs	r3, #3
 8020a1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8020a1c:	2308      	movs	r3, #8
 8020a1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020a20:	a903      	add	r1, sp, #12
 8020a22:	4803      	ldr	r0, [pc, #12]	; (8020a30 <HAL_UART_MspInit+0x6c>)
 8020a24:	f000 fb52 	bl	80210cc <HAL_GPIO_Init>
}
 8020a28:	e7d8      	b.n	80209dc <HAL_UART_MspInit+0x18>
 8020a2a:	bf00      	nop
 8020a2c:	40011400 	.word	0x40011400
 8020a30:	40020800 	.word	0x40020800

08020a34 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8020a34:	4770      	bx	lr

08020a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020a36:	e7fe      	b.n	8020a36 <HardFault_Handler>

08020a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020a38:	e7fe      	b.n	8020a38 <MemManage_Handler>

08020a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020a3a:	e7fe      	b.n	8020a3a <BusFault_Handler>

08020a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020a3c:	e7fe      	b.n	8020a3c <UsageFault_Handler>

08020a3e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020a3e:	4770      	bx	lr

08020a40 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020a40:	4770      	bx	lr

08020a42 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020a42:	4770      	bx	lr

08020a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020a46:	f000 f879 	bl	8020b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020a4a:	bd08      	pop	{r3, pc}

08020a4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020a4c:	4b05      	ldr	r3, [pc, #20]	; (8020a64 <SystemInit+0x18>)
 8020a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8020a52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8020a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8020a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8020a5e:	609a      	str	r2, [r3, #8]
#endif
}
 8020a60:	4770      	bx	lr
 8020a62:	bf00      	nop
 8020a64:	e000ed00 	.word	0xe000ed00

08020a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8020a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020aa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8020a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8020a6e:	e003      	b.n	8020a78 <LoopCopyDataInit>

08020a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8020a70:	4b0c      	ldr	r3, [pc, #48]	; (8020aa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8020a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8020a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8020a76:	3104      	adds	r1, #4

08020a78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8020a78:	480b      	ldr	r0, [pc, #44]	; (8020aa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8020a7a:	4b0c      	ldr	r3, [pc, #48]	; (8020aac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8020a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8020a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8020a80:	d3f6      	bcc.n	8020a70 <CopyDataInit>
  ldr  r2, =_sbss
 8020a82:	4a0b      	ldr	r2, [pc, #44]	; (8020ab0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8020a84:	e002      	b.n	8020a8c <LoopFillZerobss>

08020a86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8020a86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8020a88:	f842 3b04 	str.w	r3, [r2], #4

08020a8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8020a8c:	4b09      	ldr	r3, [pc, #36]	; (8020ab4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8020a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8020a90:	d3f9      	bcc.n	8020a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020a92:	f7ff ffdb 	bl	8020a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020a96:	f001 f91b 	bl	8021cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020a9a:	f7ff feef 	bl	802087c <main>
  bx  lr    
 8020a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8020aa0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8020aa4:	08021d68 	.word	0x08021d68
  ldr  r0, =_sdata
 8020aa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8020aac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8020ab0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8020ab4:	2000016c 	.word	0x2000016c

08020ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020ab8:	e7fe      	b.n	8020ab8 <ADC_IRQHandler>
	...

08020abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020abc:	b510      	push	{r4, lr}
 8020abe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020ac0:	4b0e      	ldr	r3, [pc, #56]	; (8020afc <HAL_InitTick+0x40>)
 8020ac2:	7818      	ldrb	r0, [r3, #0]
 8020ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020ac8:	fbb3 f3f0 	udiv	r3, r3, r0
 8020acc:	4a0c      	ldr	r2, [pc, #48]	; (8020b00 <HAL_InitTick+0x44>)
 8020ace:	6810      	ldr	r0, [r2, #0]
 8020ad0:	fbb0 f0f3 	udiv	r0, r0, r3
 8020ad4:	f000 f89e 	bl	8020c14 <HAL_SYSTICK_Config>
 8020ad8:	b968      	cbnz	r0, 8020af6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020ada:	2c0f      	cmp	r4, #15
 8020adc:	d901      	bls.n	8020ae2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8020ade:	2001      	movs	r0, #1
 8020ae0:	e00a      	b.n	8020af8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020ae2:	2200      	movs	r2, #0
 8020ae4:	4621      	mov	r1, r4
 8020ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8020aea:	f000 f85f 	bl	8020bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020aee:	4b05      	ldr	r3, [pc, #20]	; (8020b04 <HAL_InitTick+0x48>)
 8020af0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8020af2:	2000      	movs	r0, #0
 8020af4:	e000      	b.n	8020af8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8020af6:	2001      	movs	r0, #1
}
 8020af8:	bd10      	pop	{r4, pc}
 8020afa:	bf00      	nop
 8020afc:	20000004 	.word	0x20000004
 8020b00:	20000000 	.word	0x20000000
 8020b04:	20000008 	.word	0x20000008

08020b08 <HAL_Init>:
{
 8020b08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020b0a:	4b0b      	ldr	r3, [pc, #44]	; (8020b38 <HAL_Init+0x30>)
 8020b0c:	681a      	ldr	r2, [r3, #0]
 8020b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020b12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020b14:	681a      	ldr	r2, [r3, #0]
 8020b16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020b1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020b1c:	681a      	ldr	r2, [r3, #0]
 8020b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020b22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020b24:	2003      	movs	r0, #3
 8020b26:	f000 f82f 	bl	8020b88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8020b2a:	2000      	movs	r0, #0
 8020b2c:	f7ff ffc6 	bl	8020abc <HAL_InitTick>
  HAL_MspInit();
 8020b30:	f7ff feb4 	bl	802089c <HAL_MspInit>
}
 8020b34:	2000      	movs	r0, #0
 8020b36:	bd08      	pop	{r3, pc}
 8020b38:	40023c00 	.word	0x40023c00

08020b3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8020b3c:	4a03      	ldr	r2, [pc, #12]	; (8020b4c <HAL_IncTick+0x10>)
 8020b3e:	6811      	ldr	r1, [r2, #0]
 8020b40:	4b03      	ldr	r3, [pc, #12]	; (8020b50 <HAL_IncTick+0x14>)
 8020b42:	781b      	ldrb	r3, [r3, #0]
 8020b44:	440b      	add	r3, r1
 8020b46:	6013      	str	r3, [r2, #0]
}
 8020b48:	4770      	bx	lr
 8020b4a:	bf00      	nop
 8020b4c:	20000168 	.word	0x20000168
 8020b50:	20000004 	.word	0x20000004

08020b54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8020b54:	4b01      	ldr	r3, [pc, #4]	; (8020b5c <HAL_GetTick+0x8>)
 8020b56:	6818      	ldr	r0, [r3, #0]
}
 8020b58:	4770      	bx	lr
 8020b5a:	bf00      	nop
 8020b5c:	20000168 	.word	0x20000168

08020b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020b60:	b538      	push	{r3, r4, r5, lr}
 8020b62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8020b64:	f7ff fff6 	bl	8020b54 <HAL_GetTick>
 8020b68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020b6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8020b6e:	d002      	beq.n	8020b76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8020b70:	4b04      	ldr	r3, [pc, #16]	; (8020b84 <HAL_Delay+0x24>)
 8020b72:	781b      	ldrb	r3, [r3, #0]
 8020b74:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020b76:	f7ff ffed 	bl	8020b54 <HAL_GetTick>
 8020b7a:	1b40      	subs	r0, r0, r5
 8020b7c:	42a0      	cmp	r0, r4
 8020b7e:	d3fa      	bcc.n	8020b76 <HAL_Delay+0x16>
  {
  }
}
 8020b80:	bd38      	pop	{r3, r4, r5, pc}
 8020b82:	bf00      	nop
 8020b84:	20000004 	.word	0x20000004

08020b88 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020b88:	4a07      	ldr	r2, [pc, #28]	; (8020ba8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8020b8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020b8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8020b90:	041b      	lsls	r3, r3, #16
 8020b92:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020b94:	0200      	lsls	r0, r0, #8
 8020b96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020b9a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8020b9c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8020ba0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8020ba4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8020ba6:	4770      	bx	lr
 8020ba8:	e000ed00 	.word	0xe000ed00

08020bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020bac:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020bae:	4b17      	ldr	r3, [pc, #92]	; (8020c0c <HAL_NVIC_SetPriority+0x60>)
 8020bb0:	68db      	ldr	r3, [r3, #12]
 8020bb2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020bb6:	f1c3 0407 	rsb	r4, r3, #7
 8020bba:	2c04      	cmp	r4, #4
 8020bbc:	bf28      	it	cs
 8020bbe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020bc0:	1d1d      	adds	r5, r3, #4
 8020bc2:	2d06      	cmp	r5, #6
 8020bc4:	d918      	bls.n	8020bf8 <HAL_NVIC_SetPriority+0x4c>
 8020bc6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8020bcc:	fa05 f404 	lsl.w	r4, r5, r4
 8020bd0:	ea21 0104 	bic.w	r1, r1, r4
 8020bd4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020bd6:	fa05 f303 	lsl.w	r3, r5, r3
 8020bda:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020bde:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8020be0:	2800      	cmp	r0, #0
 8020be2:	db0b      	blt.n	8020bfc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020be4:	0109      	lsls	r1, r1, #4
 8020be6:	b2c9      	uxtb	r1, r1
 8020be8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8020bec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8020bf0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8020bf4:	bc30      	pop	{r4, r5}
 8020bf6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020bf8:	2300      	movs	r3, #0
 8020bfa:	e7e5      	b.n	8020bc8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020bfc:	f000 000f 	and.w	r0, r0, #15
 8020c00:	0109      	lsls	r1, r1, #4
 8020c02:	b2c9      	uxtb	r1, r1
 8020c04:	4b02      	ldr	r3, [pc, #8]	; (8020c10 <HAL_NVIC_SetPriority+0x64>)
 8020c06:	5419      	strb	r1, [r3, r0]
 8020c08:	e7f4      	b.n	8020bf4 <HAL_NVIC_SetPriority+0x48>
 8020c0a:	bf00      	nop
 8020c0c:	e000ed00 	.word	0xe000ed00
 8020c10:	e000ed14 	.word	0xe000ed14

08020c14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020c14:	3801      	subs	r0, #1
 8020c16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8020c1a:	d20a      	bcs.n	8020c32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020c1c:	4b06      	ldr	r3, [pc, #24]	; (8020c38 <HAL_SYSTICK_Config+0x24>)
 8020c1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020c20:	4a06      	ldr	r2, [pc, #24]	; (8020c3c <HAL_SYSTICK_Config+0x28>)
 8020c22:	21f0      	movs	r1, #240	; 0xf0
 8020c24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020c28:	2000      	movs	r0, #0
 8020c2a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020c2c:	2207      	movs	r2, #7
 8020c2e:	601a      	str	r2, [r3, #0]
 8020c30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8020c32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8020c34:	4770      	bx	lr
 8020c36:	bf00      	nop
 8020c38:	e000e010 	.word	0xe000e010
 8020c3c:	e000ed00 	.word	0xe000ed00

08020c40 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8020c40:	7950      	ldrb	r0, [r2, #5]
 8020c42:	7913      	ldrb	r3, [r2, #4]
 8020c44:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8020c48:	4807      	ldr	r0, [pc, #28]	; (8020c68 <ETH_MACAddressConfig+0x28>)
 8020c4a:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8020c4c:	78d0      	ldrb	r0, [r2, #3]
 8020c4e:	7893      	ldrb	r3, [r2, #2]
 8020c50:	041b      	lsls	r3, r3, #16
 8020c52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8020c56:	7850      	ldrb	r0, [r2, #1]
 8020c58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8020c5c:	7812      	ldrb	r2, [r2, #0]
 8020c5e:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8020c60:	4a02      	ldr	r2, [pc, #8]	; (8020c6c <ETH_MACAddressConfig+0x2c>)
 8020c62:	508b      	str	r3, [r1, r2]
}
 8020c64:	4770      	bx	lr
 8020c66:	bf00      	nop
 8020c68:	40028040 	.word	0x40028040
 8020c6c:	40028044 	.word	0x40028044

08020c70 <ETH_MACDMAConfig>:
{
 8020c70:	b570      	push	{r4, r5, r6, lr}
 8020c72:	b09e      	sub	sp, #120	; 0x78
 8020c74:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8020c76:	b129      	cbz	r1, 8020c84 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8020c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c7c:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8020c7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8020c82:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8020c84:	69e3      	ldr	r3, [r4, #28]
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d16a      	bne.n	8020d60 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8020c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020c8e:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8020c90:	6821      	ldr	r1, [r4, #0]
 8020c92:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8020c94:	4a39      	ldr	r2, [pc, #228]	; (8020d7c <ETH_MACDMAConfig+0x10c>)
 8020c96:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8020c98:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8020c9a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8020c9c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8020c9e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8020ca0:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8020ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8020ca6:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8020ca8:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8020caa:	6823      	ldr	r3, [r4, #0]
 8020cac:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8020cae:	2001      	movs	r0, #1
 8020cb0:	f7ff ff56 	bl	8020b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8020cb4:	6823      	ldr	r3, [r4, #0]
 8020cb6:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8020cb8:	6823      	ldr	r3, [r4, #0]
 8020cba:	2240      	movs	r2, #64	; 0x40
 8020cbc:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8020cbe:	6823      	ldr	r3, [r4, #0]
 8020cc0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8020cc2:	2001      	movs	r0, #1
 8020cc4:	f7ff ff4c 	bl	8020b60 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8020cc8:	6823      	ldr	r3, [r4, #0]
 8020cca:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8020ccc:	6823      	ldr	r3, [r4, #0]
 8020cce:	2500      	movs	r5, #0
 8020cd0:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8020cd2:	6823      	ldr	r3, [r4, #0]
 8020cd4:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8020cd6:	6822      	ldr	r2, [r4, #0]
 8020cd8:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8020cda:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8020cde:	041b      	lsls	r3, r3, #16
 8020ce0:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8020ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8020ce6:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8020ce8:	6823      	ldr	r3, [r4, #0]
 8020cea:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8020cec:	2001      	movs	r0, #1
 8020cee:	f7ff ff37 	bl	8020b60 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8020cf2:	6823      	ldr	r3, [r4, #0]
 8020cf4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8020cf6:	6823      	ldr	r3, [r4, #0]
 8020cf8:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8020cfa:	6823      	ldr	r3, [r4, #0]
 8020cfc:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8020cfe:	2001      	movs	r0, #1
 8020d00:	f7ff ff2e 	bl	8020b60 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8020d04:	6823      	ldr	r3, [r4, #0]
 8020d06:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8020d08:	6822      	ldr	r2, [r4, #0]
 8020d0a:	f241 0518 	movw	r5, #4120	; 0x1018
 8020d0e:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8020d10:	4b1b      	ldr	r3, [pc, #108]	; (8020d80 <ETH_MACDMAConfig+0x110>)
 8020d12:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8020d14:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8020d18:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8020d1c:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8020d1e:	6823      	ldr	r3, [r4, #0]
 8020d20:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8020d22:	2001      	movs	r0, #1
 8020d24:	f7ff ff1c 	bl	8020b60 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8020d28:	6823      	ldr	r3, [r4, #0]
 8020d2a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8020d2c:	6823      	ldr	r3, [r4, #0]
 8020d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020d32:	4a14      	ldr	r2, [pc, #80]	; (8020d84 <ETH_MACDMAConfig+0x114>)
 8020d34:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8020d36:	6823      	ldr	r3, [r4, #0]
 8020d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020d3c:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8020d3e:	2001      	movs	r0, #1
 8020d40:	f7ff ff0e 	bl	8020b60 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8020d44:	6823      	ldr	r3, [r4, #0]
 8020d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020d4a:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8020d4c:	69a3      	ldr	r3, [r4, #24]
 8020d4e:	2b01      	cmp	r3, #1
 8020d50:	d009      	beq.n	8020d66 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8020d52:	6962      	ldr	r2, [r4, #20]
 8020d54:	2100      	movs	r1, #0
 8020d56:	4620      	mov	r0, r4
 8020d58:	f7ff ff72 	bl	8020c40 <ETH_MACAddressConfig>
}
 8020d5c:	b01e      	add	sp, #120	; 0x78
 8020d5e:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8020d60:	2300      	movs	r3, #0
 8020d62:	9307      	str	r3, [sp, #28]
 8020d64:	e794      	b.n	8020c90 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8020d66:	6821      	ldr	r1, [r4, #0]
 8020d68:	f241 021c 	movw	r2, #4124	; 0x101c
 8020d6c:	588b      	ldr	r3, [r1, r2]
 8020d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d76:	508b      	str	r3, [r1, r2]
 8020d78:	e7eb      	b.n	8020d52 <ETH_MACDMAConfig+0xe2>
 8020d7a:	bf00      	nop
 8020d7c:	ff20810f 	.word	0xff20810f
 8020d80:	f8de3f23 	.word	0xf8de3f23
 8020d84:	02c12080 	.word	0x02c12080

08020d88 <HAL_ETH_ReadPHYRegister>:
{
 8020d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8020d8a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8020d8e:	b2db      	uxtb	r3, r3
 8020d90:	2b82      	cmp	r3, #130	; 0x82
 8020d92:	d033      	beq.n	8020dfc <HAL_ETH_ReadPHYRegister+0x74>
 8020d94:	4616      	mov	r6, r2
 8020d96:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8020d98:	2382      	movs	r3, #130	; 0x82
 8020d9a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8020d9e:	6802      	ldr	r2, [r0, #0]
 8020da0:	6913      	ldr	r3, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8020da2:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8020da6:	8a04      	ldrh	r4, [r0, #16]
 8020da8:	02e4      	lsls	r4, r4, #11
 8020daa:	b2a4      	uxth	r4, r4
 8020dac:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8020dae:	018c      	lsls	r4, r1, #6
 8020db0:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8020db4:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8020db6:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8020dba:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8020dbc:	f7ff feca 	bl	8020b54 <HAL_GetTick>
 8020dc0:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8020dc2:	f014 0f01 	tst.w	r4, #1
 8020dc6:	d010      	beq.n	8020dea <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8020dc8:	f7ff fec4 	bl	8020b54 <HAL_GetTick>
 8020dcc:	1bc0      	subs	r0, r0, r7
 8020dce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8020dd2:	d202      	bcs.n	8020dda <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 8020dd4:	682b      	ldr	r3, [r5, #0]
 8020dd6:	691c      	ldr	r4, [r3, #16]
 8020dd8:	e7f3      	b.n	8020dc2 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 8020dda:	2301      	movs	r3, #1
 8020ddc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8020de0:	2300      	movs	r3, #0
 8020de2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8020de6:	2003      	movs	r0, #3
 8020de8:	e007      	b.n	8020dfa <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8020dea:	682b      	ldr	r3, [r5, #0]
 8020dec:	695b      	ldr	r3, [r3, #20]
 8020dee:	b29b      	uxth	r3, r3
 8020df0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8020df2:	2301      	movs	r3, #1
 8020df4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8020df8:	2000      	movs	r0, #0
}
 8020dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8020dfc:	2002      	movs	r0, #2
 8020dfe:	e7fc      	b.n	8020dfa <HAL_ETH_ReadPHYRegister+0x72>

08020e00 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8020e00:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8020e04:	b2db      	uxtb	r3, r3
 8020e06:	2b42      	cmp	r3, #66	; 0x42
 8020e08:	d032      	beq.n	8020e70 <HAL_ETH_WritePHYRegister+0x70>
{
 8020e0a:	b570      	push	{r4, r5, r6, lr}
 8020e0c:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8020e0e:	2342      	movs	r3, #66	; 0x42
 8020e10:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8020e14:	6800      	ldr	r0, [r0, #0]
 8020e16:	6903      	ldr	r3, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8020e18:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8020e1c:	8a2c      	ldrh	r4, [r5, #16]
 8020e1e:	02e4      	lsls	r4, r4, #11
 8020e20:	b2a4      	uxth	r4, r4
 8020e22:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8020e24:	018c      	lsls	r4, r1, #6
 8020e26:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8020e2a:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8020e2c:	f044 0403 	orr.w	r4, r4, #3
 8020e30:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8020e32:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8020e34:	682b      	ldr	r3, [r5, #0]
 8020e36:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8020e38:	f7ff fe8c 	bl	8020b54 <HAL_GetTick>
 8020e3c:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8020e3e:	f014 0f01 	tst.w	r4, #1
 8020e42:	d010      	beq.n	8020e66 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8020e44:	f7ff fe86 	bl	8020b54 <HAL_GetTick>
 8020e48:	1b80      	subs	r0, r0, r6
 8020e4a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8020e4e:	d202      	bcs.n	8020e56 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8020e50:	682b      	ldr	r3, [r5, #0]
 8020e52:	691c      	ldr	r4, [r3, #16]
 8020e54:	e7f3      	b.n	8020e3e <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8020e56:	2301      	movs	r3, #1
 8020e58:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8020e62:	2003      	movs	r0, #3
 8020e64:	e003      	b.n	8020e6e <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8020e66:	2301      	movs	r3, #1
 8020e68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8020e6c:	2000      	movs	r0, #0
}
 8020e6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8020e70:	2002      	movs	r0, #2
}
 8020e72:	4770      	bx	lr

08020e74 <HAL_ETH_Init>:
{
 8020e74:	b570      	push	{r4, r5, r6, lr}
 8020e76:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8020e78:	2300      	movs	r3, #0
 8020e7a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8020e7c:	2800      	cmp	r0, #0
 8020e7e:	f000 810e 	beq.w	802109e <HAL_ETH_Init+0x22a>
 8020e82:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8020e84:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d034      	beq.n	8020ef6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020e8c:	2300      	movs	r3, #0
 8020e8e:	9300      	str	r3, [sp, #0]
 8020e90:	4b84      	ldr	r3, [pc, #528]	; (80210a4 <HAL_ETH_Init+0x230>)
 8020e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020e98:	645a      	str	r2, [r3, #68]	; 0x44
 8020e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020ea0:	9300      	str	r3, [sp, #0]
 8020ea2:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8020ea4:	4b80      	ldr	r3, [pc, #512]	; (80210a8 <HAL_ETH_Init+0x234>)
 8020ea6:	685a      	ldr	r2, [r3, #4]
 8020ea8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8020eac:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8020eae:	685a      	ldr	r2, [r3, #4]
 8020eb0:	6a21      	ldr	r1, [r4, #32]
 8020eb2:	430a      	orrs	r2, r1
 8020eb4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8020eb6:	6823      	ldr	r3, [r4, #0]
 8020eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020ebc:	681a      	ldr	r2, [r3, #0]
 8020ebe:	f042 0201 	orr.w	r2, r2, #1
 8020ec2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8020ec4:	f7ff fe46 	bl	8020b54 <HAL_GetTick>
 8020ec8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8020eca:	6823      	ldr	r3, [r4, #0]
 8020ecc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8020ed0:	6812      	ldr	r2, [r2, #0]
 8020ed2:	f012 0f01 	tst.w	r2, #1
 8020ed6:	d013      	beq.n	8020f00 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8020ed8:	f7ff fe3c 	bl	8020b54 <HAL_GetTick>
 8020edc:	1b40      	subs	r0, r0, r5
 8020ede:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8020ee2:	d9f2      	bls.n	8020eca <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8020ee4:	2503      	movs	r5, #3
 8020ee6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8020eea:	2300      	movs	r3, #0
 8020eec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8020ef0:	4628      	mov	r0, r5
 8020ef2:	b002      	add	sp, #8
 8020ef4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8020ef6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8020efa:	f7ff fceb 	bl	80208d4 <HAL_ETH_MspInit>
 8020efe:	e7c5      	b.n	8020e8c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8020f00:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8020f02:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8020f06:	f000 fcdd 	bl	80218c4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8020f0a:	4b68      	ldr	r3, [pc, #416]	; (80210ac <HAL_ETH_Init+0x238>)
 8020f0c:	4403      	add	r3, r0
 8020f0e:	4a68      	ldr	r2, [pc, #416]	; (80210b0 <HAL_ETH_Init+0x23c>)
 8020f10:	4293      	cmp	r3, r2
 8020f12:	d855      	bhi.n	8020fc0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8020f14:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8020f18:	6823      	ldr	r3, [r4, #0]
 8020f1a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8020f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020f20:	2100      	movs	r1, #0
 8020f22:	4620      	mov	r0, r4
 8020f24:	f7ff ff6c 	bl	8020e00 <HAL_ETH_WritePHYRegister>
 8020f28:	4605      	mov	r5, r0
 8020f2a:	2800      	cmp	r0, #0
 8020f2c:	d160      	bne.n	8020ff0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8020f2e:	20ff      	movs	r0, #255	; 0xff
 8020f30:	f7ff fe16 	bl	8020b60 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8020f34:	6863      	ldr	r3, [r4, #4]
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	f000 8091 	beq.w	802105e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8020f3c:	f7ff fe0a 	bl	8020b54 <HAL_GetTick>
 8020f40:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8020f42:	aa01      	add	r2, sp, #4
 8020f44:	2101      	movs	r1, #1
 8020f46:	4620      	mov	r0, r4
 8020f48:	f7ff ff1e 	bl	8020d88 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8020f4c:	f7ff fe02 	bl	8020b54 <HAL_GetTick>
 8020f50:	1b80      	subs	r0, r0, r6
 8020f52:	f241 3388 	movw	r3, #5000	; 0x1388
 8020f56:	4298      	cmp	r0, r3
 8020f58:	d852      	bhi.n	8021000 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8020f5a:	9b01      	ldr	r3, [sp, #4]
 8020f5c:	f013 0f04 	tst.w	r3, #4
 8020f60:	d0ef      	beq.n	8020f42 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8020f62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020f66:	2100      	movs	r1, #0
 8020f68:	4620      	mov	r0, r4
 8020f6a:	f7ff ff49 	bl	8020e00 <HAL_ETH_WritePHYRegister>
 8020f6e:	2800      	cmp	r0, #0
 8020f70:	d152      	bne.n	8021018 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8020f72:	f7ff fdef 	bl	8020b54 <HAL_GetTick>
 8020f76:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8020f78:	aa01      	add	r2, sp, #4
 8020f7a:	2101      	movs	r1, #1
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	f7ff ff03 	bl	8020d88 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8020f82:	f7ff fde7 	bl	8020b54 <HAL_GetTick>
 8020f86:	1b80      	subs	r0, r0, r6
 8020f88:	f241 3388 	movw	r3, #5000	; 0x1388
 8020f8c:	4298      	cmp	r0, r3
 8020f8e:	d84b      	bhi.n	8021028 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8020f90:	9b01      	ldr	r3, [sp, #4]
 8020f92:	f013 0f20 	tst.w	r3, #32
 8020f96:	d0ef      	beq.n	8020f78 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8020f98:	aa01      	add	r2, sp, #4
 8020f9a:	211f      	movs	r1, #31
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	f7ff fef3 	bl	8020d88 <HAL_ETH_ReadPHYRegister>
 8020fa2:	2800      	cmp	r0, #0
 8020fa4:	d14c      	bne.n	8021040 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8020fa6:	9b01      	ldr	r3, [sp, #4]
 8020fa8:	f013 0f10 	tst.w	r3, #16
 8020fac:	d050      	beq.n	8021050 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8020fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020fb2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8020fb4:	f013 0f04 	tst.w	r3, #4
 8020fb8:	d04d      	beq.n	8021056 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8020fba:	2300      	movs	r3, #0
 8020fbc:	60a3      	str	r3, [r4, #8]
 8020fbe:	e05e      	b.n	802107e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8020fc0:	4b3c      	ldr	r3, [pc, #240]	; (80210b4 <HAL_ETH_Init+0x240>)
 8020fc2:	4403      	add	r3, r0
 8020fc4:	4a3c      	ldr	r2, [pc, #240]	; (80210b8 <HAL_ETH_Init+0x244>)
 8020fc6:	4293      	cmp	r3, r2
 8020fc8:	d802      	bhi.n	8020fd0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8020fca:	f045 050c 	orr.w	r5, r5, #12
 8020fce:	e7a3      	b.n	8020f18 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8020fd0:	4b3a      	ldr	r3, [pc, #232]	; (80210bc <HAL_ETH_Init+0x248>)
 8020fd2:	4403      	add	r3, r0
 8020fd4:	4a3a      	ldr	r2, [pc, #232]	; (80210c0 <HAL_ETH_Init+0x24c>)
 8020fd6:	4293      	cmp	r3, r2
 8020fd8:	d99e      	bls.n	8020f18 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8020fda:	4b3a      	ldr	r3, [pc, #232]	; (80210c4 <HAL_ETH_Init+0x250>)
 8020fdc:	4403      	add	r3, r0
 8020fde:	4a3a      	ldr	r2, [pc, #232]	; (80210c8 <HAL_ETH_Init+0x254>)
 8020fe0:	4293      	cmp	r3, r2
 8020fe2:	d802      	bhi.n	8020fea <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8020fe4:	f045 0504 	orr.w	r5, r5, #4
 8020fe8:	e796      	b.n	8020f18 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8020fea:	f045 0510 	orr.w	r5, r5, #16
 8020fee:	e793      	b.n	8020f18 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8020ff0:	2101      	movs	r1, #1
 8020ff2:	4620      	mov	r0, r4
 8020ff4:	f7ff fe3c 	bl	8020c70 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8020ff8:	2501      	movs	r5, #1
 8020ffa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8020ffe:	e777      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8021000:	2101      	movs	r1, #1
 8021002:	4620      	mov	r0, r4
 8021004:	f7ff fe34 	bl	8020c70 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8021008:	2301      	movs	r3, #1
 802100a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 802100e:	2300      	movs	r3, #0
 8021010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8021014:	2503      	movs	r5, #3
 8021016:	e76b      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8021018:	2101      	movs	r1, #1
 802101a:	4620      	mov	r0, r4
 802101c:	f7ff fe28 	bl	8020c70 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8021020:	2501      	movs	r5, #1
 8021022:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8021026:	e763      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8021028:	2101      	movs	r1, #1
 802102a:	4620      	mov	r0, r4
 802102c:	f7ff fe20 	bl	8020c70 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8021030:	2301      	movs	r3, #1
 8021032:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8021036:	2300      	movs	r3, #0
 8021038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 802103c:	2503      	movs	r5, #3
 802103e:	e757      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8021040:	2101      	movs	r1, #1
 8021042:	4620      	mov	r0, r4
 8021044:	f7ff fe14 	bl	8020c70 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8021048:	2501      	movs	r5, #1
 802104a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 802104e:	e74f      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8021050:	2200      	movs	r2, #0
 8021052:	60e2      	str	r2, [r4, #12]
 8021054:	e7ae      	b.n	8020fb4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8021056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802105a:	60a3      	str	r3, [r4, #8]
 802105c:	e00f      	b.n	802107e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 802105e:	68e2      	ldr	r2, [r4, #12]
 8021060:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8021064:	68a3      	ldr	r3, [r4, #8]
 8021066:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 802106a:	431a      	orrs	r2, r3
 802106c:	2100      	movs	r1, #0
 802106e:	4620      	mov	r0, r4
 8021070:	f7ff fec6 	bl	8020e00 <HAL_ETH_WritePHYRegister>
 8021074:	b958      	cbnz	r0, 802108e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8021076:	f640 70ff 	movw	r0, #4095	; 0xfff
 802107a:	f7ff fd71 	bl	8020b60 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 802107e:	2100      	movs	r1, #0
 8021080:	4620      	mov	r0, r4
 8021082:	f7ff fdf5 	bl	8020c70 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8021086:	2301      	movs	r3, #1
 8021088:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 802108c:	e730      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 802108e:	2101      	movs	r1, #1
 8021090:	4620      	mov	r0, r4
 8021092:	f7ff fded 	bl	8020c70 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8021096:	2501      	movs	r5, #1
 8021098:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 802109c:	e728      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 802109e:	2501      	movs	r5, #1
 80210a0:	e726      	b.n	8020ef0 <HAL_ETH_Init+0x7c>
 80210a2:	bf00      	nop
 80210a4:	40023800 	.word	0x40023800
 80210a8:	40013800 	.word	0x40013800
 80210ac:	feced300 	.word	0xfeced300
 80210b0:	00e4e1bf 	.word	0x00e4e1bf
 80210b4:	fde9f140 	.word	0xfde9f140
 80210b8:	017d783f 	.word	0x017d783f
 80210bc:	fc6c7900 	.word	0xfc6c7900
 80210c0:	026259ff 	.word	0x026259ff
 80210c4:	fa0a1f00 	.word	0xfa0a1f00
 80210c8:	02faf07f 	.word	0x02faf07f

080210cc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80210cc:	2300      	movs	r3, #0
 80210ce:	2b0f      	cmp	r3, #15
 80210d0:	f200 80d7 	bhi.w	8021282 <HAL_GPIO_Init+0x1b6>
{
 80210d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210d6:	b083      	sub	sp, #12
 80210d8:	e039      	b.n	802114e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80210da:	2207      	movs	r2, #7
 80210dc:	e000      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 80210de:	2200      	movs	r2, #0
 80210e0:	40aa      	lsls	r2, r5
 80210e2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80210e4:	3402      	adds	r4, #2
 80210e6:	4d67      	ldr	r5, [pc, #412]	; (8021284 <HAL_GPIO_Init+0x1b8>)
 80210e8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80210ec:	4a66      	ldr	r2, [pc, #408]	; (8021288 <HAL_GPIO_Init+0x1bc>)
 80210ee:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80210f0:	43f2      	mvns	r2, r6
 80210f2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80210f6:	684f      	ldr	r7, [r1, #4]
 80210f8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80210fc:	d001      	beq.n	8021102 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80210fe:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8021102:	4c61      	ldr	r4, [pc, #388]	; (8021288 <HAL_GPIO_Init+0x1bc>)
 8021104:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8021106:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8021108:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802110c:	684f      	ldr	r7, [r1, #4]
 802110e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8021112:	d001      	beq.n	8021118 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8021114:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8021118:	4c5b      	ldr	r4, [pc, #364]	; (8021288 <HAL_GPIO_Init+0x1bc>)
 802111a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802111c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 802111e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021122:	684f      	ldr	r7, [r1, #4]
 8021124:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8021128:	d001      	beq.n	802112e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 802112a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 802112e:	4c56      	ldr	r4, [pc, #344]	; (8021288 <HAL_GPIO_Init+0x1bc>)
 8021130:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8021132:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8021134:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021136:	684d      	ldr	r5, [r1, #4]
 8021138:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 802113c:	d001      	beq.n	8021142 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 802113e:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8021142:	4c51      	ldr	r4, [pc, #324]	; (8021288 <HAL_GPIO_Init+0x1bc>)
 8021144:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021146:	3301      	adds	r3, #1
 8021148:	2b0f      	cmp	r3, #15
 802114a:	f200 8098 	bhi.w	802127e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 802114e:	2201      	movs	r2, #1
 8021150:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021152:	680c      	ldr	r4, [r1, #0]
 8021154:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8021158:	42b2      	cmp	r2, r6
 802115a:	d1f4      	bne.n	8021146 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802115c:	684c      	ldr	r4, [r1, #4]
 802115e:	1e65      	subs	r5, r4, #1
 8021160:	2d01      	cmp	r5, #1
 8021162:	d903      	bls.n	802116c <HAL_GPIO_Init+0xa0>
 8021164:	2c11      	cmp	r4, #17
 8021166:	d001      	beq.n	802116c <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021168:	2c12      	cmp	r4, #18
 802116a:	d112      	bne.n	8021192 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 802116c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802116e:	005f      	lsls	r7, r3, #1
 8021170:	2403      	movs	r4, #3
 8021172:	40bc      	lsls	r4, r7
 8021174:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021178:	68cc      	ldr	r4, [r1, #12]
 802117a:	40bc      	lsls	r4, r7
 802117c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 802117e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8021180:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021182:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8021186:	684c      	ldr	r4, [r1, #4]
 8021188:	f3c4 1200 	ubfx	r2, r4, #4, #1
 802118c:	409a      	lsls	r2, r3
 802118e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8021190:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8021192:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8021194:	005f      	lsls	r7, r3, #1
 8021196:	2203      	movs	r2, #3
 8021198:	40ba      	lsls	r2, r7
 802119a:	43d2      	mvns	r2, r2
 802119c:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802119e:	688d      	ldr	r5, [r1, #8]
 80211a0:	40bd      	lsls	r5, r7
 80211a2:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 80211a4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80211a6:	684c      	ldr	r4, [r1, #4]
 80211a8:	2c02      	cmp	r4, #2
 80211aa:	d001      	beq.n	80211b0 <HAL_GPIO_Init+0xe4>
 80211ac:	2c12      	cmp	r4, #18
 80211ae:	d113      	bne.n	80211d8 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80211b0:	08dd      	lsrs	r5, r3, #3
 80211b2:	3508      	adds	r5, #8
 80211b4:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80211b8:	f003 0407 	and.w	r4, r3, #7
 80211bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80211c0:	240f      	movs	r4, #15
 80211c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80211c6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80211ca:	690c      	ldr	r4, [r1, #16]
 80211cc:	fa04 f40c 	lsl.w	r4, r4, ip
 80211d0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80211d4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80211d8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80211da:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80211dc:	684c      	ldr	r4, [r1, #4]
 80211de:	f004 0403 	and.w	r4, r4, #3
 80211e2:	40bc      	lsls	r4, r7
 80211e4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80211e6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80211e8:	684a      	ldr	r2, [r1, #4]
 80211ea:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80211ee:	d0aa      	beq.n	8021146 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80211f0:	2200      	movs	r2, #0
 80211f2:	9201      	str	r2, [sp, #4]
 80211f4:	4a25      	ldr	r2, [pc, #148]	; (802128c <HAL_GPIO_Init+0x1c0>)
 80211f6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80211f8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80211fc:	6454      	str	r4, [r2, #68]	; 0x44
 80211fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8021200:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8021204:	9201      	str	r2, [sp, #4]
 8021206:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8021208:	089c      	lsrs	r4, r3, #2
 802120a:	1ca5      	adds	r5, r4, #2
 802120c:	4a1d      	ldr	r2, [pc, #116]	; (8021284 <HAL_GPIO_Init+0x1b8>)
 802120e:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8021212:	f003 0203 	and.w	r2, r3, #3
 8021216:	0095      	lsls	r5, r2, #2
 8021218:	220f      	movs	r2, #15
 802121a:	40aa      	lsls	r2, r5
 802121c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8021220:	4a1b      	ldr	r2, [pc, #108]	; (8021290 <HAL_GPIO_Init+0x1c4>)
 8021222:	4290      	cmp	r0, r2
 8021224:	f43f af5b 	beq.w	80210de <HAL_GPIO_Init+0x12>
 8021228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802122c:	4290      	cmp	r0, r2
 802122e:	d01a      	beq.n	8021266 <HAL_GPIO_Init+0x19a>
 8021230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021234:	4290      	cmp	r0, r2
 8021236:	d018      	beq.n	802126a <HAL_GPIO_Init+0x19e>
 8021238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802123c:	4290      	cmp	r0, r2
 802123e:	d016      	beq.n	802126e <HAL_GPIO_Init+0x1a2>
 8021240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021244:	4290      	cmp	r0, r2
 8021246:	d014      	beq.n	8021272 <HAL_GPIO_Init+0x1a6>
 8021248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802124c:	4290      	cmp	r0, r2
 802124e:	d012      	beq.n	8021276 <HAL_GPIO_Init+0x1aa>
 8021250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021254:	4290      	cmp	r0, r2
 8021256:	d010      	beq.n	802127a <HAL_GPIO_Init+0x1ae>
 8021258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802125c:	4290      	cmp	r0, r2
 802125e:	f43f af3c 	beq.w	80210da <HAL_GPIO_Init+0xe>
 8021262:	2208      	movs	r2, #8
 8021264:	e73c      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 8021266:	2201      	movs	r2, #1
 8021268:	e73a      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 802126a:	2202      	movs	r2, #2
 802126c:	e738      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 802126e:	2203      	movs	r2, #3
 8021270:	e736      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 8021272:	2204      	movs	r2, #4
 8021274:	e734      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 8021276:	2205      	movs	r2, #5
 8021278:	e732      	b.n	80210e0 <HAL_GPIO_Init+0x14>
 802127a:	2206      	movs	r2, #6
 802127c:	e730      	b.n	80210e0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 802127e:	b003      	add	sp, #12
 8021280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021282:	4770      	bx	lr
 8021284:	40013800 	.word	0x40013800
 8021288:	40013c00 	.word	0x40013c00
 802128c:	40023800 	.word	0x40023800
 8021290:	40020000 	.word	0x40020000

08021294 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8021294:	b912      	cbnz	r2, 802129c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8021296:	0409      	lsls	r1, r1, #16
 8021298:	6181      	str	r1, [r0, #24]
  }
}
 802129a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 802129c:	6181      	str	r1, [r0, #24]
 802129e:	4770      	bx	lr

080212a0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80212a0:	2800      	cmp	r0, #0
 80212a2:	f000 81e4 	beq.w	802166e <HAL_RCC_OscConfig+0x3ce>
{
 80212a6:	b570      	push	{r4, r5, r6, lr}
 80212a8:	b082      	sub	sp, #8
 80212aa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80212ac:	6803      	ldr	r3, [r0, #0]
 80212ae:	f013 0f01 	tst.w	r3, #1
 80212b2:	d03b      	beq.n	802132c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80212b4:	4ba7      	ldr	r3, [pc, #668]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80212b6:	689b      	ldr	r3, [r3, #8]
 80212b8:	f003 030c 	and.w	r3, r3, #12
 80212bc:	2b04      	cmp	r3, #4
 80212be:	d02c      	beq.n	802131a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80212c0:	4ba4      	ldr	r3, [pc, #656]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80212c2:	689b      	ldr	r3, [r3, #8]
 80212c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80212c8:	2b08      	cmp	r3, #8
 80212ca:	d021      	beq.n	8021310 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80212cc:	6863      	ldr	r3, [r4, #4]
 80212ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80212d2:	d04f      	beq.n	8021374 <HAL_RCC_OscConfig+0xd4>
 80212d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80212d8:	d052      	beq.n	8021380 <HAL_RCC_OscConfig+0xe0>
 80212da:	4b9e      	ldr	r3, [pc, #632]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80212dc:	681a      	ldr	r2, [r3, #0]
 80212de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80212e2:	601a      	str	r2, [r3, #0]
 80212e4:	681a      	ldr	r2, [r3, #0]
 80212e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80212ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80212ec:	6863      	ldr	r3, [r4, #4]
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	d050      	beq.n	8021394 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80212f2:	f7ff fc2f 	bl	8020b54 <HAL_GetTick>
 80212f6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80212f8:	4b96      	ldr	r3, [pc, #600]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80212fa:	681b      	ldr	r3, [r3, #0]
 80212fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8021300:	d114      	bne.n	802132c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021302:	f7ff fc27 	bl	8020b54 <HAL_GetTick>
 8021306:	1b40      	subs	r0, r0, r5
 8021308:	2864      	cmp	r0, #100	; 0x64
 802130a:	d9f5      	bls.n	80212f8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 802130c:	2003      	movs	r0, #3
 802130e:	e1b3      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021310:	4b90      	ldr	r3, [pc, #576]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021312:	685b      	ldr	r3, [r3, #4]
 8021314:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8021318:	d0d8      	beq.n	80212cc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802131a:	4b8e      	ldr	r3, [pc, #568]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8021322:	d003      	beq.n	802132c <HAL_RCC_OscConfig+0x8c>
 8021324:	6863      	ldr	r3, [r4, #4]
 8021326:	2b00      	cmp	r3, #0
 8021328:	f000 81a3 	beq.w	8021672 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802132c:	6823      	ldr	r3, [r4, #0]
 802132e:	f013 0f02 	tst.w	r3, #2
 8021332:	d055      	beq.n	80213e0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021334:	4b87      	ldr	r3, [pc, #540]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021336:	689b      	ldr	r3, [r3, #8]
 8021338:	f013 0f0c 	tst.w	r3, #12
 802133c:	d03e      	beq.n	80213bc <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802133e:	4b85      	ldr	r3, [pc, #532]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021340:	689b      	ldr	r3, [r3, #8]
 8021342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021346:	2b08      	cmp	r3, #8
 8021348:	d033      	beq.n	80213b2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802134a:	68e3      	ldr	r3, [r4, #12]
 802134c:	2b00      	cmp	r3, #0
 802134e:	d068      	beq.n	8021422 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021350:	4b81      	ldr	r3, [pc, #516]	; (8021558 <HAL_RCC_OscConfig+0x2b8>)
 8021352:	2201      	movs	r2, #1
 8021354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021356:	f7ff fbfd 	bl	8020b54 <HAL_GetTick>
 802135a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802135c:	4b7d      	ldr	r3, [pc, #500]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	f013 0f02 	tst.w	r3, #2
 8021364:	d154      	bne.n	8021410 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021366:	f7ff fbf5 	bl	8020b54 <HAL_GetTick>
 802136a:	1b40      	subs	r0, r0, r5
 802136c:	2802      	cmp	r0, #2
 802136e:	d9f5      	bls.n	802135c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8021370:	2003      	movs	r0, #3
 8021372:	e181      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021374:	4a77      	ldr	r2, [pc, #476]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021376:	6813      	ldr	r3, [r2, #0]
 8021378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802137c:	6013      	str	r3, [r2, #0]
 802137e:	e7b5      	b.n	80212ec <HAL_RCC_OscConfig+0x4c>
 8021380:	4b74      	ldr	r3, [pc, #464]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021382:	681a      	ldr	r2, [r3, #0]
 8021384:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8021388:	601a      	str	r2, [r3, #0]
 802138a:	681a      	ldr	r2, [r3, #0]
 802138c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021390:	601a      	str	r2, [r3, #0]
 8021392:	e7ab      	b.n	80212ec <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8021394:	f7ff fbde 	bl	8020b54 <HAL_GetTick>
 8021398:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802139a:	4b6e      	ldr	r3, [pc, #440]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80213a2:	d0c3      	beq.n	802132c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80213a4:	f7ff fbd6 	bl	8020b54 <HAL_GetTick>
 80213a8:	1b40      	subs	r0, r0, r5
 80213aa:	2864      	cmp	r0, #100	; 0x64
 80213ac:	d9f5      	bls.n	802139a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80213ae:	2003      	movs	r0, #3
 80213b0:	e162      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80213b2:	4b68      	ldr	r3, [pc, #416]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80213b4:	685b      	ldr	r3, [r3, #4]
 80213b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80213ba:	d1c6      	bne.n	802134a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80213bc:	4b65      	ldr	r3, [pc, #404]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	f013 0f02 	tst.w	r3, #2
 80213c4:	d004      	beq.n	80213d0 <HAL_RCC_OscConfig+0x130>
 80213c6:	68e3      	ldr	r3, [r4, #12]
 80213c8:	2b01      	cmp	r3, #1
 80213ca:	d001      	beq.n	80213d0 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80213cc:	2001      	movs	r0, #1
 80213ce:	e153      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80213d0:	4a60      	ldr	r2, [pc, #384]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80213d2:	6813      	ldr	r3, [r2, #0]
 80213d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80213d8:	6921      	ldr	r1, [r4, #16]
 80213da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80213de:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80213e0:	6823      	ldr	r3, [r4, #0]
 80213e2:	f013 0f08 	tst.w	r3, #8
 80213e6:	d040      	beq.n	802146a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80213e8:	6963      	ldr	r3, [r4, #20]
 80213ea:	b363      	cbz	r3, 8021446 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80213ec:	4b5b      	ldr	r3, [pc, #364]	; (802155c <HAL_RCC_OscConfig+0x2bc>)
 80213ee:	2201      	movs	r2, #1
 80213f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80213f2:	f7ff fbaf 	bl	8020b54 <HAL_GetTick>
 80213f6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80213f8:	4b56      	ldr	r3, [pc, #344]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80213fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80213fc:	f013 0f02 	tst.w	r3, #2
 8021400:	d133      	bne.n	802146a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021402:	f7ff fba7 	bl	8020b54 <HAL_GetTick>
 8021406:	1b40      	subs	r0, r0, r5
 8021408:	2802      	cmp	r0, #2
 802140a:	d9f5      	bls.n	80213f8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 802140c:	2003      	movs	r0, #3
 802140e:	e133      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021410:	4a50      	ldr	r2, [pc, #320]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021412:	6813      	ldr	r3, [r2, #0]
 8021414:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8021418:	6921      	ldr	r1, [r4, #16]
 802141a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 802141e:	6013      	str	r3, [r2, #0]
 8021420:	e7de      	b.n	80213e0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8021422:	4b4d      	ldr	r3, [pc, #308]	; (8021558 <HAL_RCC_OscConfig+0x2b8>)
 8021424:	2200      	movs	r2, #0
 8021426:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021428:	f7ff fb94 	bl	8020b54 <HAL_GetTick>
 802142c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802142e:	4b49      	ldr	r3, [pc, #292]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	f013 0f02 	tst.w	r3, #2
 8021436:	d0d3      	beq.n	80213e0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021438:	f7ff fb8c 	bl	8020b54 <HAL_GetTick>
 802143c:	1b40      	subs	r0, r0, r5
 802143e:	2802      	cmp	r0, #2
 8021440:	d9f5      	bls.n	802142e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8021442:	2003      	movs	r0, #3
 8021444:	e118      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021446:	4b45      	ldr	r3, [pc, #276]	; (802155c <HAL_RCC_OscConfig+0x2bc>)
 8021448:	2200      	movs	r2, #0
 802144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802144c:	f7ff fb82 	bl	8020b54 <HAL_GetTick>
 8021450:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021452:	4b40      	ldr	r3, [pc, #256]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021456:	f013 0f02 	tst.w	r3, #2
 802145a:	d006      	beq.n	802146a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802145c:	f7ff fb7a 	bl	8020b54 <HAL_GetTick>
 8021460:	1b40      	subs	r0, r0, r5
 8021462:	2802      	cmp	r0, #2
 8021464:	d9f5      	bls.n	8021452 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8021466:	2003      	movs	r0, #3
 8021468:	e106      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802146a:	6823      	ldr	r3, [r4, #0]
 802146c:	f013 0f04 	tst.w	r3, #4
 8021470:	d079      	beq.n	8021566 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021472:	4b38      	ldr	r3, [pc, #224]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021476:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 802147a:	d133      	bne.n	80214e4 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802147c:	2300      	movs	r3, #0
 802147e:	9301      	str	r3, [sp, #4]
 8021480:	4b34      	ldr	r3, [pc, #208]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021488:	641a      	str	r2, [r3, #64]	; 0x40
 802148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021490:	9301      	str	r3, [sp, #4]
 8021492:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8021494:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021496:	4b32      	ldr	r3, [pc, #200]	; (8021560 <HAL_RCC_OscConfig+0x2c0>)
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	f413 7f80 	tst.w	r3, #256	; 0x100
 802149e:	d023      	beq.n	80214e8 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80214a0:	68a3      	ldr	r3, [r4, #8]
 80214a2:	2b01      	cmp	r3, #1
 80214a4:	d034      	beq.n	8021510 <HAL_RCC_OscConfig+0x270>
 80214a6:	2b05      	cmp	r3, #5
 80214a8:	d038      	beq.n	802151c <HAL_RCC_OscConfig+0x27c>
 80214aa:	4b2a      	ldr	r3, [pc, #168]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80214ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80214ae:	f022 0201 	bic.w	r2, r2, #1
 80214b2:	671a      	str	r2, [r3, #112]	; 0x70
 80214b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80214b6:	f022 0204 	bic.w	r2, r2, #4
 80214ba:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80214bc:	68a3      	ldr	r3, [r4, #8]
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d036      	beq.n	8021530 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80214c2:	f7ff fb47 	bl	8020b54 <HAL_GetTick>
 80214c6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80214c8:	4b22      	ldr	r3, [pc, #136]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 80214ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80214cc:	f013 0f02 	tst.w	r3, #2
 80214d0:	d148      	bne.n	8021564 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80214d2:	f7ff fb3f 	bl	8020b54 <HAL_GetTick>
 80214d6:	1b80      	subs	r0, r0, r6
 80214d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80214dc:	4298      	cmp	r0, r3
 80214de:	d9f3      	bls.n	80214c8 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80214e0:	2003      	movs	r0, #3
 80214e2:	e0c9      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 80214e4:	2500      	movs	r5, #0
 80214e6:	e7d6      	b.n	8021496 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80214e8:	4a1d      	ldr	r2, [pc, #116]	; (8021560 <HAL_RCC_OscConfig+0x2c0>)
 80214ea:	6813      	ldr	r3, [r2, #0]
 80214ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80214f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80214f2:	f7ff fb2f 	bl	8020b54 <HAL_GetTick>
 80214f6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80214f8:	4b19      	ldr	r3, [pc, #100]	; (8021560 <HAL_RCC_OscConfig+0x2c0>)
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8021500:	d1ce      	bne.n	80214a0 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021502:	f7ff fb27 	bl	8020b54 <HAL_GetTick>
 8021506:	1b80      	subs	r0, r0, r6
 8021508:	2802      	cmp	r0, #2
 802150a:	d9f5      	bls.n	80214f8 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 802150c:	2003      	movs	r0, #3
 802150e:	e0b3      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021510:	4a10      	ldr	r2, [pc, #64]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021512:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8021514:	f043 0301 	orr.w	r3, r3, #1
 8021518:	6713      	str	r3, [r2, #112]	; 0x70
 802151a:	e7cf      	b.n	80214bc <HAL_RCC_OscConfig+0x21c>
 802151c:	4b0d      	ldr	r3, [pc, #52]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 802151e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8021520:	f042 0204 	orr.w	r2, r2, #4
 8021524:	671a      	str	r2, [r3, #112]	; 0x70
 8021526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8021528:	f042 0201 	orr.w	r2, r2, #1
 802152c:	671a      	str	r2, [r3, #112]	; 0x70
 802152e:	e7c5      	b.n	80214bc <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021530:	f7ff fb10 	bl	8020b54 <HAL_GetTick>
 8021534:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021536:	4b07      	ldr	r3, [pc, #28]	; (8021554 <HAL_RCC_OscConfig+0x2b4>)
 8021538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802153a:	f013 0f02 	tst.w	r3, #2
 802153e:	d011      	beq.n	8021564 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021540:	f7ff fb08 	bl	8020b54 <HAL_GetTick>
 8021544:	1b80      	subs	r0, r0, r6
 8021546:	f241 3388 	movw	r3, #5000	; 0x1388
 802154a:	4298      	cmp	r0, r3
 802154c:	d9f3      	bls.n	8021536 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 802154e:	2003      	movs	r0, #3
 8021550:	e092      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
 8021552:	bf00      	nop
 8021554:	40023800 	.word	0x40023800
 8021558:	42470000 	.word	0x42470000
 802155c:	42470e80 	.word	0x42470e80
 8021560:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021564:	b9ed      	cbnz	r5, 80215a2 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021566:	69a3      	ldr	r3, [r4, #24]
 8021568:	2b00      	cmp	r3, #0
 802156a:	f000 8084 	beq.w	8021676 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802156e:	4a45      	ldr	r2, [pc, #276]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 8021570:	6892      	ldr	r2, [r2, #8]
 8021572:	f002 020c 	and.w	r2, r2, #12
 8021576:	2a08      	cmp	r2, #8
 8021578:	d051      	beq.n	802161e <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802157a:	2b02      	cmp	r3, #2
 802157c:	d017      	beq.n	80215ae <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802157e:	4b42      	ldr	r3, [pc, #264]	; (8021688 <HAL_RCC_OscConfig+0x3e8>)
 8021580:	2200      	movs	r2, #0
 8021582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021584:	f7ff fae6 	bl	8020b54 <HAL_GetTick>
 8021588:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802158a:	4b3e      	ldr	r3, [pc, #248]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 802158c:	681b      	ldr	r3, [r3, #0]
 802158e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8021592:	d042      	beq.n	802161a <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021594:	f7ff fade 	bl	8020b54 <HAL_GetTick>
 8021598:	1b00      	subs	r0, r0, r4
 802159a:	2802      	cmp	r0, #2
 802159c:	d9f5      	bls.n	802158a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 802159e:	2003      	movs	r0, #3
 80215a0:	e06a      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80215a2:	4a38      	ldr	r2, [pc, #224]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 80215a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80215a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80215aa:	6413      	str	r3, [r2, #64]	; 0x40
 80215ac:	e7db      	b.n	8021566 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80215ae:	4b36      	ldr	r3, [pc, #216]	; (8021688 <HAL_RCC_OscConfig+0x3e8>)
 80215b0:	2200      	movs	r2, #0
 80215b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80215b4:	f7ff face 	bl	8020b54 <HAL_GetTick>
 80215b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80215ba:	4b32      	ldr	r3, [pc, #200]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80215c2:	d006      	beq.n	80215d2 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80215c4:	f7ff fac6 	bl	8020b54 <HAL_GetTick>
 80215c8:	1b40      	subs	r0, r0, r5
 80215ca:	2802      	cmp	r0, #2
 80215cc:	d9f5      	bls.n	80215ba <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80215ce:	2003      	movs	r0, #3
 80215d0:	e052      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80215d2:	69e3      	ldr	r3, [r4, #28]
 80215d4:	6a22      	ldr	r2, [r4, #32]
 80215d6:	4313      	orrs	r3, r2
 80215d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80215da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80215de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80215e0:	0852      	lsrs	r2, r2, #1
 80215e2:	3a01      	subs	r2, #1
 80215e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80215e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80215ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80215ee:	4a25      	ldr	r2, [pc, #148]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 80215f0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80215f2:	4b25      	ldr	r3, [pc, #148]	; (8021688 <HAL_RCC_OscConfig+0x3e8>)
 80215f4:	2201      	movs	r2, #1
 80215f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80215f8:	f7ff faac 	bl	8020b54 <HAL_GetTick>
 80215fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80215fe:	4b21      	ldr	r3, [pc, #132]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8021606:	d106      	bne.n	8021616 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021608:	f7ff faa4 	bl	8020b54 <HAL_GetTick>
 802160c:	1b00      	subs	r0, r0, r4
 802160e:	2802      	cmp	r0, #2
 8021610:	d9f5      	bls.n	80215fe <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8021612:	2003      	movs	r0, #3
 8021614:	e030      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8021616:	2000      	movs	r0, #0
 8021618:	e02e      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
 802161a:	2000      	movs	r0, #0
 802161c:	e02c      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802161e:	2b01      	cmp	r3, #1
 8021620:	d02c      	beq.n	802167c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8021622:	4b18      	ldr	r3, [pc, #96]	; (8021684 <HAL_RCC_OscConfig+0x3e4>)
 8021624:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021626:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 802162a:	69e2      	ldr	r2, [r4, #28]
 802162c:	4291      	cmp	r1, r2
 802162e:	d001      	beq.n	8021634 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8021630:	2001      	movs	r0, #1
 8021632:	e021      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8021638:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802163a:	428a      	cmp	r2, r1
 802163c:	d001      	beq.n	8021642 <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 802163e:	2001      	movs	r0, #1
 8021640:	e01a      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8021642:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021644:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8021648:	401a      	ands	r2, r3
 802164a:	428a      	cmp	r2, r1
 802164c:	d001      	beq.n	8021652 <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 802164e:	2001      	movs	r0, #1
 8021650:	e012      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8021652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8021656:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8021658:	428a      	cmp	r2, r1
 802165a:	d001      	beq.n	8021660 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 802165c:	2001      	movs	r0, #1
 802165e:	e00b      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8021660:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8021664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8021666:	4293      	cmp	r3, r2
 8021668:	d00a      	beq.n	8021680 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 802166a:	2001      	movs	r0, #1
 802166c:	e004      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 802166e:	2001      	movs	r0, #1
}
 8021670:	4770      	bx	lr
        return HAL_ERROR;
 8021672:	2001      	movs	r0, #1
 8021674:	e000      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8021676:	2000      	movs	r0, #0
}
 8021678:	b002      	add	sp, #8
 802167a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 802167c:	2001      	movs	r0, #1
 802167e:	e7fb      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8021680:	2000      	movs	r0, #0
 8021682:	e7f9      	b.n	8021678 <HAL_RCC_OscConfig+0x3d8>
 8021684:	40023800 	.word	0x40023800
 8021688:	42470060 	.word	0x42470060

0802168c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802168c:	4b32      	ldr	r3, [pc, #200]	; (8021758 <HAL_RCC_GetSysClockFreq+0xcc>)
 802168e:	689b      	ldr	r3, [r3, #8]
 8021690:	f003 030c 	and.w	r3, r3, #12
 8021694:	2b04      	cmp	r3, #4
 8021696:	d05c      	beq.n	8021752 <HAL_RCC_GetSysClockFreq+0xc6>
 8021698:	2b08      	cmp	r3, #8
 802169a:	d001      	beq.n	80216a0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802169c:	482f      	ldr	r0, [pc, #188]	; (802175c <HAL_RCC_GetSysClockFreq+0xd0>)
 802169e:	4770      	bx	lr
{
 80216a0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80216a4:	4b2c      	ldr	r3, [pc, #176]	; (8021758 <HAL_RCC_GetSysClockFreq+0xcc>)
 80216a6:	685a      	ldr	r2, [r3, #4]
 80216a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80216ac:	685b      	ldr	r3, [r3, #4]
 80216ae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80216b2:	d02b      	beq.n	802170c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80216b4:	4b28      	ldr	r3, [pc, #160]	; (8021758 <HAL_RCC_GetSysClockFreq+0xcc>)
 80216b6:	685b      	ldr	r3, [r3, #4]
 80216b8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80216bc:	461e      	mov	r6, r3
 80216be:	2700      	movs	r7, #0
 80216c0:	015c      	lsls	r4, r3, #5
 80216c2:	2500      	movs	r5, #0
 80216c4:	1ae4      	subs	r4, r4, r3
 80216c6:	eb65 0507 	sbc.w	r5, r5, r7
 80216ca:	01a9      	lsls	r1, r5, #6
 80216cc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80216d0:	01a0      	lsls	r0, r4, #6
 80216d2:	1b00      	subs	r0, r0, r4
 80216d4:	eb61 0105 	sbc.w	r1, r1, r5
 80216d8:	00cb      	lsls	r3, r1, #3
 80216da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80216de:	00c4      	lsls	r4, r0, #3
 80216e0:	19a0      	adds	r0, r4, r6
 80216e2:	eb43 0107 	adc.w	r1, r3, r7
 80216e6:	024b      	lsls	r3, r1, #9
 80216e8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80216ec:	0244      	lsls	r4, r0, #9
 80216ee:	4620      	mov	r0, r4
 80216f0:	4619      	mov	r1, r3
 80216f2:	2300      	movs	r3, #0
 80216f4:	f7fe fd6a 	bl	80201cc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80216f8:	4b17      	ldr	r3, [pc, #92]	; (8021758 <HAL_RCC_GetSysClockFreq+0xcc>)
 80216fa:	685b      	ldr	r3, [r3, #4]
 80216fc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8021700:	3301      	adds	r3, #1
 8021702:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8021704:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8021708:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802170c:	4b12      	ldr	r3, [pc, #72]	; (8021758 <HAL_RCC_GetSysClockFreq+0xcc>)
 802170e:	685b      	ldr	r3, [r3, #4]
 8021710:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8021714:	461e      	mov	r6, r3
 8021716:	2700      	movs	r7, #0
 8021718:	015c      	lsls	r4, r3, #5
 802171a:	2500      	movs	r5, #0
 802171c:	1ae4      	subs	r4, r4, r3
 802171e:	eb65 0507 	sbc.w	r5, r5, r7
 8021722:	01a9      	lsls	r1, r5, #6
 8021724:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8021728:	01a0      	lsls	r0, r4, #6
 802172a:	1b00      	subs	r0, r0, r4
 802172c:	eb61 0105 	sbc.w	r1, r1, r5
 8021730:	00cb      	lsls	r3, r1, #3
 8021732:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8021736:	00c4      	lsls	r4, r0, #3
 8021738:	19a0      	adds	r0, r4, r6
 802173a:	eb43 0107 	adc.w	r1, r3, r7
 802173e:	028b      	lsls	r3, r1, #10
 8021740:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8021744:	0284      	lsls	r4, r0, #10
 8021746:	4620      	mov	r0, r4
 8021748:	4619      	mov	r1, r3
 802174a:	2300      	movs	r3, #0
 802174c:	f7fe fd3e 	bl	80201cc <__aeabi_uldivmod>
 8021750:	e7d2      	b.n	80216f8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8021752:	4803      	ldr	r0, [pc, #12]	; (8021760 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8021754:	4770      	bx	lr
 8021756:	bf00      	nop
 8021758:	40023800 	.word	0x40023800
 802175c:	00f42400 	.word	0x00f42400
 8021760:	007a1200 	.word	0x007a1200

08021764 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8021764:	2800      	cmp	r0, #0
 8021766:	f000 809e 	beq.w	80218a6 <HAL_RCC_ClockConfig+0x142>
{
 802176a:	b570      	push	{r4, r5, r6, lr}
 802176c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802176e:	4b50      	ldr	r3, [pc, #320]	; (80218b0 <HAL_RCC_ClockConfig+0x14c>)
 8021770:	681b      	ldr	r3, [r3, #0]
 8021772:	f003 030f 	and.w	r3, r3, #15
 8021776:	428b      	cmp	r3, r1
 8021778:	d209      	bcs.n	802178e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 802177a:	b2cb      	uxtb	r3, r1
 802177c:	4a4c      	ldr	r2, [pc, #304]	; (80218b0 <HAL_RCC_ClockConfig+0x14c>)
 802177e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021780:	6813      	ldr	r3, [r2, #0]
 8021782:	f003 030f 	and.w	r3, r3, #15
 8021786:	428b      	cmp	r3, r1
 8021788:	d001      	beq.n	802178e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 802178a:	2001      	movs	r0, #1
}
 802178c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802178e:	6823      	ldr	r3, [r4, #0]
 8021790:	f013 0f02 	tst.w	r3, #2
 8021794:	d017      	beq.n	80217c6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021796:	f013 0f04 	tst.w	r3, #4
 802179a:	d004      	beq.n	80217a6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802179c:	4a45      	ldr	r2, [pc, #276]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 802179e:	6893      	ldr	r3, [r2, #8]
 80217a0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80217a4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80217a6:	6823      	ldr	r3, [r4, #0]
 80217a8:	f013 0f08 	tst.w	r3, #8
 80217ac:	d004      	beq.n	80217b8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80217ae:	4a41      	ldr	r2, [pc, #260]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 80217b0:	6893      	ldr	r3, [r2, #8]
 80217b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80217b6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80217b8:	4a3e      	ldr	r2, [pc, #248]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 80217ba:	6893      	ldr	r3, [r2, #8]
 80217bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80217c0:	68a0      	ldr	r0, [r4, #8]
 80217c2:	4303      	orrs	r3, r0
 80217c4:	6093      	str	r3, [r2, #8]
 80217c6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80217c8:	6823      	ldr	r3, [r4, #0]
 80217ca:	f013 0f01 	tst.w	r3, #1
 80217ce:	d032      	beq.n	8021836 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80217d0:	6863      	ldr	r3, [r4, #4]
 80217d2:	2b01      	cmp	r3, #1
 80217d4:	d021      	beq.n	802181a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80217d6:	1e9a      	subs	r2, r3, #2
 80217d8:	2a01      	cmp	r2, #1
 80217da:	d925      	bls.n	8021828 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80217dc:	4a35      	ldr	r2, [pc, #212]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 80217de:	6812      	ldr	r2, [r2, #0]
 80217e0:	f012 0f02 	tst.w	r2, #2
 80217e4:	d061      	beq.n	80218aa <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80217e6:	4933      	ldr	r1, [pc, #204]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 80217e8:	688a      	ldr	r2, [r1, #8]
 80217ea:	f022 0203 	bic.w	r2, r2, #3
 80217ee:	4313      	orrs	r3, r2
 80217f0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80217f2:	f7ff f9af 	bl	8020b54 <HAL_GetTick>
 80217f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80217f8:	4b2e      	ldr	r3, [pc, #184]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 80217fa:	689b      	ldr	r3, [r3, #8]
 80217fc:	f003 030c 	and.w	r3, r3, #12
 8021800:	6862      	ldr	r2, [r4, #4]
 8021802:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8021806:	d016      	beq.n	8021836 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021808:	f7ff f9a4 	bl	8020b54 <HAL_GetTick>
 802180c:	1b80      	subs	r0, r0, r6
 802180e:	f241 3388 	movw	r3, #5000	; 0x1388
 8021812:	4298      	cmp	r0, r3
 8021814:	d9f0      	bls.n	80217f8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8021816:	2003      	movs	r0, #3
 8021818:	e7b8      	b.n	802178c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802181a:	4a26      	ldr	r2, [pc, #152]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 802181c:	6812      	ldr	r2, [r2, #0]
 802181e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8021822:	d1e0      	bne.n	80217e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8021824:	2001      	movs	r0, #1
 8021826:	e7b1      	b.n	802178c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021828:	4a22      	ldr	r2, [pc, #136]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 802182a:	6812      	ldr	r2, [r2, #0]
 802182c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8021830:	d1d9      	bne.n	80217e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8021832:	2001      	movs	r0, #1
 8021834:	e7aa      	b.n	802178c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021836:	4b1e      	ldr	r3, [pc, #120]	; (80218b0 <HAL_RCC_ClockConfig+0x14c>)
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	f003 030f 	and.w	r3, r3, #15
 802183e:	42ab      	cmp	r3, r5
 8021840:	d909      	bls.n	8021856 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021842:	b2ea      	uxtb	r2, r5
 8021844:	4b1a      	ldr	r3, [pc, #104]	; (80218b0 <HAL_RCC_ClockConfig+0x14c>)
 8021846:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021848:	681b      	ldr	r3, [r3, #0]
 802184a:	f003 030f 	and.w	r3, r3, #15
 802184e:	42ab      	cmp	r3, r5
 8021850:	d001      	beq.n	8021856 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8021852:	2001      	movs	r0, #1
 8021854:	e79a      	b.n	802178c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021856:	6823      	ldr	r3, [r4, #0]
 8021858:	f013 0f04 	tst.w	r3, #4
 802185c:	d006      	beq.n	802186c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802185e:	4a15      	ldr	r2, [pc, #84]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 8021860:	6893      	ldr	r3, [r2, #8]
 8021862:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8021866:	68e1      	ldr	r1, [r4, #12]
 8021868:	430b      	orrs	r3, r1
 802186a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802186c:	6823      	ldr	r3, [r4, #0]
 802186e:	f013 0f08 	tst.w	r3, #8
 8021872:	d007      	beq.n	8021884 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021874:	4a0f      	ldr	r2, [pc, #60]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 8021876:	6893      	ldr	r3, [r2, #8]
 8021878:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 802187c:	6921      	ldr	r1, [r4, #16]
 802187e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8021882:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8021884:	f7ff ff02 	bl	802168c <HAL_RCC_GetSysClockFreq>
 8021888:	4b0a      	ldr	r3, [pc, #40]	; (80218b4 <HAL_RCC_ClockConfig+0x150>)
 802188a:	689b      	ldr	r3, [r3, #8]
 802188c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8021890:	4a09      	ldr	r2, [pc, #36]	; (80218b8 <HAL_RCC_ClockConfig+0x154>)
 8021892:	5cd3      	ldrb	r3, [r2, r3]
 8021894:	40d8      	lsrs	r0, r3
 8021896:	4b09      	ldr	r3, [pc, #36]	; (80218bc <HAL_RCC_ClockConfig+0x158>)
 8021898:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 802189a:	4b09      	ldr	r3, [pc, #36]	; (80218c0 <HAL_RCC_ClockConfig+0x15c>)
 802189c:	6818      	ldr	r0, [r3, #0]
 802189e:	f7ff f90d 	bl	8020abc <HAL_InitTick>
  return HAL_OK;
 80218a2:	2000      	movs	r0, #0
 80218a4:	e772      	b.n	802178c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80218a6:	2001      	movs	r0, #1
}
 80218a8:	4770      	bx	lr
        return HAL_ERROR;
 80218aa:	2001      	movs	r0, #1
 80218ac:	e76e      	b.n	802178c <HAL_RCC_ClockConfig+0x28>
 80218ae:	bf00      	nop
 80218b0:	40023c00 	.word	0x40023c00
 80218b4:	40023800 	.word	0x40023800
 80218b8:	08021d40 	.word	0x08021d40
 80218bc:	20000000 	.word	0x20000000
 80218c0:	20000008 	.word	0x20000008

080218c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80218c4:	4b01      	ldr	r3, [pc, #4]	; (80218cc <HAL_RCC_GetHCLKFreq+0x8>)
 80218c6:	6818      	ldr	r0, [r3, #0]
 80218c8:	4770      	bx	lr
 80218ca:	bf00      	nop
 80218cc:	20000000 	.word	0x20000000

080218d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80218d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80218d2:	f7ff fff7 	bl	80218c4 <HAL_RCC_GetHCLKFreq>
 80218d6:	4b04      	ldr	r3, [pc, #16]	; (80218e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80218d8:	689b      	ldr	r3, [r3, #8]
 80218da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80218de:	4a03      	ldr	r2, [pc, #12]	; (80218ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80218e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80218e2:	40d8      	lsrs	r0, r3
 80218e4:	bd08      	pop	{r3, pc}
 80218e6:	bf00      	nop
 80218e8:	40023800 	.word	0x40023800
 80218ec:	08021d50 	.word	0x08021d50

080218f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80218f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80218f2:	f7ff ffe7 	bl	80218c4 <HAL_RCC_GetHCLKFreq>
 80218f6:	4b04      	ldr	r3, [pc, #16]	; (8021908 <HAL_RCC_GetPCLK2Freq+0x18>)
 80218f8:	689b      	ldr	r3, [r3, #8]
 80218fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80218fe:	4a03      	ldr	r2, [pc, #12]	; (802190c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8021900:	5cd3      	ldrb	r3, [r2, r3]
}
 8021902:	40d8      	lsrs	r0, r3
 8021904:	bd08      	pop	{r3, pc}
 8021906:	bf00      	nop
 8021908:	40023800 	.word	0x40023800
 802190c:	08021d50 	.word	0x08021d50

08021910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021910:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8021914:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021916:	6802      	ldr	r2, [r0, #0]
 8021918:	6913      	ldr	r3, [r2, #16]
 802191a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802191e:	68c1      	ldr	r1, [r0, #12]
 8021920:	430b      	orrs	r3, r1
 8021922:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021924:	6883      	ldr	r3, [r0, #8]
 8021926:	6902      	ldr	r2, [r0, #16]
 8021928:	4313      	orrs	r3, r2
 802192a:	6942      	ldr	r2, [r0, #20]
 802192c:	4313      	orrs	r3, r2
 802192e:	69c2      	ldr	r2, [r0, #28]
 8021930:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8021932:	6801      	ldr	r1, [r0, #0]
 8021934:	68cb      	ldr	r3, [r1, #12]
 8021936:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 802193a:	f023 030c 	bic.w	r3, r3, #12
 802193e:	4313      	orrs	r3, r2
 8021940:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021942:	6802      	ldr	r2, [r0, #0]
 8021944:	6953      	ldr	r3, [r2, #20]
 8021946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802194a:	6981      	ldr	r1, [r0, #24]
 802194c:	430b      	orrs	r3, r1
 802194e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021950:	69c3      	ldr	r3, [r0, #28]
 8021952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021956:	d03b      	beq.n	80219d0 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021958:	6803      	ldr	r3, [r0, #0]
 802195a:	4a71      	ldr	r2, [pc, #452]	; (8021b20 <UART_SetConfig+0x210>)
 802195c:	4293      	cmp	r3, r2
 802195e:	f000 80ab 	beq.w	8021ab8 <UART_SetConfig+0x1a8>
 8021962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021966:	4293      	cmp	r3, r2
 8021968:	f000 80a6 	beq.w	8021ab8 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802196c:	f7ff ffb0 	bl	80218d0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021970:	f04f 0900 	mov.w	r9, #0
 8021974:	1806      	adds	r6, r0, r0
 8021976:	eb49 0709 	adc.w	r7, r9, r9
 802197a:	eb16 0b00 	adds.w	fp, r6, r0
 802197e:	eb47 0c09 	adc.w	ip, r7, r9
 8021982:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021986:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 802198a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 802198e:	4693      	mov	fp, r2
 8021990:	469c      	mov	ip, r3
 8021992:	6863      	ldr	r3, [r4, #4]
 8021994:	009a      	lsls	r2, r3, #2
 8021996:	0f9b      	lsrs	r3, r3, #30
 8021998:	eb10 000b 	adds.w	r0, r0, fp
 802199c:	eb49 010c 	adc.w	r1, r9, ip
 80219a0:	f7fe fc14 	bl	80201cc <__aeabi_uldivmod>
 80219a4:	4d5f      	ldr	r5, [pc, #380]	; (8021b24 <UART_SetConfig+0x214>)
 80219a6:	fba5 3200 	umull	r3, r2, r5, r0
 80219aa:	0951      	lsrs	r1, r2, #5
 80219ac:	2264      	movs	r2, #100	; 0x64
 80219ae:	fb02 0211 	mls	r2, r2, r1, r0
 80219b2:	0113      	lsls	r3, r2, #4
 80219b4:	3332      	adds	r3, #50	; 0x32
 80219b6:	fba5 2303 	umull	r2, r3, r5, r3
 80219ba:	095b      	lsrs	r3, r3, #5
 80219bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80219c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80219c4:	f003 030f 	and.w	r3, r3, #15
 80219c8:	6821      	ldr	r1, [r4, #0]
 80219ca:	4413      	add	r3, r2
 80219cc:	608b      	str	r3, [r1, #8]
    }
  }
}
 80219ce:	e0a4      	b.n	8021b1a <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80219d0:	6803      	ldr	r3, [r0, #0]
 80219d2:	4a53      	ldr	r2, [pc, #332]	; (8021b20 <UART_SetConfig+0x210>)
 80219d4:	4293      	cmp	r3, r2
 80219d6:	d039      	beq.n	8021a4c <UART_SetConfig+0x13c>
 80219d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80219dc:	4293      	cmp	r3, r2
 80219de:	d035      	beq.n	8021a4c <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80219e0:	f7ff ff76 	bl	80218d0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80219e4:	4683      	mov	fp, r0
 80219e6:	f04f 0c00 	mov.w	ip, #0
 80219ea:	1806      	adds	r6, r0, r0
 80219ec:	eb4c 070c 	adc.w	r7, ip, ip
 80219f0:	eb16 0800 	adds.w	r8, r6, r0
 80219f4:	eb47 090c 	adc.w	r9, r7, ip
 80219f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80219fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021a00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021a04:	4690      	mov	r8, r2
 8021a06:	4699      	mov	r9, r3
 8021a08:	6862      	ldr	r2, [r4, #4]
 8021a0a:	2100      	movs	r1, #0
 8021a0c:	1892      	adds	r2, r2, r2
 8021a0e:	eb41 0301 	adc.w	r3, r1, r1
 8021a12:	eb1b 0008 	adds.w	r0, fp, r8
 8021a16:	eb4c 0109 	adc.w	r1, ip, r9
 8021a1a:	f7fe fbd7 	bl	80201cc <__aeabi_uldivmod>
 8021a1e:	4d41      	ldr	r5, [pc, #260]	; (8021b24 <UART_SetConfig+0x214>)
 8021a20:	fba5 3200 	umull	r3, r2, r5, r0
 8021a24:	0951      	lsrs	r1, r2, #5
 8021a26:	2264      	movs	r2, #100	; 0x64
 8021a28:	fb02 0211 	mls	r2, r2, r1, r0
 8021a2c:	00d3      	lsls	r3, r2, #3
 8021a2e:	3332      	adds	r3, #50	; 0x32
 8021a30:	fba5 2303 	umull	r2, r3, r5, r3
 8021a34:	095b      	lsrs	r3, r3, #5
 8021a36:	005a      	lsls	r2, r3, #1
 8021a38:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8021a3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8021a40:	f003 0307 	and.w	r3, r3, #7
 8021a44:	6821      	ldr	r1, [r4, #0]
 8021a46:	4413      	add	r3, r2
 8021a48:	608b      	str	r3, [r1, #8]
 8021a4a:	e066      	b.n	8021b1a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8021a4c:	f7ff ff50 	bl	80218f0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021a50:	4680      	mov	r8, r0
 8021a52:	f04f 0900 	mov.w	r9, #0
 8021a56:	1806      	adds	r6, r0, r0
 8021a58:	eb49 0709 	adc.w	r7, r9, r9
 8021a5c:	eb16 0b00 	adds.w	fp, r6, r0
 8021a60:	eb47 0c09 	adc.w	ip, r7, r9
 8021a64:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021a68:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8021a6c:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8021a70:	4693      	mov	fp, r2
 8021a72:	469c      	mov	ip, r3
 8021a74:	6862      	ldr	r2, [r4, #4]
 8021a76:	2100      	movs	r1, #0
 8021a78:	1892      	adds	r2, r2, r2
 8021a7a:	eb41 0301 	adc.w	r3, r1, r1
 8021a7e:	eb18 000b 	adds.w	r0, r8, fp
 8021a82:	eb49 010c 	adc.w	r1, r9, ip
 8021a86:	f7fe fba1 	bl	80201cc <__aeabi_uldivmod>
 8021a8a:	4d26      	ldr	r5, [pc, #152]	; (8021b24 <UART_SetConfig+0x214>)
 8021a8c:	fba5 3200 	umull	r3, r2, r5, r0
 8021a90:	0951      	lsrs	r1, r2, #5
 8021a92:	2264      	movs	r2, #100	; 0x64
 8021a94:	fb02 0211 	mls	r2, r2, r1, r0
 8021a98:	00d3      	lsls	r3, r2, #3
 8021a9a:	3332      	adds	r3, #50	; 0x32
 8021a9c:	fba5 2303 	umull	r2, r3, r5, r3
 8021aa0:	095b      	lsrs	r3, r3, #5
 8021aa2:	005a      	lsls	r2, r3, #1
 8021aa4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8021aa8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8021aac:	f003 0307 	and.w	r3, r3, #7
 8021ab0:	6821      	ldr	r1, [r4, #0]
 8021ab2:	4413      	add	r3, r2
 8021ab4:	608b      	str	r3, [r1, #8]
 8021ab6:	e030      	b.n	8021b1a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8021ab8:	f7ff ff1a 	bl	80218f0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021abc:	f04f 0900 	mov.w	r9, #0
 8021ac0:	1806      	adds	r6, r0, r0
 8021ac2:	eb49 0709 	adc.w	r7, r9, r9
 8021ac6:	eb16 0b00 	adds.w	fp, r6, r0
 8021aca:	eb47 0c09 	adc.w	ip, r7, r9
 8021ace:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021ad2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8021ad6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8021ada:	4693      	mov	fp, r2
 8021adc:	469c      	mov	ip, r3
 8021ade:	6863      	ldr	r3, [r4, #4]
 8021ae0:	009a      	lsls	r2, r3, #2
 8021ae2:	0f9b      	lsrs	r3, r3, #30
 8021ae4:	eb10 000b 	adds.w	r0, r0, fp
 8021ae8:	eb49 010c 	adc.w	r1, r9, ip
 8021aec:	f7fe fb6e 	bl	80201cc <__aeabi_uldivmod>
 8021af0:	4d0c      	ldr	r5, [pc, #48]	; (8021b24 <UART_SetConfig+0x214>)
 8021af2:	fba5 3200 	umull	r3, r2, r5, r0
 8021af6:	0951      	lsrs	r1, r2, #5
 8021af8:	2264      	movs	r2, #100	; 0x64
 8021afa:	fb02 0211 	mls	r2, r2, r1, r0
 8021afe:	0113      	lsls	r3, r2, #4
 8021b00:	3332      	adds	r3, #50	; 0x32
 8021b02:	fba5 2303 	umull	r2, r3, r5, r3
 8021b06:	095b      	lsrs	r3, r3, #5
 8021b08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8021b0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8021b10:	f003 030f 	and.w	r3, r3, #15
 8021b14:	6821      	ldr	r1, [r4, #0]
 8021b16:	4413      	add	r3, r2
 8021b18:	608b      	str	r3, [r1, #8]
}
 8021b1a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8021b1e:	bf00      	nop
 8021b20:	40011000 	.word	0x40011000
 8021b24:	51eb851f 	.word	0x51eb851f

08021b28 <UART_WaitOnFlagUntilTimeout>:
{
 8021b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b2c:	4605      	mov	r5, r0
 8021b2e:	460f      	mov	r7, r1
 8021b30:	4616      	mov	r6, r2
 8021b32:	4698      	mov	r8, r3
 8021b34:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021b36:	682b      	ldr	r3, [r5, #0]
 8021b38:	681b      	ldr	r3, [r3, #0]
 8021b3a:	ea37 0303 	bics.w	r3, r7, r3
 8021b3e:	bf0c      	ite	eq
 8021b40:	2301      	moveq	r3, #1
 8021b42:	2300      	movne	r3, #0
 8021b44:	42b3      	cmp	r3, r6
 8021b46:	d11d      	bne.n	8021b84 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8021b48:	f1b4 3fff 	cmp.w	r4, #4294967295
 8021b4c:	d0f3      	beq.n	8021b36 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8021b4e:	b12c      	cbz	r4, 8021b5c <UART_WaitOnFlagUntilTimeout+0x34>
 8021b50:	f7ff f800 	bl	8020b54 <HAL_GetTick>
 8021b54:	eba0 0008 	sub.w	r0, r0, r8
 8021b58:	42a0      	cmp	r0, r4
 8021b5a:	d9ec      	bls.n	8021b36 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8021b5c:	682a      	ldr	r2, [r5, #0]
 8021b5e:	68d3      	ldr	r3, [r2, #12]
 8021b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8021b64:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021b66:	682a      	ldr	r2, [r5, #0]
 8021b68:	6953      	ldr	r3, [r2, #20]
 8021b6a:	f023 0301 	bic.w	r3, r3, #1
 8021b6e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8021b70:	2320      	movs	r3, #32
 8021b72:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8021b76:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8021b80:	2003      	movs	r0, #3
 8021b82:	e000      	b.n	8021b86 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8021b84:	2000      	movs	r0, #0
}
 8021b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021b8a <HAL_UART_Init>:
  if (huart == NULL)
 8021b8a:	b358      	cbz	r0, 8021be4 <HAL_UART_Init+0x5a>
{
 8021b8c:	b510      	push	{r4, lr}
 8021b8e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8021b90:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8021b94:	b30b      	cbz	r3, 8021bda <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8021b96:	2324      	movs	r3, #36	; 0x24
 8021b98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8021b9c:	6822      	ldr	r2, [r4, #0]
 8021b9e:	68d3      	ldr	r3, [r2, #12]
 8021ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021ba4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8021ba6:	4620      	mov	r0, r4
 8021ba8:	f7ff feb2 	bl	8021910 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021bac:	6822      	ldr	r2, [r4, #0]
 8021bae:	6913      	ldr	r3, [r2, #16]
 8021bb0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8021bb4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021bb6:	6822      	ldr	r2, [r4, #0]
 8021bb8:	6953      	ldr	r3, [r2, #20]
 8021bba:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8021bbe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8021bc0:	6822      	ldr	r2, [r4, #0]
 8021bc2:	68d3      	ldr	r3, [r2, #12]
 8021bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021bc8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021bca:	2000      	movs	r0, #0
 8021bcc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8021bce:	2320      	movs	r3, #32
 8021bd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8021bd4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8021bd8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8021bda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8021bde:	f7fe fef1 	bl	80209c4 <HAL_UART_MspInit>
 8021be2:	e7d8      	b.n	8021b96 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8021be4:	2001      	movs	r0, #1
}
 8021be6:	4770      	bx	lr

08021be8 <HAL_UART_Receive>:
{
 8021be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021bec:	b083      	sub	sp, #12
 8021bee:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8021bf0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8021bf4:	b2db      	uxtb	r3, r3
 8021bf6:	2b20      	cmp	r3, #32
 8021bf8:	d15c      	bne.n	8021cb4 <HAL_UART_Receive+0xcc>
 8021bfa:	4604      	mov	r4, r0
 8021bfc:	460d      	mov	r5, r1
 8021bfe:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8021c00:	2900      	cmp	r1, #0
 8021c02:	d05b      	beq.n	8021cbc <HAL_UART_Receive+0xd4>
 8021c04:	2a00      	cmp	r2, #0
 8021c06:	d05b      	beq.n	8021cc0 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8021c08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8021c0c:	2b01      	cmp	r3, #1
 8021c0e:	d059      	beq.n	8021cc4 <HAL_UART_Receive+0xdc>
 8021c10:	2301      	movs	r3, #1
 8021c12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021c16:	f04f 0900 	mov.w	r9, #0
 8021c1a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021c1e:	2322      	movs	r3, #34	; 0x22
 8021c20:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8021c24:	f7fe ff96 	bl	8020b54 <HAL_GetTick>
 8021c28:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8021c2a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8021c2e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8021c32:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8021c36:	e01d      	b.n	8021c74 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8021c38:	9600      	str	r6, [sp, #0]
 8021c3a:	463b      	mov	r3, r7
 8021c3c:	2200      	movs	r2, #0
 8021c3e:	2120      	movs	r1, #32
 8021c40:	4620      	mov	r0, r4
 8021c42:	f7ff ff71 	bl	8021b28 <UART_WaitOnFlagUntilTimeout>
 8021c46:	2800      	cmp	r0, #0
 8021c48:	d13e      	bne.n	8021cc8 <HAL_UART_Receive+0xe0>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8021c4a:	6923      	ldr	r3, [r4, #16]
 8021c4c:	b933      	cbnz	r3, 8021c5c <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8021c4e:	6823      	ldr	r3, [r4, #0]
 8021c50:	685b      	ldr	r3, [r3, #4]
 8021c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c56:	f825 3b02 	strh.w	r3, [r5], #2
 8021c5a:	e00b      	b.n	8021c74 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8021c5c:	6823      	ldr	r3, [r4, #0]
 8021c5e:	685b      	ldr	r3, [r3, #4]
 8021c60:	b2db      	uxtb	r3, r3
 8021c62:	f825 3b01 	strh.w	r3, [r5], #1
 8021c66:	e005      	b.n	8021c74 <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021c68:	6823      	ldr	r3, [r4, #0]
 8021c6a:	685b      	ldr	r3, [r3, #4]
 8021c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021c70:	702b      	strb	r3, [r5, #0]
 8021c72:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 8021c74:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8021c76:	b29b      	uxth	r3, r3
 8021c78:	b1bb      	cbz	r3, 8021caa <HAL_UART_Receive+0xc2>
      huart->RxXferCount--;
 8021c7a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8021c7c:	3b01      	subs	r3, #1
 8021c7e:	b29b      	uxth	r3, r3
 8021c80:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8021c82:	68a3      	ldr	r3, [r4, #8]
 8021c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021c88:	d0d6      	beq.n	8021c38 <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8021c8a:	9600      	str	r6, [sp, #0]
 8021c8c:	463b      	mov	r3, r7
 8021c8e:	2200      	movs	r2, #0
 8021c90:	2120      	movs	r1, #32
 8021c92:	4620      	mov	r0, r4
 8021c94:	f7ff ff48 	bl	8021b28 <UART_WaitOnFlagUntilTimeout>
 8021c98:	b9c0      	cbnz	r0, 8021ccc <HAL_UART_Receive+0xe4>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8021c9a:	6923      	ldr	r3, [r4, #16]
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d1e3      	bne.n	8021c68 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021ca0:	6823      	ldr	r3, [r4, #0]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	702b      	strb	r3, [r5, #0]
 8021ca6:	3501      	adds	r5, #1
 8021ca8:	e7e4      	b.n	8021c74 <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 8021caa:	2320      	movs	r3, #32
 8021cac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8021cb0:	2000      	movs	r0, #0
 8021cb2:	e000      	b.n	8021cb6 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8021cb4:	2002      	movs	r0, #2
}
 8021cb6:	b003      	add	sp, #12
 8021cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8021cbc:	2001      	movs	r0, #1
 8021cbe:	e7fa      	b.n	8021cb6 <HAL_UART_Receive+0xce>
 8021cc0:	2001      	movs	r0, #1
 8021cc2:	e7f8      	b.n	8021cb6 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8021cc4:	2002      	movs	r0, #2
 8021cc6:	e7f6      	b.n	8021cb6 <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 8021cc8:	2003      	movs	r0, #3
 8021cca:	e7f4      	b.n	8021cb6 <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 8021ccc:	2003      	movs	r0, #3
 8021cce:	e7f2      	b.n	8021cb6 <HAL_UART_Receive+0xce>

08021cd0 <__libc_init_array>:
 8021cd0:	b570      	push	{r4, r5, r6, lr}
 8021cd2:	4e0d      	ldr	r6, [pc, #52]	; (8021d08 <__libc_init_array+0x38>)
 8021cd4:	4c0d      	ldr	r4, [pc, #52]	; (8021d0c <__libc_init_array+0x3c>)
 8021cd6:	1ba4      	subs	r4, r4, r6
 8021cd8:	10a4      	asrs	r4, r4, #2
 8021cda:	2500      	movs	r5, #0
 8021cdc:	42a5      	cmp	r5, r4
 8021cde:	d109      	bne.n	8021cf4 <__libc_init_array+0x24>
 8021ce0:	4e0b      	ldr	r6, [pc, #44]	; (8021d10 <__libc_init_array+0x40>)
 8021ce2:	4c0c      	ldr	r4, [pc, #48]	; (8021d14 <__libc_init_array+0x44>)
 8021ce4:	f000 f820 	bl	8021d28 <_init>
 8021ce8:	1ba4      	subs	r4, r4, r6
 8021cea:	10a4      	asrs	r4, r4, #2
 8021cec:	2500      	movs	r5, #0
 8021cee:	42a5      	cmp	r5, r4
 8021cf0:	d105      	bne.n	8021cfe <__libc_init_array+0x2e>
 8021cf2:	bd70      	pop	{r4, r5, r6, pc}
 8021cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021cf8:	4798      	blx	r3
 8021cfa:	3501      	adds	r5, #1
 8021cfc:	e7ee      	b.n	8021cdc <__libc_init_array+0xc>
 8021cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d02:	4798      	blx	r3
 8021d04:	3501      	adds	r5, #1
 8021d06:	e7f2      	b.n	8021cee <__libc_init_array+0x1e>
 8021d08:	08021d60 	.word	0x08021d60
 8021d0c:	08021d60 	.word	0x08021d60
 8021d10:	08021d60 	.word	0x08021d60
 8021d14:	08021d64 	.word	0x08021d64

08021d18 <memset>:
 8021d18:	4402      	add	r2, r0
 8021d1a:	4603      	mov	r3, r0
 8021d1c:	4293      	cmp	r3, r2
 8021d1e:	d100      	bne.n	8021d22 <memset+0xa>
 8021d20:	4770      	bx	lr
 8021d22:	f803 1b01 	strb.w	r1, [r3], #1
 8021d26:	e7f9      	b.n	8021d1c <memset+0x4>

08021d28 <_init>:
 8021d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d2a:	bf00      	nop
 8021d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d2e:	bc08      	pop	{r3}
 8021d30:	469e      	mov	lr, r3
 8021d32:	4770      	bx	lr

08021d34 <_fini>:
 8021d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d36:	bf00      	nop
 8021d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d3a:	bc08      	pop	{r3}
 8021d3c:	469e      	mov	lr, r3
 8021d3e:	4770      	bx	lr
