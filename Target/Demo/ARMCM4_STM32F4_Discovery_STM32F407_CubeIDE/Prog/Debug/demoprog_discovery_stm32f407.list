
demoprog_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb4  0800c18c  0800c18c  0000c18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800dd40  0800dd40  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd58  0800dd58  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd58  0800dd58  0000dd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd60  0800dd60  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd60  0800dd60  0000dd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd64  0800dd64  0000dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800dd68  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  0800dd74  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  0800dd74  0001016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3f9  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a99  00000000  00000000  0001a435  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  0001bed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  0001c648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e08  00000000  00000000  0001cd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ba0  00000000  00000000  0003db58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9056  00000000  00000000  000456f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001278  00000000  00000000  0010e7cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000035c8  00000000  00000000  0010fa44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800c18c <__do_global_dtors_aux>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	4c05      	ldr	r4, [pc, #20]	; (800c1a4 <__do_global_dtors_aux+0x18>)
 800c190:	7823      	ldrb	r3, [r4, #0]
 800c192:	b933      	cbnz	r3, 800c1a2 <__do_global_dtors_aux+0x16>
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <__do_global_dtors_aux+0x1c>)
 800c196:	b113      	cbz	r3, 800c19e <__do_global_dtors_aux+0x12>
 800c198:	4804      	ldr	r0, [pc, #16]	; (800c1ac <__do_global_dtors_aux+0x20>)
 800c19a:	f3af 8000 	nop.w
 800c19e:	2301      	movs	r3, #1
 800c1a0:	7023      	strb	r3, [r4, #0]
 800c1a2:	bd10      	pop	{r4, pc}
 800c1a4:	2000000c 	.word	0x2000000c
 800c1a8:	00000000 	.word	0x00000000
 800c1ac:	0800dd28 	.word	0x0800dd28

0800c1b0 <frame_dummy>:
 800c1b0:	b508      	push	{r3, lr}
 800c1b2:	4b03      	ldr	r3, [pc, #12]	; (800c1c0 <frame_dummy+0x10>)
 800c1b4:	b11b      	cbz	r3, 800c1be <frame_dummy+0xe>
 800c1b6:	4903      	ldr	r1, [pc, #12]	; (800c1c4 <frame_dummy+0x14>)
 800c1b8:	4803      	ldr	r0, [pc, #12]	; (800c1c8 <frame_dummy+0x18>)
 800c1ba:	f3af 8000 	nop.w
 800c1be:	bd08      	pop	{r3, pc}
 800c1c0:	00000000 	.word	0x00000000
 800c1c4:	20000010 	.word	0x20000010
 800c1c8:	0800dd28 	.word	0x0800dd28

0800c1cc <__aeabi_uldivmod>:
 800c1cc:	b953      	cbnz	r3, 800c1e4 <__aeabi_uldivmod+0x18>
 800c1ce:	b94a      	cbnz	r2, 800c1e4 <__aeabi_uldivmod+0x18>
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	bf08      	it	eq
 800c1d4:	2800      	cmpeq	r0, #0
 800c1d6:	bf1c      	itt	ne
 800c1d8:	f04f 31ff 	movne.w	r1, #4294967295
 800c1dc:	f04f 30ff 	movne.w	r0, #4294967295
 800c1e0:	f000 b972 	b.w	800c4c8 <__aeabi_idiv0>
 800c1e4:	f1ad 0c08 	sub.w	ip, sp, #8
 800c1e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c1ec:	f000 f806 	bl	800c1fc <__udivmoddi4>
 800c1f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1f8:	b004      	add	sp, #16
 800c1fa:	4770      	bx	lr

0800c1fc <__udivmoddi4>:
 800c1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c200:	9e08      	ldr	r6, [sp, #32]
 800c202:	4604      	mov	r4, r0
 800c204:	4688      	mov	r8, r1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d14b      	bne.n	800c2a2 <__udivmoddi4+0xa6>
 800c20a:	428a      	cmp	r2, r1
 800c20c:	4615      	mov	r5, r2
 800c20e:	d967      	bls.n	800c2e0 <__udivmoddi4+0xe4>
 800c210:	fab2 f282 	clz	r2, r2
 800c214:	b14a      	cbz	r2, 800c22a <__udivmoddi4+0x2e>
 800c216:	f1c2 0720 	rsb	r7, r2, #32
 800c21a:	fa01 f302 	lsl.w	r3, r1, r2
 800c21e:	fa20 f707 	lsr.w	r7, r0, r7
 800c222:	4095      	lsls	r5, r2
 800c224:	ea47 0803 	orr.w	r8, r7, r3
 800c228:	4094      	lsls	r4, r2
 800c22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c22e:	0c23      	lsrs	r3, r4, #16
 800c230:	fbb8 f7fe 	udiv	r7, r8, lr
 800c234:	fa1f fc85 	uxth.w	ip, r5
 800c238:	fb0e 8817 	mls	r8, lr, r7, r8
 800c23c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c240:	fb07 f10c 	mul.w	r1, r7, ip
 800c244:	4299      	cmp	r1, r3
 800c246:	d909      	bls.n	800c25c <__udivmoddi4+0x60>
 800c248:	18eb      	adds	r3, r5, r3
 800c24a:	f107 30ff 	add.w	r0, r7, #4294967295
 800c24e:	f080 811b 	bcs.w	800c488 <__udivmoddi4+0x28c>
 800c252:	4299      	cmp	r1, r3
 800c254:	f240 8118 	bls.w	800c488 <__udivmoddi4+0x28c>
 800c258:	3f02      	subs	r7, #2
 800c25a:	442b      	add	r3, r5
 800c25c:	1a5b      	subs	r3, r3, r1
 800c25e:	b2a4      	uxth	r4, r4
 800c260:	fbb3 f0fe 	udiv	r0, r3, lr
 800c264:	fb0e 3310 	mls	r3, lr, r0, r3
 800c268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c26c:	fb00 fc0c 	mul.w	ip, r0, ip
 800c270:	45a4      	cmp	ip, r4
 800c272:	d909      	bls.n	800c288 <__udivmoddi4+0x8c>
 800c274:	192c      	adds	r4, r5, r4
 800c276:	f100 33ff 	add.w	r3, r0, #4294967295
 800c27a:	f080 8107 	bcs.w	800c48c <__udivmoddi4+0x290>
 800c27e:	45a4      	cmp	ip, r4
 800c280:	f240 8104 	bls.w	800c48c <__udivmoddi4+0x290>
 800c284:	3802      	subs	r0, #2
 800c286:	442c      	add	r4, r5
 800c288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c28c:	eba4 040c 	sub.w	r4, r4, ip
 800c290:	2700      	movs	r7, #0
 800c292:	b11e      	cbz	r6, 800c29c <__udivmoddi4+0xa0>
 800c294:	40d4      	lsrs	r4, r2
 800c296:	2300      	movs	r3, #0
 800c298:	e9c6 4300 	strd	r4, r3, [r6]
 800c29c:	4639      	mov	r1, r7
 800c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a2:	428b      	cmp	r3, r1
 800c2a4:	d909      	bls.n	800c2ba <__udivmoddi4+0xbe>
 800c2a6:	2e00      	cmp	r6, #0
 800c2a8:	f000 80eb 	beq.w	800c482 <__udivmoddi4+0x286>
 800c2ac:	2700      	movs	r7, #0
 800c2ae:	e9c6 0100 	strd	r0, r1, [r6]
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ba:	fab3 f783 	clz	r7, r3
 800c2be:	2f00      	cmp	r7, #0
 800c2c0:	d147      	bne.n	800c352 <__udivmoddi4+0x156>
 800c2c2:	428b      	cmp	r3, r1
 800c2c4:	d302      	bcc.n	800c2cc <__udivmoddi4+0xd0>
 800c2c6:	4282      	cmp	r2, r0
 800c2c8:	f200 80fa 	bhi.w	800c4c0 <__udivmoddi4+0x2c4>
 800c2cc:	1a84      	subs	r4, r0, r2
 800c2ce:	eb61 0303 	sbc.w	r3, r1, r3
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	4698      	mov	r8, r3
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d0e0      	beq.n	800c29c <__udivmoddi4+0xa0>
 800c2da:	e9c6 4800 	strd	r4, r8, [r6]
 800c2de:	e7dd      	b.n	800c29c <__udivmoddi4+0xa0>
 800c2e0:	b902      	cbnz	r2, 800c2e4 <__udivmoddi4+0xe8>
 800c2e2:	deff      	udf	#255	; 0xff
 800c2e4:	fab2 f282 	clz	r2, r2
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	f040 808f 	bne.w	800c40c <__udivmoddi4+0x210>
 800c2ee:	1b49      	subs	r1, r1, r5
 800c2f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c2f4:	fa1f f885 	uxth.w	r8, r5
 800c2f8:	2701      	movs	r7, #1
 800c2fa:	fbb1 fcfe 	udiv	ip, r1, lr
 800c2fe:	0c23      	lsrs	r3, r4, #16
 800c300:	fb0e 111c 	mls	r1, lr, ip, r1
 800c304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c308:	fb08 f10c 	mul.w	r1, r8, ip
 800c30c:	4299      	cmp	r1, r3
 800c30e:	d907      	bls.n	800c320 <__udivmoddi4+0x124>
 800c310:	18eb      	adds	r3, r5, r3
 800c312:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c316:	d202      	bcs.n	800c31e <__udivmoddi4+0x122>
 800c318:	4299      	cmp	r1, r3
 800c31a:	f200 80cd 	bhi.w	800c4b8 <__udivmoddi4+0x2bc>
 800c31e:	4684      	mov	ip, r0
 800c320:	1a59      	subs	r1, r3, r1
 800c322:	b2a3      	uxth	r3, r4
 800c324:	fbb1 f0fe 	udiv	r0, r1, lr
 800c328:	fb0e 1410 	mls	r4, lr, r0, r1
 800c32c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c330:	fb08 f800 	mul.w	r8, r8, r0
 800c334:	45a0      	cmp	r8, r4
 800c336:	d907      	bls.n	800c348 <__udivmoddi4+0x14c>
 800c338:	192c      	adds	r4, r5, r4
 800c33a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c33e:	d202      	bcs.n	800c346 <__udivmoddi4+0x14a>
 800c340:	45a0      	cmp	r8, r4
 800c342:	f200 80b6 	bhi.w	800c4b2 <__udivmoddi4+0x2b6>
 800c346:	4618      	mov	r0, r3
 800c348:	eba4 0408 	sub.w	r4, r4, r8
 800c34c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c350:	e79f      	b.n	800c292 <__udivmoddi4+0x96>
 800c352:	f1c7 0c20 	rsb	ip, r7, #32
 800c356:	40bb      	lsls	r3, r7
 800c358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800c35c:	ea4e 0e03 	orr.w	lr, lr, r3
 800c360:	fa01 f407 	lsl.w	r4, r1, r7
 800c364:	fa20 f50c 	lsr.w	r5, r0, ip
 800c368:	fa21 f30c 	lsr.w	r3, r1, ip
 800c36c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800c370:	4325      	orrs	r5, r4
 800c372:	fbb3 f9f8 	udiv	r9, r3, r8
 800c376:	0c2c      	lsrs	r4, r5, #16
 800c378:	fb08 3319 	mls	r3, r8, r9, r3
 800c37c:	fa1f fa8e 	uxth.w	sl, lr
 800c380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800c384:	fb09 f40a 	mul.w	r4, r9, sl
 800c388:	429c      	cmp	r4, r3
 800c38a:	fa02 f207 	lsl.w	r2, r2, r7
 800c38e:	fa00 f107 	lsl.w	r1, r0, r7
 800c392:	d90b      	bls.n	800c3ac <__udivmoddi4+0x1b0>
 800c394:	eb1e 0303 	adds.w	r3, lr, r3
 800c398:	f109 30ff 	add.w	r0, r9, #4294967295
 800c39c:	f080 8087 	bcs.w	800c4ae <__udivmoddi4+0x2b2>
 800c3a0:	429c      	cmp	r4, r3
 800c3a2:	f240 8084 	bls.w	800c4ae <__udivmoddi4+0x2b2>
 800c3a6:	f1a9 0902 	sub.w	r9, r9, #2
 800c3aa:	4473      	add	r3, lr
 800c3ac:	1b1b      	subs	r3, r3, r4
 800c3ae:	b2ad      	uxth	r5, r5
 800c3b0:	fbb3 f0f8 	udiv	r0, r3, r8
 800c3b4:	fb08 3310 	mls	r3, r8, r0, r3
 800c3b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800c3bc:	fb00 fa0a 	mul.w	sl, r0, sl
 800c3c0:	45a2      	cmp	sl, r4
 800c3c2:	d908      	bls.n	800c3d6 <__udivmoddi4+0x1da>
 800c3c4:	eb1e 0404 	adds.w	r4, lr, r4
 800c3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3cc:	d26b      	bcs.n	800c4a6 <__udivmoddi4+0x2aa>
 800c3ce:	45a2      	cmp	sl, r4
 800c3d0:	d969      	bls.n	800c4a6 <__udivmoddi4+0x2aa>
 800c3d2:	3802      	subs	r0, #2
 800c3d4:	4474      	add	r4, lr
 800c3d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c3da:	fba0 8902 	umull	r8, r9, r0, r2
 800c3de:	eba4 040a 	sub.w	r4, r4, sl
 800c3e2:	454c      	cmp	r4, r9
 800c3e4:	46c2      	mov	sl, r8
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	d354      	bcc.n	800c494 <__udivmoddi4+0x298>
 800c3ea:	d051      	beq.n	800c490 <__udivmoddi4+0x294>
 800c3ec:	2e00      	cmp	r6, #0
 800c3ee:	d069      	beq.n	800c4c4 <__udivmoddi4+0x2c8>
 800c3f0:	ebb1 050a 	subs.w	r5, r1, sl
 800c3f4:	eb64 0403 	sbc.w	r4, r4, r3
 800c3f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 800c3fc:	40fd      	lsrs	r5, r7
 800c3fe:	40fc      	lsrs	r4, r7
 800c400:	ea4c 0505 	orr.w	r5, ip, r5
 800c404:	e9c6 5400 	strd	r5, r4, [r6]
 800c408:	2700      	movs	r7, #0
 800c40a:	e747      	b.n	800c29c <__udivmoddi4+0xa0>
 800c40c:	f1c2 0320 	rsb	r3, r2, #32
 800c410:	fa20 f703 	lsr.w	r7, r0, r3
 800c414:	4095      	lsls	r5, r2
 800c416:	fa01 f002 	lsl.w	r0, r1, r2
 800c41a:	fa21 f303 	lsr.w	r3, r1, r3
 800c41e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800c422:	4338      	orrs	r0, r7
 800c424:	0c01      	lsrs	r1, r0, #16
 800c426:	fbb3 f7fe 	udiv	r7, r3, lr
 800c42a:	fa1f f885 	uxth.w	r8, r5
 800c42e:	fb0e 3317 	mls	r3, lr, r7, r3
 800c432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c436:	fb07 f308 	mul.w	r3, r7, r8
 800c43a:	428b      	cmp	r3, r1
 800c43c:	fa04 f402 	lsl.w	r4, r4, r2
 800c440:	d907      	bls.n	800c452 <__udivmoddi4+0x256>
 800c442:	1869      	adds	r1, r5, r1
 800c444:	f107 3cff 	add.w	ip, r7, #4294967295
 800c448:	d22f      	bcs.n	800c4aa <__udivmoddi4+0x2ae>
 800c44a:	428b      	cmp	r3, r1
 800c44c:	d92d      	bls.n	800c4aa <__udivmoddi4+0x2ae>
 800c44e:	3f02      	subs	r7, #2
 800c450:	4429      	add	r1, r5
 800c452:	1acb      	subs	r3, r1, r3
 800c454:	b281      	uxth	r1, r0
 800c456:	fbb3 f0fe 	udiv	r0, r3, lr
 800c45a:	fb0e 3310 	mls	r3, lr, r0, r3
 800c45e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c462:	fb00 f308 	mul.w	r3, r0, r8
 800c466:	428b      	cmp	r3, r1
 800c468:	d907      	bls.n	800c47a <__udivmoddi4+0x27e>
 800c46a:	1869      	adds	r1, r5, r1
 800c46c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c470:	d217      	bcs.n	800c4a2 <__udivmoddi4+0x2a6>
 800c472:	428b      	cmp	r3, r1
 800c474:	d915      	bls.n	800c4a2 <__udivmoddi4+0x2a6>
 800c476:	3802      	subs	r0, #2
 800c478:	4429      	add	r1, r5
 800c47a:	1ac9      	subs	r1, r1, r3
 800c47c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800c480:	e73b      	b.n	800c2fa <__udivmoddi4+0xfe>
 800c482:	4637      	mov	r7, r6
 800c484:	4630      	mov	r0, r6
 800c486:	e709      	b.n	800c29c <__udivmoddi4+0xa0>
 800c488:	4607      	mov	r7, r0
 800c48a:	e6e7      	b.n	800c25c <__udivmoddi4+0x60>
 800c48c:	4618      	mov	r0, r3
 800c48e:	e6fb      	b.n	800c288 <__udivmoddi4+0x8c>
 800c490:	4541      	cmp	r1, r8
 800c492:	d2ab      	bcs.n	800c3ec <__udivmoddi4+0x1f0>
 800c494:	ebb8 0a02 	subs.w	sl, r8, r2
 800c498:	eb69 020e 	sbc.w	r2, r9, lr
 800c49c:	3801      	subs	r0, #1
 800c49e:	4613      	mov	r3, r2
 800c4a0:	e7a4      	b.n	800c3ec <__udivmoddi4+0x1f0>
 800c4a2:	4660      	mov	r0, ip
 800c4a4:	e7e9      	b.n	800c47a <__udivmoddi4+0x27e>
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	e795      	b.n	800c3d6 <__udivmoddi4+0x1da>
 800c4aa:	4667      	mov	r7, ip
 800c4ac:	e7d1      	b.n	800c452 <__udivmoddi4+0x256>
 800c4ae:	4681      	mov	r9, r0
 800c4b0:	e77c      	b.n	800c3ac <__udivmoddi4+0x1b0>
 800c4b2:	3802      	subs	r0, #2
 800c4b4:	442c      	add	r4, r5
 800c4b6:	e747      	b.n	800c348 <__udivmoddi4+0x14c>
 800c4b8:	f1ac 0c02 	sub.w	ip, ip, #2
 800c4bc:	442b      	add	r3, r5
 800c4be:	e72f      	b.n	800c320 <__udivmoddi4+0x124>
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	e708      	b.n	800c2d6 <__udivmoddi4+0xda>
 800c4c4:	4637      	mov	r7, r6
 800c4c6:	e6e9      	b.n	800c29c <__udivmoddi4+0xa0>

0800c4c8 <__aeabi_idiv0>:
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop

0800c4cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 800c4cc:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 800c4ce:	f000 f8ed 	bl	800c6ac <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 800c4d2:	f000 f893 	bl	800c5fc <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 800c4d6:	f000 f82b 	bl	800c530 <BootComInit>
} /*** end of AppInit ***/
 800c4da:	bd08      	pop	{r3, pc}

0800c4dc <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 800c4dc:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 800c4de:	f000 f8ad 	bl	800c63c <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 800c4e2:	f000 f887 	bl	800c5f4 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 800c4e6:	bd08      	pop	{r3, pc}

0800c4e8 <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 800c4e8:	b508      	push	{r3, lr}
  /* Configure UART peripheral. */
  rs232Handle.Instance = USART6;
 800c4ea:	4808      	ldr	r0, [pc, #32]	; (800c50c <BootComRs232Init+0x24>)
 800c4ec:	4b08      	ldr	r3, [pc, #32]	; (800c510 <BootComRs232Init+0x28>)
 800c4ee:	6003      	str	r3, [r0, #0]
  rs232Handle.Init.BaudRate = BOOT_COM_RS232_BAUDRATE;
 800c4f0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800c4f4:	6043      	str	r3, [r0, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	6083      	str	r3, [r0, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 800c4fa:	60c3      	str	r3, [r0, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 800c4fc:	6103      	str	r3, [r0, #16]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c4fe:	6183      	str	r3, [r0, #24]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 800c500:	220c      	movs	r2, #12
 800c502:	6142      	str	r2, [r0, #20]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800c504:	61c3      	str	r3, [r0, #28]
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 800c506:	f001 fb40 	bl	800db8a <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 800c50a:	bd08      	pop	{r3, pc}
 800c50c:	20000028 	.word	0x20000028
 800c510:	40011400 	.word	0x40011400

0800c514 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    1 if a byte was received, 0 otherwise.
**
****************************************************************************************/
static unsigned char Rs232ReceiveByte(unsigned char *data)
{
 800c514:	b508      	push	{r3, lr}
  HAL_StatusTypeDef result;

  /* receive a byte in a non-blocking manner */
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 800c516:	2300      	movs	r3, #0
 800c518:	2201      	movs	r2, #1
 800c51a:	4601      	mov	r1, r0
 800c51c:	4803      	ldr	r0, [pc, #12]	; (800c52c <Rs232ReceiveByte+0x18>)
 800c51e:	f001 fb63 	bl	800dbe8 <HAL_UART_Receive>
  /* process the result */
  if (result == HAL_OK)
 800c522:	b108      	cbz	r0, 800c528 <Rs232ReceiveByte+0x14>
  {
    /* success */
    return 1;
  }
  /* error occurred */
  return 0;
 800c524:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 800c526:	bd08      	pop	{r3, pc}
    return 1;
 800c528:	2001      	movs	r0, #1
 800c52a:	e7fc      	b.n	800c526 <Rs232ReceiveByte+0x12>
 800c52c:	20000028 	.word	0x20000028

0800c530 <BootComInit>:
{
 800c530:	b508      	push	{r3, lr}
  BootComRs232Init();
 800c532:	f7ff ffd9 	bl	800c4e8 <BootComRs232Init>
} /*** end of BootComInit ***/
 800c536:	bd08      	pop	{r3, pc}

0800c538 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c538:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c53c:	4905      	ldr	r1, [pc, #20]	; (800c554 <BootActivate+0x1c>)
 800c53e:	68ca      	ldr	r2, [r1, #12]
 800c540:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <BootActivate+0x20>)
 800c546:	4313      	orrs	r3, r2
 800c548:	60cb      	str	r3, [r1, #12]
 800c54a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c54e:	bf00      	nop
 800c550:	e7fd      	b.n	800c54e <BootActivate+0x16>
 800c552:	bf00      	nop
 800c554:	e000ed00 	.word	0xe000ed00
 800c558:	05fa0004 	.word	0x05fa0004

0800c55c <BootComRs232CheckActivationRequest>:
{
 800c55c:	b508      	push	{r3, lr}
  if (xcpCtoRxInProgress == 0)
 800c55e:	4b21      	ldr	r3, [pc, #132]	; (800c5e4 <BootComRs232CheckActivationRequest+0x88>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	b9b3      	cbnz	r3, 800c592 <BootComRs232CheckActivationRequest+0x36>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 800c564:	4820      	ldr	r0, [pc, #128]	; (800c5e8 <BootComRs232CheckActivationRequest+0x8c>)
 800c566:	f7ff ffd5 	bl	800c514 <Rs232ReceiveByte>
 800c56a:	2801      	cmp	r0, #1
 800c56c:	d000      	beq.n	800c570 <BootComRs232CheckActivationRequest+0x14>
} /*** end of BootComRs232CheckActivationRequest ***/
 800c56e:	bd08      	pop	{r3, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 800c570:	4b1d      	ldr	r3, [pc, #116]	; (800c5e8 <BootComRs232CheckActivationRequest+0x8c>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	3b01      	subs	r3, #1
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b3f      	cmp	r3, #63	; 0x3f
 800c57a:	d8f8      	bhi.n	800c56e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxStartTime = TimerGet();
 800c57c:	f000 f897 	bl	800c6ae <TimerGet>
 800c580:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <BootComRs232CheckActivationRequest+0x90>)
 800c582:	6018      	str	r0, [r3, #0]
        xcpCtoRxInProgress = 1;
 800c584:	4b17      	ldr	r3, [pc, #92]	; (800c5e4 <BootComRs232CheckActivationRequest+0x88>)
 800c586:	2201      	movs	r2, #1
 800c588:	701a      	strb	r2, [r3, #0]
        xcpCtoRxLength = 0;
 800c58a:	4b19      	ldr	r3, [pc, #100]	; (800c5f0 <BootComRs232CheckActivationRequest+0x94>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	e7ed      	b.n	800c56e <BootComRs232CheckActivationRequest+0x12>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 800c592:	4b17      	ldr	r3, [pc, #92]	; (800c5f0 <BootComRs232CheckActivationRequest+0x94>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	3301      	adds	r3, #1
 800c598:	4813      	ldr	r0, [pc, #76]	; (800c5e8 <BootComRs232CheckActivationRequest+0x8c>)
 800c59a:	4418      	add	r0, r3
 800c59c:	f7ff ffba 	bl	800c514 <Rs232ReceiveByte>
 800c5a0:	2801      	cmp	r0, #1
 800c5a2:	d113      	bne.n	800c5cc <BootComRs232CheckActivationRequest+0x70>
      xcpCtoRxLength++;
 800c5a4:	4a12      	ldr	r2, [pc, #72]	; (800c5f0 <BootComRs232CheckActivationRequest+0x94>)
 800c5a6:	7813      	ldrb	r3, [r2, #0]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	7013      	strb	r3, [r2, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 800c5ae:	4a0e      	ldr	r2, [pc, #56]	; (800c5e8 <BootComRs232CheckActivationRequest+0x8c>)
 800c5b0:	7812      	ldrb	r2, [r2, #0]
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d1db      	bne.n	800c56e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 800c5b6:	4a0b      	ldr	r2, [pc, #44]	; (800c5e4 <BootComRs232CheckActivationRequest+0x88>)
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	7011      	strb	r1, [r2, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 800c5bc:	4a0a      	ldr	r2, [pc, #40]	; (800c5e8 <BootComRs232CheckActivationRequest+0x8c>)
 800c5be:	7852      	ldrb	r2, [r2, #1]
 800c5c0:	2aff      	cmp	r2, #255	; 0xff
 800c5c2:	d1d4      	bne.n	800c56e <BootComRs232CheckActivationRequest+0x12>
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d1d2      	bne.n	800c56e <BootComRs232CheckActivationRequest+0x12>
          BootActivate();
 800c5c8:	f7ff ffb6 	bl	800c538 <BootActivate>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 800c5cc:	f000 f86f 	bl	800c6ae <TimerGet>
 800c5d0:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <BootComRs232CheckActivationRequest+0x90>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3364      	adds	r3, #100	; 0x64
 800c5d6:	4298      	cmp	r0, r3
 800c5d8:	d9c9      	bls.n	800c56e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 800c5da:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <BootComRs232CheckActivationRequest+0x88>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 800c5e0:	e7c5      	b.n	800c56e <BootComRs232CheckActivationRequest+0x12>
 800c5e2:	bf00      	nop
 800c5e4:	200000a9 	.word	0x200000a9
 800c5e8:	20000068 	.word	0x20000068
 800c5ec:	200000ac 	.word	0x200000ac
 800c5f0:	200000aa 	.word	0x200000aa

0800c5f4 <BootComCheckActivationRequest>:
{
 800c5f4:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 800c5f6:	f7ff ffb1 	bl	800c55c <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 800c5fa:	bd08      	pop	{r3, pc}

0800c5fc <LedInit>:
** \brief     Initializes the LED.
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 800c5fc:	b510      	push	{r4, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800c5fe:	2201      	movs	r2, #1
 800c600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c604:	480b      	ldr	r0, [pc, #44]	; (800c634 <LedInit+0x38>)
 800c606:	f000 fe45 	bl	800d294 <HAL_GPIO_WritePin>

  //SET_LED3_ORANGE(GPIO_PIN_SET);
  SET_LED4_GREEN(GPIO_PIN_SET);
 800c60a:	4c0b      	ldr	r4, [pc, #44]	; (800c638 <LedInit+0x3c>)
 800c60c:	2201      	movs	r2, #1
 800c60e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c612:	4620      	mov	r0, r4
 800c614:	f000 fe3e 	bl	800d294 <HAL_GPIO_WritePin>
  SET_LED5_RED(GPIO_PIN_SET);
 800c618:	2201      	movs	r2, #1
 800c61a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 fe38 	bl	800d294 <HAL_GPIO_WritePin>
  SET_LED6_BLUE(GPIO_PIN_SET);
 800c624:	2201      	movs	r2, #1
 800c626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 fe32 	bl	800d294 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 800c630:	bd10      	pop	{r4, pc}
 800c632:	bf00      	nop
 800c634:	40020800 	.word	0x40020800
 800c638:	40020c00 	.word	0x40020c00

0800c63c <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 800c63c:	b570      	push	{r4, r5, r6, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 800c63e:	f000 f836 	bl	800c6ae <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 800c642:	4b17      	ldr	r3, [pc, #92]	; (800c6a0 <LedToggle+0x64>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	1ac3      	subs	r3, r0, r3
 800c648:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c64c:	d315      	bcc.n	800c67a <LedToggle+0x3e>
 800c64e:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 800c650:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <LedToggle+0x68>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	b993      	cbnz	r3, 800c67c <LedToggle+0x40>
  {
    led_toggle_state = 1;
 800c656:	2501      	movs	r5, #1
 800c658:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <LedToggle+0x68>)
 800c65a:	701d      	strb	r5, [r3, #0]
    /* turn the LED on */
    //SET_LED3_ORANGE(GPIO_PIN_RESET);
    SET_LED4_GREEN(GPIO_PIN_SET);
 800c65c:	4e12      	ldr	r6, [pc, #72]	; (800c6a8 <LedToggle+0x6c>)
 800c65e:	462a      	mov	r2, r5
 800c660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c664:	4630      	mov	r0, r6
 800c666:	f000 fe15 	bl	800d294 <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_RESET);
    SET_LED6_BLUE(GPIO_PIN_SET);
 800c66a:	462a      	mov	r2, r5
 800c66c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c670:	4630      	mov	r0, r6
 800c672:	f000 fe0f 	bl	800d294 <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_SET);
    SET_LED6_BLUE(GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 800c676:	4b0a      	ldr	r3, [pc, #40]	; (800c6a0 <LedToggle+0x64>)
 800c678:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
    led_toggle_state = 0;
 800c67c:	2500      	movs	r5, #0
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <LedToggle+0x68>)
 800c680:	701d      	strb	r5, [r3, #0]
    SET_LED4_GREEN(GPIO_PIN_RESET);
 800c682:	4e09      	ldr	r6, [pc, #36]	; (800c6a8 <LedToggle+0x6c>)
 800c684:	462a      	mov	r2, r5
 800c686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c68a:	4630      	mov	r0, r6
 800c68c:	f000 fe02 	bl	800d294 <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_RESET);
 800c690:	462a      	mov	r2, r5
 800c692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c696:	4630      	mov	r0, r6
 800c698:	f000 fdfc 	bl	800d294 <HAL_GPIO_WritePin>
 800c69c:	e7eb      	b.n	800c676 <LedToggle+0x3a>
 800c69e:	bf00      	nop
 800c6a0:	200000b4 	.word	0x200000b4
 800c6a4:	200000b0 	.word	0x200000b0
 800c6a8:	40020c00 	.word	0x40020c00

0800c6ac <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 800c6ac:	4770      	bx	lr

0800c6ae <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 800c6ae:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 800c6b0:	f000 fa50 	bl	800cb54 <HAL_GetTick>
} /*** end of TimerGet ***/
 800c6b4:	bd08      	pop	{r3, pc}
	...

0800c6b8 <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 800c6b8:	4a01      	ldr	r2, [pc, #4]	; (800c6c0 <VectorBase_Config+0x8>)
 800c6ba:	4b02      	ldr	r3, [pc, #8]	; (800c6c4 <VectorBase_Config+0xc>)
 800c6bc:	609a      	str	r2, [r3, #8]
}
 800c6be:	4770      	bx	lr
 800c6c0:	0800c000 	.word	0x0800c000
 800c6c4:	e000ed00 	.word	0xe000ed00

0800c6c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6cc:	2400      	movs	r4, #0
 800c6ce:	9405      	str	r4, [sp, #20]
 800c6d0:	9406      	str	r4, [sp, #24]
 800c6d2:	9407      	str	r4, [sp, #28]
 800c6d4:	9408      	str	r4, [sp, #32]
 800c6d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6d8:	9400      	str	r4, [sp, #0]
 800c6da:	4b2b      	ldr	r3, [pc, #172]	; (800c788 <MX_GPIO_Init+0xc0>)
 800c6dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6de:	f042 0204 	orr.w	r2, r2, #4
 800c6e2:	631a      	str	r2, [r3, #48]	; 0x30
 800c6e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6e6:	f002 0204 	and.w	r2, r2, #4
 800c6ea:	9200      	str	r2, [sp, #0]
 800c6ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c6ee:	9401      	str	r4, [sp, #4]
 800c6f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6f6:	631a      	str	r2, [r3, #48]	; 0x30
 800c6f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c6fe:	9201      	str	r2, [sp, #4]
 800c700:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c702:	9402      	str	r4, [sp, #8]
 800c704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c706:	f042 0201 	orr.w	r2, r2, #1
 800c70a:	631a      	str	r2, [r3, #48]	; 0x30
 800c70c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c70e:	f002 0201 	and.w	r2, r2, #1
 800c712:	9202      	str	r2, [sp, #8]
 800c714:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c716:	9403      	str	r4, [sp, #12]
 800c718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c71a:	f042 0202 	orr.w	r2, r2, #2
 800c71e:	631a      	str	r2, [r3, #48]	; 0x30
 800c720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c722:	f002 0202 	and.w	r2, r2, #2
 800c726:	9203      	str	r2, [sp, #12]
 800c728:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c72a:	9404      	str	r4, [sp, #16]
 800c72c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c72e:	f042 0208 	orr.w	r2, r2, #8
 800c732:	631a      	str	r2, [r3, #48]	; 0x30
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	f003 0308 	and.w	r3, r3, #8
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800c73e:	4f13      	ldr	r7, [pc, #76]	; (800c78c <MX_GPIO_Init+0xc4>)
 800c740:	4622      	mov	r2, r4
 800c742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c746:	4638      	mov	r0, r7
 800c748:	f000 fda4 	bl	800d294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800c74c:	4d10      	ldr	r5, [pc, #64]	; (800c790 <MX_GPIO_Init+0xc8>)
 800c74e:	4622      	mov	r2, r4
 800c750:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800c754:	4628      	mov	r0, r5
 800c756:	f000 fd9d 	bl	800d294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c75a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c75e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c760:	2601      	movs	r6, #1
 800c762:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c764:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c766:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c768:	a905      	add	r1, sp, #20
 800c76a:	4638      	mov	r0, r7
 800c76c:	f000 fcae 	bl	800d0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c770:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c774:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c776:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c778:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c77a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c77c:	a905      	add	r1, sp, #20
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 fca4 	bl	800d0cc <HAL_GPIO_Init>

}
 800c784:	b00b      	add	sp, #44	; 0x2c
 800c786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c788:	40023800 	.word	0x40023800
 800c78c:	40020800 	.word	0x40020800
 800c790:	40020c00 	.word	0x40020c00

0800c794 <MX_ETH_Init>:
{
 800c794:	b510      	push	{r4, lr}
  heth.Instance = ETH;
 800c796:	4812      	ldr	r0, [pc, #72]	; (800c7e0 <MX_ETH_Init+0x4c>)
 800c798:	4b12      	ldr	r3, [pc, #72]	; (800c7e4 <MX_ETH_Init+0x50>)
 800c79a:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800c79c:	2201      	movs	r2, #1
 800c79e:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800c7a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7a4:	6083      	str	r3, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c7a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7aa:	60c3      	str	r3, [r0, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800c7ac:	8202      	strh	r2, [r0, #16]
  heth.Init.MACAddr[0] =   0x00;
 800c7ae:	6941      	ldr	r1, [r0, #20]
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	700b      	strb	r3, [r1, #0]
  heth.Init.MACAddr[1] =   0x80;
 800c7b4:	6941      	ldr	r1, [r0, #20]
 800c7b6:	2480      	movs	r4, #128	; 0x80
 800c7b8:	704c      	strb	r4, [r1, #1]
  heth.Init.MACAddr[2] =   0xE1;
 800c7ba:	6941      	ldr	r1, [r0, #20]
 800c7bc:	24e1      	movs	r4, #225	; 0xe1
 800c7be:	708c      	strb	r4, [r1, #2]
  heth.Init.MACAddr[3] =   0x01;
 800c7c0:	6941      	ldr	r1, [r0, #20]
 800c7c2:	70ca      	strb	r2, [r1, #3]
  heth.Init.MACAddr[4] =   0x02;
 800c7c4:	6942      	ldr	r2, [r0, #20]
 800c7c6:	2102      	movs	r1, #2
 800c7c8:	7111      	strb	r1, [r2, #4]
  heth.Init.MACAddr[5] =   0x03;
 800c7ca:	6942      	ldr	r2, [r0, #20]
 800c7cc:	2103      	movs	r1, #3
 800c7ce:	7151      	strb	r1, [r2, #5]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800c7d0:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c7d2:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c7d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c7d8:	6203      	str	r3, [r0, #32]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 800c7da:	f000 fb4b 	bl	800ce74 <HAL_ETH_Init>
}
 800c7de:	bd10      	pop	{r4, pc}
 800c7e0:	20000120 	.word	0x20000120
 800c7e4:	40028000 	.word	0x40028000

0800c7e8 <SystemClock_Config>:
{
 800c7e8:	b530      	push	{r4, r5, lr}
 800c7ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c7ec:	2230      	movs	r2, #48	; 0x30
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	a808      	add	r0, sp, #32
 800c7f2:	f001 fa91 	bl	800dd18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c7f6:	2400      	movs	r4, #0
 800c7f8:	9403      	str	r4, [sp, #12]
 800c7fa:	9404      	str	r4, [sp, #16]
 800c7fc:	9405      	str	r4, [sp, #20]
 800c7fe:	9406      	str	r4, [sp, #24]
 800c800:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c802:	9401      	str	r4, [sp, #4]
 800c804:	4b1b      	ldr	r3, [pc, #108]	; (800c874 <SystemClock_Config+0x8c>)
 800c806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c80c:	641a      	str	r2, [r3, #64]	; 0x40
 800c80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c818:	9402      	str	r4, [sp, #8]
 800c81a:	4b17      	ldr	r3, [pc, #92]	; (800c878 <SystemClock_Config+0x90>)
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c82a:	9302      	str	r3, [sp, #8]
 800c82c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c82e:	2301      	movs	r3, #1
 800c830:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c836:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c838:	2502      	movs	r5, #2
 800c83a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c83c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c840:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c842:	2304      	movs	r3, #4
 800c844:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c846:	22a8      	movs	r2, #168	; 0xa8
 800c848:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c84a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c84c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c84e:	a808      	add	r0, sp, #32
 800c850:	f000 fd26 	bl	800d2a0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c854:	230f      	movs	r3, #15
 800c856:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c858:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c85a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c85c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c860:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c866:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c868:	2105      	movs	r1, #5
 800c86a:	a803      	add	r0, sp, #12
 800c86c:	f000 ff7a 	bl	800d764 <HAL_RCC_ClockConfig>
}
 800c870:	b015      	add	sp, #84	; 0x54
 800c872:	bd30      	pop	{r4, r5, pc}
 800c874:	40023800 	.word	0x40023800
 800c878:	40007000 	.word	0x40007000

0800c87c <main>:
{
 800c87c:	b508      	push	{r3, lr}
  VectorBase_Config();
 800c87e:	f7ff ff1b 	bl	800c6b8 <VectorBase_Config>
  HAL_Init();
 800c882:	f000 f941 	bl	800cb08 <HAL_Init>
  SystemClock_Config();
 800c886:	f7ff ffaf 	bl	800c7e8 <SystemClock_Config>
  MX_GPIO_Init();
 800c88a:	f7ff ff1d 	bl	800c6c8 <MX_GPIO_Init>
  MX_ETH_Init();
 800c88e:	f7ff ff81 	bl	800c794 <MX_ETH_Init>
  AppInit();
 800c892:	f7ff fe1b 	bl	800c4cc <AppInit>
    AppTask();
 800c896:	f7ff fe21 	bl	800c4dc <AppTask>
 800c89a:	e7fc      	b.n	800c896 <main+0x1a>

0800c89c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c89c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c89e:	2100      	movs	r1, #0
 800c8a0:	9100      	str	r1, [sp, #0]
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <HAL_MspInit+0x34>)
 800c8a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8aa:	645a      	str	r2, [r3, #68]	; 0x44
 800c8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c8b2:	9200      	str	r2, [sp, #0]
 800c8b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c8b6:	9101      	str	r1, [sp, #4]
 800c8b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c8be:	641a      	str	r2, [r3, #64]	; 0x40
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c8ca:	b002      	add	sp, #8
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	40023800 	.word	0x40023800

0800c8d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800c8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8d6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9307      	str	r3, [sp, #28]
 800c8dc:	9308      	str	r3, [sp, #32]
 800c8de:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(heth->Instance==ETH)
 800c8e4:	6802      	ldr	r2, [r0, #0]
 800c8e6:	4b33      	ldr	r3, [pc, #204]	; (800c9b4 <HAL_ETH_MspInit+0xe0>)
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d001      	beq.n	800c8f0 <HAL_ETH_MspInit+0x1c>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800c8ec:	b00d      	add	sp, #52	; 0x34
 800c8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800c8f0:	2400      	movs	r4, #0
 800c8f2:	9401      	str	r4, [sp, #4]
 800c8f4:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800c8f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c8fe:	631a      	str	r2, [r3, #48]	; 0x30
 800c900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c902:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800c906:	9201      	str	r2, [sp, #4]
 800c908:	9a01      	ldr	r2, [sp, #4]
 800c90a:	9402      	str	r4, [sp, #8]
 800c90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c90e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c912:	631a      	str	r2, [r3, #48]	; 0x30
 800c914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c916:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800c91a:	9202      	str	r2, [sp, #8]
 800c91c:	9a02      	ldr	r2, [sp, #8]
 800c91e:	9403      	str	r4, [sp, #12]
 800c920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c922:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c926:	631a      	str	r2, [r3, #48]	; 0x30
 800c928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c92a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800c92e:	9203      	str	r2, [sp, #12]
 800c930:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c932:	9404      	str	r4, [sp, #16]
 800c934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c936:	f042 0204 	orr.w	r2, r2, #4
 800c93a:	631a      	str	r2, [r3, #48]	; 0x30
 800c93c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c93e:	f002 0204 	and.w	r2, r2, #4
 800c942:	9204      	str	r2, [sp, #16]
 800c944:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c946:	9405      	str	r4, [sp, #20]
 800c948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c94a:	f042 0201 	orr.w	r2, r2, #1
 800c94e:	631a      	str	r2, [r3, #48]	; 0x30
 800c950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c952:	f002 0201 	and.w	r2, r2, #1
 800c956:	9205      	str	r2, [sp, #20]
 800c958:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c95a:	9406      	str	r4, [sp, #24]
 800c95c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c95e:	f042 0202 	orr.w	r2, r2, #2
 800c962:	631a      	str	r2, [r3, #48]	; 0x30
 800c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c966:	f003 0302 	and.w	r3, r3, #2
 800c96a:	9306      	str	r3, [sp, #24]
 800c96c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c96e:	2332      	movs	r3, #50	; 0x32
 800c970:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c972:	2702      	movs	r7, #2
 800c974:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c976:	2603      	movs	r6, #3
 800c978:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c97a:	250b      	movs	r5, #11
 800c97c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c97e:	a907      	add	r1, sp, #28
 800c980:	480d      	ldr	r0, [pc, #52]	; (800c9b8 <HAL_ETH_MspInit+0xe4>)
 800c982:	f000 fba3 	bl	800d0cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c986:	2386      	movs	r3, #134	; 0x86
 800c988:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c98a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c98c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c98e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c990:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c992:	a907      	add	r1, sp, #28
 800c994:	4809      	ldr	r0, [pc, #36]	; (800c9bc <HAL_ETH_MspInit+0xe8>)
 800c996:	f000 fb99 	bl	800d0cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800c99a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c99e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9a0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9a2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9a4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c9a6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9a8:	a907      	add	r1, sp, #28
 800c9aa:	4805      	ldr	r0, [pc, #20]	; (800c9c0 <HAL_ETH_MspInit+0xec>)
 800c9ac:	f000 fb8e 	bl	800d0cc <HAL_GPIO_Init>
}
 800c9b0:	e79c      	b.n	800c8ec <HAL_ETH_MspInit+0x18>
 800c9b2:	bf00      	nop
 800c9b4:	40028000 	.word	0x40028000
 800c9b8:	40020800 	.word	0x40020800
 800c9bc:	40020000 	.word	0x40020000
 800c9c0:	40020400 	.word	0x40020400

0800c9c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c9c4:	b500      	push	{lr}
 800c9c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9303      	str	r3, [sp, #12]
 800c9cc:	9304      	str	r3, [sp, #16]
 800c9ce:	9305      	str	r3, [sp, #20]
 800c9d0:	9306      	str	r3, [sp, #24]
 800c9d2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART6)
 800c9d4:	6802      	ldr	r2, [r0, #0]
 800c9d6:	4b15      	ldr	r3, [pc, #84]	; (800ca2c <HAL_UART_MspInit+0x68>)
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d002      	beq.n	800c9e2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800c9dc:	b009      	add	sp, #36	; 0x24
 800c9de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART6_CLK_ENABLE();
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	9101      	str	r1, [sp, #4]
 800c9e6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800c9ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9ec:	f042 0220 	orr.w	r2, r2, #32
 800c9f0:	645a      	str	r2, [r3, #68]	; 0x44
 800c9f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9f4:	f002 0220 	and.w	r2, r2, #32
 800c9f8:	9201      	str	r2, [sp, #4]
 800c9fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c9fc:	9102      	str	r1, [sp, #8]
 800c9fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca00:	f042 0204 	orr.w	r2, r2, #4
 800ca04:	631a      	str	r2, [r3, #48]	; 0x30
 800ca06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca08:	f003 0304 	and.w	r3, r3, #4
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ca10:	23c0      	movs	r3, #192	; 0xc0
 800ca12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca14:	2302      	movs	r3, #2
 800ca16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ca1c:	2308      	movs	r3, #8
 800ca1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ca20:	a903      	add	r1, sp, #12
 800ca22:	4803      	ldr	r0, [pc, #12]	; (800ca30 <HAL_UART_MspInit+0x6c>)
 800ca24:	f000 fb52 	bl	800d0cc <HAL_GPIO_Init>
}
 800ca28:	e7d8      	b.n	800c9dc <HAL_UART_MspInit+0x18>
 800ca2a:	bf00      	nop
 800ca2c:	40011400 	.word	0x40011400
 800ca30:	40020800 	.word	0x40020800

0800ca34 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ca34:	4770      	bx	lr

0800ca36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ca36:	e7fe      	b.n	800ca36 <HardFault_Handler>

0800ca38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ca38:	e7fe      	b.n	800ca38 <MemManage_Handler>

0800ca3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ca3a:	e7fe      	b.n	800ca3a <BusFault_Handler>

0800ca3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ca3c:	e7fe      	b.n	800ca3c <UsageFault_Handler>

0800ca3e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ca3e:	4770      	bx	lr

0800ca40 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ca40:	4770      	bx	lr

0800ca42 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ca42:	4770      	bx	lr

0800ca44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ca44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ca46:	f000 f879 	bl	800cb3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ca4a:	bd08      	pop	{r3, pc}

0800ca4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ca4c:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <SystemInit+0x18>)
 800ca4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ca52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800ca56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ca5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ca5e:	609a      	str	r2, [r3, #8]
#endif
}
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	e000ed00 	.word	0xe000ed00

0800ca68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ca68:	f8df d034 	ldr.w	sp, [pc, #52]	; 800caa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ca6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ca6e:	e003      	b.n	800ca78 <LoopCopyDataInit>

0800ca70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ca72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ca74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ca76:	3104      	adds	r1, #4

0800ca78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ca78:	480b      	ldr	r0, [pc, #44]	; (800caa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ca7a:	4b0c      	ldr	r3, [pc, #48]	; (800caac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ca7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ca7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ca80:	d3f6      	bcc.n	800ca70 <CopyDataInit>
  ldr  r2, =_sbss
 800ca82:	4a0b      	ldr	r2, [pc, #44]	; (800cab0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ca84:	e002      	b.n	800ca8c <LoopFillZerobss>

0800ca86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ca86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ca88:	f842 3b04 	str.w	r3, [r2], #4

0800ca8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ca8c:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ca8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ca90:	d3f9      	bcc.n	800ca86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ca92:	f7ff ffdb 	bl	800ca4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ca96:	f001 f91b 	bl	800dcd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ca9a:	f7ff feef 	bl	800c87c <main>
  bx  lr    
 800ca9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800caa0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800caa4:	0800dd68 	.word	0x0800dd68
  ldr  r0, =_sdata
 800caa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800caac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800cab0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800cab4:	2000016c 	.word	0x2000016c

0800cab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cab8:	e7fe      	b.n	800cab8 <ADC_IRQHandler>
	...

0800cabc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cabc:	b510      	push	{r4, lr}
 800cabe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cac0:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <HAL_InitTick+0x40>)
 800cac2:	7818      	ldrb	r0, [r3, #0]
 800cac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cac8:	fbb3 f3f0 	udiv	r3, r3, r0
 800cacc:	4a0c      	ldr	r2, [pc, #48]	; (800cb00 <HAL_InitTick+0x44>)
 800cace:	6810      	ldr	r0, [r2, #0]
 800cad0:	fbb0 f0f3 	udiv	r0, r0, r3
 800cad4:	f000 f89e 	bl	800cc14 <HAL_SYSTICK_Config>
 800cad8:	b968      	cbnz	r0, 800caf6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cada:	2c0f      	cmp	r4, #15
 800cadc:	d901      	bls.n	800cae2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800cade:	2001      	movs	r0, #1
 800cae0:	e00a      	b.n	800caf8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cae2:	2200      	movs	r2, #0
 800cae4:	4621      	mov	r1, r4
 800cae6:	f04f 30ff 	mov.w	r0, #4294967295
 800caea:	f000 f85f 	bl	800cbac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800caee:	4b05      	ldr	r3, [pc, #20]	; (800cb04 <HAL_InitTick+0x48>)
 800caf0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800caf2:	2000      	movs	r0, #0
 800caf4:	e000      	b.n	800caf8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800caf6:	2001      	movs	r0, #1
}
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	bf00      	nop
 800cafc:	20000004 	.word	0x20000004
 800cb00:	20000000 	.word	0x20000000
 800cb04:	20000008 	.word	0x20000008

0800cb08 <HAL_Init>:
{
 800cb08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cb0a:	4b0b      	ldr	r3, [pc, #44]	; (800cb38 <HAL_Init+0x30>)
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb24:	2003      	movs	r0, #3
 800cb26:	f000 f82f 	bl	800cb88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	f7ff ffc6 	bl	800cabc <HAL_InitTick>
  HAL_MspInit();
 800cb30:	f7ff feb4 	bl	800c89c <HAL_MspInit>
}
 800cb34:	2000      	movs	r0, #0
 800cb36:	bd08      	pop	{r3, pc}
 800cb38:	40023c00 	.word	0x40023c00

0800cb3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800cb3c:	4a03      	ldr	r2, [pc, #12]	; (800cb4c <HAL_IncTick+0x10>)
 800cb3e:	6811      	ldr	r1, [r2, #0]
 800cb40:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <HAL_IncTick+0x14>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	440b      	add	r3, r1
 800cb46:	6013      	str	r3, [r2, #0]
}
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	20000168 	.word	0x20000168
 800cb50:	20000004 	.word	0x20000004

0800cb54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800cb54:	4b01      	ldr	r3, [pc, #4]	; (800cb5c <HAL_GetTick+0x8>)
 800cb56:	6818      	ldr	r0, [r3, #0]
}
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	20000168 	.word	0x20000168

0800cb60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800cb64:	f7ff fff6 	bl	800cb54 <HAL_GetTick>
 800cb68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cb6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cb6e:	d002      	beq.n	800cb76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800cb70:	4b04      	ldr	r3, [pc, #16]	; (800cb84 <HAL_Delay+0x24>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cb76:	f7ff ffed 	bl	800cb54 <HAL_GetTick>
 800cb7a:	1b40      	subs	r0, r0, r5
 800cb7c:	42a0      	cmp	r0, r4
 800cb7e:	d3fa      	bcc.n	800cb76 <HAL_Delay+0x16>
  {
  }
}
 800cb80:	bd38      	pop	{r3, r4, r5, pc}
 800cb82:	bf00      	nop
 800cb84:	20000004 	.word	0x20000004

0800cb88 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cb88:	4a07      	ldr	r2, [pc, #28]	; (800cba8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800cb8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cb8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800cb90:	041b      	lsls	r3, r3, #16
 800cb92:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cb94:	0200      	lsls	r0, r0, #8
 800cb96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cb9a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800cb9c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800cba0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800cba4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800cba6:	4770      	bx	lr
 800cba8:	e000ed00 	.word	0xe000ed00

0800cbac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cbac:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cbae:	4b17      	ldr	r3, [pc, #92]	; (800cc0c <HAL_NVIC_SetPriority+0x60>)
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cbb6:	f1c3 0407 	rsb	r4, r3, #7
 800cbba:	2c04      	cmp	r4, #4
 800cbbc:	bf28      	it	cs
 800cbbe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cbc0:	1d1d      	adds	r5, r3, #4
 800cbc2:	2d06      	cmp	r5, #6
 800cbc4:	d918      	bls.n	800cbf8 <HAL_NVIC_SetPriority+0x4c>
 800cbc6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbc8:	f04f 35ff 	mov.w	r5, #4294967295
 800cbcc:	fa05 f404 	lsl.w	r4, r5, r4
 800cbd0:	ea21 0104 	bic.w	r1, r1, r4
 800cbd4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cbd6:	fa05 f303 	lsl.w	r3, r5, r3
 800cbda:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbde:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	db0b      	blt.n	800cbfc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbe4:	0109      	lsls	r1, r1, #4
 800cbe6:	b2c9      	uxtb	r1, r1
 800cbe8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800cbec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800cbf0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800cbf4:	bc30      	pop	{r4, r5}
 800cbf6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e7e5      	b.n	800cbc8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbfc:	f000 000f 	and.w	r0, r0, #15
 800cc00:	0109      	lsls	r1, r1, #4
 800cc02:	b2c9      	uxtb	r1, r1
 800cc04:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <HAL_NVIC_SetPriority+0x64>)
 800cc06:	5419      	strb	r1, [r3, r0]
 800cc08:	e7f4      	b.n	800cbf4 <HAL_NVIC_SetPriority+0x48>
 800cc0a:	bf00      	nop
 800cc0c:	e000ed00 	.word	0xe000ed00
 800cc10:	e000ed14 	.word	0xe000ed14

0800cc14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cc14:	3801      	subs	r0, #1
 800cc16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800cc1a:	d20a      	bcs.n	800cc32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <HAL_SYSTICK_Config+0x24>)
 800cc1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc20:	4a06      	ldr	r2, [pc, #24]	; (800cc3c <HAL_SYSTICK_Config+0x28>)
 800cc22:	21f0      	movs	r1, #240	; 0xf0
 800cc24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cc28:	2000      	movs	r0, #0
 800cc2a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc2c:	2207      	movs	r2, #7
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800cc32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	e000e010 	.word	0xe000e010
 800cc3c:	e000ed00 	.word	0xe000ed00

0800cc40 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800cc40:	7950      	ldrb	r0, [r2, #5]
 800cc42:	7913      	ldrb	r3, [r2, #4]
 800cc44:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800cc48:	4807      	ldr	r0, [pc, #28]	; (800cc68 <ETH_MACAddressConfig+0x28>)
 800cc4a:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800cc4c:	78d0      	ldrb	r0, [r2, #3]
 800cc4e:	7893      	ldrb	r3, [r2, #2]
 800cc50:	041b      	lsls	r3, r3, #16
 800cc52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800cc56:	7850      	ldrb	r0, [r2, #1]
 800cc58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800cc5c:	7812      	ldrb	r2, [r2, #0]
 800cc5e:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800cc60:	4a02      	ldr	r2, [pc, #8]	; (800cc6c <ETH_MACAddressConfig+0x2c>)
 800cc62:	508b      	str	r3, [r1, r2]
}
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	40028040 	.word	0x40028040
 800cc6c:	40028044 	.word	0x40028044

0800cc70 <ETH_MACDMAConfig>:
{
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	b09e      	sub	sp, #120	; 0x78
 800cc74:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800cc76:	b129      	cbz	r1, 800cc84 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800cc78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc7c:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 800cc7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc82:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800cc84:	69e3      	ldr	r3, [r4, #28]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d16a      	bne.n	800cd60 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800cc8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc8e:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 800cc90:	6821      	ldr	r1, [r4, #0]
 800cc92:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800cc94:	4a39      	ldr	r2, [pc, #228]	; (800cd7c <ETH_MACDMAConfig+0x10c>)
 800cc96:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800cc98:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800cc9a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 800cc9c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800cc9e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 800cca0:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800cca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800cca6:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800cca8:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccae:	2001      	movs	r0, #1
 800ccb0:	f7ff ff56 	bl	800cb60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	2240      	movs	r2, #64	; 0x40
 800ccbc:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccc2:	2001      	movs	r0, #1
 800ccc4:	f7ff ff4c 	bl	800cb60 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	2500      	movs	r5, #0
 800ccd0:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800ccda:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 800ccde:	041b      	lsls	r3, r3, #16
 800cce0:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800cce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800cce6:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccec:	2001      	movs	r0, #1
 800ccee:	f7ff ff37 	bl	800cb60 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccfe:	2001      	movs	r0, #1
 800cd00:	f7ff ff2e 	bl	800cb60 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800cd04:	6823      	ldr	r3, [r4, #0]
 800cd06:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800cd08:	6822      	ldr	r2, [r4, #0]
 800cd0a:	f241 0518 	movw	r5, #4120	; 0x1018
 800cd0e:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800cd10:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <ETH_MACDMAConfig+0x110>)
 800cd12:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800cd14:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800cd18:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800cd1c:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800cd22:	2001      	movs	r0, #1
 800cd24:	f7ff ff1c 	bl	800cb60 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd32:	4a14      	ldr	r2, [pc, #80]	; (800cd84 <ETH_MACDMAConfig+0x114>)
 800cd34:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd3c:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800cd3e:	2001      	movs	r0, #1
 800cd40:	f7ff ff0e 	bl	800cb60 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800cd44:	6823      	ldr	r3, [r4, #0]
 800cd46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd4a:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800cd4c:	69a3      	ldr	r3, [r4, #24]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d009      	beq.n	800cd66 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800cd52:	6962      	ldr	r2, [r4, #20]
 800cd54:	2100      	movs	r1, #0
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7ff ff72 	bl	800cc40 <ETH_MACAddressConfig>
}
 800cd5c:	b01e      	add	sp, #120	; 0x78
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800cd60:	2300      	movs	r3, #0
 800cd62:	9307      	str	r3, [sp, #28]
 800cd64:	e794      	b.n	800cc90 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800cd66:	6821      	ldr	r1, [r4, #0]
 800cd68:	f241 021c 	movw	r2, #4124	; 0x101c
 800cd6c:	588b      	ldr	r3, [r1, r2]
 800cd6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd76:	508b      	str	r3, [r1, r2]
 800cd78:	e7eb      	b.n	800cd52 <ETH_MACDMAConfig+0xe2>
 800cd7a:	bf00      	nop
 800cd7c:	ff20810f 	.word	0xff20810f
 800cd80:	f8de3f23 	.word	0xf8de3f23
 800cd84:	02c12080 	.word	0x02c12080

0800cd88 <HAL_ETH_ReadPHYRegister>:
{
 800cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800cd8a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b82      	cmp	r3, #130	; 0x82
 800cd92:	d033      	beq.n	800cdfc <HAL_ETH_ReadPHYRegister+0x74>
 800cd94:	4616      	mov	r6, r2
 800cd96:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800cd98:	2382      	movs	r3, #130	; 0x82
 800cd9a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800cd9e:	6802      	ldr	r2, [r0, #0]
 800cda0:	6913      	ldr	r3, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800cda2:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800cda6:	8a04      	ldrh	r4, [r0, #16]
 800cda8:	02e4      	lsls	r4, r4, #11
 800cdaa:	b2a4      	uxth	r4, r4
 800cdac:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800cdae:	018c      	lsls	r4, r1, #6
 800cdb0:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800cdb4:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800cdb6:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 800cdba:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800cdbc:	f7ff feca 	bl	800cb54 <HAL_GetTick>
 800cdc0:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800cdc2:	f014 0f01 	tst.w	r4, #1
 800cdc6:	d010      	beq.n	800cdea <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800cdc8:	f7ff fec4 	bl	800cb54 <HAL_GetTick>
 800cdcc:	1bc0      	subs	r0, r0, r7
 800cdce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800cdd2:	d202      	bcs.n	800cdda <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	691c      	ldr	r4, [r3, #16]
 800cdd8:	e7f3      	b.n	800cdc2 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 800cdda:	2301      	movs	r3, #1
 800cddc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800cde0:	2300      	movs	r3, #0
 800cde2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800cde6:	2003      	movs	r0, #3
 800cde8:	e007      	b.n	800cdfa <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800cdea:	682b      	ldr	r3, [r5, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 800cdf8:	2000      	movs	r0, #0
}
 800cdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800cdfc:	2002      	movs	r0, #2
 800cdfe:	e7fc      	b.n	800cdfa <HAL_ETH_ReadPHYRegister+0x72>

0800ce00 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800ce00:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b42      	cmp	r3, #66	; 0x42
 800ce08:	d032      	beq.n	800ce70 <HAL_ETH_WritePHYRegister+0x70>
{
 800ce0a:	b570      	push	{r4, r5, r6, lr}
 800ce0c:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800ce0e:	2342      	movs	r3, #66	; 0x42
 800ce10:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800ce14:	6800      	ldr	r0, [r0, #0]
 800ce16:	6903      	ldr	r3, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800ce18:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800ce1c:	8a2c      	ldrh	r4, [r5, #16]
 800ce1e:	02e4      	lsls	r4, r4, #11
 800ce20:	b2a4      	uxth	r4, r4
 800ce22:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800ce24:	018c      	lsls	r4, r1, #6
 800ce26:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800ce2a:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800ce2c:	f044 0403 	orr.w	r4, r4, #3
 800ce30:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800ce32:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800ce38:	f7ff fe8c 	bl	800cb54 <HAL_GetTick>
 800ce3c:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ce3e:	f014 0f01 	tst.w	r4, #1
 800ce42:	d010      	beq.n	800ce66 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800ce44:	f7ff fe86 	bl	800cb54 <HAL_GetTick>
 800ce48:	1b80      	subs	r0, r0, r6
 800ce4a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800ce4e:	d202      	bcs.n	800ce56 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	691c      	ldr	r4, [r3, #16]
 800ce54:	e7f3      	b.n	800ce3e <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 800ce56:	2301      	movs	r3, #1
 800ce58:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800ce62:	2003      	movs	r0, #3
 800ce64:	e003      	b.n	800ce6e <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 800ce66:	2301      	movs	r3, #1
 800ce68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800ce6c:	2000      	movs	r0, #0
}
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800ce70:	2002      	movs	r0, #2
}
 800ce72:	4770      	bx	lr

0800ce74 <HAL_ETH_Init>:
{
 800ce74:	b570      	push	{r4, r5, r6, lr}
 800ce76:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	f000 810e 	beq.w	800d09e <HAL_ETH_Init+0x22a>
 800ce82:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 800ce84:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d034      	beq.n	800cef6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4b84      	ldr	r3, [pc, #528]	; (800d0a4 <HAL_ETH_Init+0x230>)
 800ce92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce98:	645a      	str	r2, [r3, #68]	; 0x44
 800ce9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800cea4:	4b80      	ldr	r3, [pc, #512]	; (800d0a8 <HAL_ETH_Init+0x234>)
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ceac:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	6a21      	ldr	r1, [r4, #32]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	f042 0201 	orr.w	r2, r2, #1
 800cec2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800cec4:	f7ff fe46 	bl	800cb54 <HAL_GetTick>
 800cec8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800ced0:	6812      	ldr	r2, [r2, #0]
 800ced2:	f012 0f01 	tst.w	r2, #1
 800ced6:	d013      	beq.n	800cf00 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800ced8:	f7ff fe3c 	bl	800cb54 <HAL_GetTick>
 800cedc:	1b40      	subs	r0, r0, r5
 800cede:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800cee2:	d9f2      	bls.n	800ceca <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800cee4:	2503      	movs	r5, #3
 800cee6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800ceea:	2300      	movs	r3, #0
 800ceec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800cef0:	4628      	mov	r0, r5
 800cef2:	b002      	add	sp, #8
 800cef4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 800cef6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800cefa:	f7ff fceb 	bl	800c8d4 <HAL_ETH_MspInit>
 800cefe:	e7c5      	b.n	800ce8c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800cf00:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800cf02:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 800cf06:	f000 fcdd 	bl	800d8c4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800cf0a:	4b68      	ldr	r3, [pc, #416]	; (800d0ac <HAL_ETH_Init+0x238>)
 800cf0c:	4403      	add	r3, r0
 800cf0e:	4a68      	ldr	r2, [pc, #416]	; (800d0b0 <HAL_ETH_Init+0x23c>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d855      	bhi.n	800cfc0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800cf14:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800cf1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cf20:	2100      	movs	r1, #0
 800cf22:	4620      	mov	r0, r4
 800cf24:	f7ff ff6c 	bl	800ce00 <HAL_ETH_WritePHYRegister>
 800cf28:	4605      	mov	r5, r0
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d160      	bne.n	800cff0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 800cf2e:	20ff      	movs	r0, #255	; 0xff
 800cf30:	f7ff fe16 	bl	800cb60 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800cf34:	6863      	ldr	r3, [r4, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 8091 	beq.w	800d05e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 800cf3c:	f7ff fe0a 	bl	800cb54 <HAL_GetTick>
 800cf40:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800cf42:	aa01      	add	r2, sp, #4
 800cf44:	2101      	movs	r1, #1
 800cf46:	4620      	mov	r0, r4
 800cf48:	f7ff ff1e 	bl	800cd88 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800cf4c:	f7ff fe02 	bl	800cb54 <HAL_GetTick>
 800cf50:	1b80      	subs	r0, r0, r6
 800cf52:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf56:	4298      	cmp	r0, r3
 800cf58:	d852      	bhi.n	800d000 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800cf5a:	9b01      	ldr	r3, [sp, #4]
 800cf5c:	f013 0f04 	tst.w	r3, #4
 800cf60:	d0ef      	beq.n	800cf42 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800cf62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cf66:	2100      	movs	r1, #0
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7ff ff49 	bl	800ce00 <HAL_ETH_WritePHYRegister>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d152      	bne.n	800d018 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 800cf72:	f7ff fdef 	bl	800cb54 <HAL_GetTick>
 800cf76:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800cf78:	aa01      	add	r2, sp, #4
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7ff ff03 	bl	800cd88 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800cf82:	f7ff fde7 	bl	800cb54 <HAL_GetTick>
 800cf86:	1b80      	subs	r0, r0, r6
 800cf88:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf8c:	4298      	cmp	r0, r3
 800cf8e:	d84b      	bhi.n	800d028 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800cf90:	9b01      	ldr	r3, [sp, #4]
 800cf92:	f013 0f20 	tst.w	r3, #32
 800cf96:	d0ef      	beq.n	800cf78 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800cf98:	aa01      	add	r2, sp, #4
 800cf9a:	211f      	movs	r1, #31
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7ff fef3 	bl	800cd88 <HAL_ETH_ReadPHYRegister>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d14c      	bne.n	800d040 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	f013 0f10 	tst.w	r3, #16
 800cfac:	d050      	beq.n	800d050 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800cfae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfb2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800cfb4:	f013 0f04 	tst.w	r3, #4
 800cfb8:	d04d      	beq.n	800d056 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60a3      	str	r3, [r4, #8]
 800cfbe:	e05e      	b.n	800d07e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800cfc0:	4b3c      	ldr	r3, [pc, #240]	; (800d0b4 <HAL_ETH_Init+0x240>)
 800cfc2:	4403      	add	r3, r0
 800cfc4:	4a3c      	ldr	r2, [pc, #240]	; (800d0b8 <HAL_ETH_Init+0x244>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d802      	bhi.n	800cfd0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800cfca:	f045 050c 	orr.w	r5, r5, #12
 800cfce:	e7a3      	b.n	800cf18 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800cfd0:	4b3a      	ldr	r3, [pc, #232]	; (800d0bc <HAL_ETH_Init+0x248>)
 800cfd2:	4403      	add	r3, r0
 800cfd4:	4a3a      	ldr	r2, [pc, #232]	; (800d0c0 <HAL_ETH_Init+0x24c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d99e      	bls.n	800cf18 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800cfda:	4b3a      	ldr	r3, [pc, #232]	; (800d0c4 <HAL_ETH_Init+0x250>)
 800cfdc:	4403      	add	r3, r0
 800cfde:	4a3a      	ldr	r2, [pc, #232]	; (800d0c8 <HAL_ETH_Init+0x254>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d802      	bhi.n	800cfea <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800cfe4:	f045 0504 	orr.w	r5, r5, #4
 800cfe8:	e796      	b.n	800cf18 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800cfea:	f045 0510 	orr.w	r5, r5, #16
 800cfee:	e793      	b.n	800cf18 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 800cff0:	2101      	movs	r1, #1
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7ff fe3c 	bl	800cc70 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 800cff8:	2501      	movs	r5, #1
 800cffa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 800cffe:	e777      	b.n	800cef0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 800d000:	2101      	movs	r1, #1
 800d002:	4620      	mov	r0, r4
 800d004:	f7ff fe34 	bl	800cc70 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800d008:	2301      	movs	r3, #1
 800d00a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800d00e:	2300      	movs	r3, #0
 800d010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800d014:	2503      	movs	r5, #3
 800d016:	e76b      	b.n	800cef0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800d018:	2101      	movs	r1, #1
 800d01a:	4620      	mov	r0, r4
 800d01c:	f7ff fe28 	bl	800cc70 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800d020:	2501      	movs	r5, #1
 800d022:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800d026:	e763      	b.n	800cef0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 800d028:	2101      	movs	r1, #1
 800d02a:	4620      	mov	r0, r4
 800d02c:	f7ff fe20 	bl	800cc70 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800d030:	2301      	movs	r3, #1
 800d032:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800d036:	2300      	movs	r3, #0
 800d038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800d03c:	2503      	movs	r5, #3
 800d03e:	e757      	b.n	800cef0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800d040:	2101      	movs	r1, #1
 800d042:	4620      	mov	r0, r4
 800d044:	f7ff fe14 	bl	800cc70 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800d048:	2501      	movs	r5, #1
 800d04a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800d04e:	e74f      	b.n	800cef0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800d050:	2200      	movs	r2, #0
 800d052:	60e2      	str	r2, [r4, #12]
 800d054:	e7ae      	b.n	800cfb4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 800d056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d05a:	60a3      	str	r3, [r4, #8]
 800d05c:	e00f      	b.n	800d07e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800d05e:	68e2      	ldr	r2, [r4, #12]
 800d060:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800d064:	68a3      	ldr	r3, [r4, #8]
 800d066:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800d06a:	431a      	orrs	r2, r3
 800d06c:	2100      	movs	r1, #0
 800d06e:	4620      	mov	r0, r4
 800d070:	f7ff fec6 	bl	800ce00 <HAL_ETH_WritePHYRegister>
 800d074:	b958      	cbnz	r0, 800d08e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 800d076:	f640 70ff 	movw	r0, #4095	; 0xfff
 800d07a:	f7ff fd71 	bl	800cb60 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800d07e:	2100      	movs	r1, #0
 800d080:	4620      	mov	r0, r4
 800d082:	f7ff fdf5 	bl	800cc70 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800d086:	2301      	movs	r3, #1
 800d088:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800d08c:	e730      	b.n	800cef0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800d08e:	2101      	movs	r1, #1
 800d090:	4620      	mov	r0, r4
 800d092:	f7ff fded 	bl	800cc70 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800d096:	2501      	movs	r5, #1
 800d098:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800d09c:	e728      	b.n	800cef0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 800d09e:	2501      	movs	r5, #1
 800d0a0:	e726      	b.n	800cef0 <HAL_ETH_Init+0x7c>
 800d0a2:	bf00      	nop
 800d0a4:	40023800 	.word	0x40023800
 800d0a8:	40013800 	.word	0x40013800
 800d0ac:	feced300 	.word	0xfeced300
 800d0b0:	00e4e1bf 	.word	0x00e4e1bf
 800d0b4:	fde9f140 	.word	0xfde9f140
 800d0b8:	017d783f 	.word	0x017d783f
 800d0bc:	fc6c7900 	.word	0xfc6c7900
 800d0c0:	026259ff 	.word	0x026259ff
 800d0c4:	fa0a1f00 	.word	0xfa0a1f00
 800d0c8:	02faf07f 	.word	0x02faf07f

0800d0cc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b0f      	cmp	r3, #15
 800d0d0:	f200 80d7 	bhi.w	800d282 <HAL_GPIO_Init+0x1b6>
{
 800d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	e039      	b.n	800d14e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d0da:	2207      	movs	r2, #7
 800d0dc:	e000      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d0de:	2200      	movs	r2, #0
 800d0e0:	40aa      	lsls	r2, r5
 800d0e2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d0e4:	3402      	adds	r4, #2
 800d0e6:	4d67      	ldr	r5, [pc, #412]	; (800d284 <HAL_GPIO_Init+0x1b8>)
 800d0e8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d0ec:	4a66      	ldr	r2, [pc, #408]	; (800d288 <HAL_GPIO_Init+0x1bc>)
 800d0ee:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800d0f0:	43f2      	mvns	r2, r6
 800d0f2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d0f6:	684f      	ldr	r7, [r1, #4]
 800d0f8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800d0fc:	d001      	beq.n	800d102 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800d0fe:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 800d102:	4c61      	ldr	r4, [pc, #388]	; (800d288 <HAL_GPIO_Init+0x1bc>)
 800d104:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800d106:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800d108:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d10c:	684f      	ldr	r7, [r1, #4]
 800d10e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800d112:	d001      	beq.n	800d118 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800d114:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 800d118:	4c5b      	ldr	r4, [pc, #364]	; (800d288 <HAL_GPIO_Init+0x1bc>)
 800d11a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d11c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800d11e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d122:	684f      	ldr	r7, [r1, #4]
 800d124:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800d128:	d001      	beq.n	800d12e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800d12a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 800d12e:	4c56      	ldr	r4, [pc, #344]	; (800d288 <HAL_GPIO_Init+0x1bc>)
 800d130:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800d132:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800d134:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d136:	684d      	ldr	r5, [r1, #4]
 800d138:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 800d13c:	d001      	beq.n	800d142 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800d13e:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 800d142:	4c51      	ldr	r4, [pc, #324]	; (800d288 <HAL_GPIO_Init+0x1bc>)
 800d144:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d146:	3301      	adds	r3, #1
 800d148:	2b0f      	cmp	r3, #15
 800d14a:	f200 8098 	bhi.w	800d27e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 800d14e:	2201      	movs	r2, #1
 800d150:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d152:	680c      	ldr	r4, [r1, #0]
 800d154:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 800d158:	42b2      	cmp	r2, r6
 800d15a:	d1f4      	bne.n	800d146 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d15c:	684c      	ldr	r4, [r1, #4]
 800d15e:	1e65      	subs	r5, r4, #1
 800d160:	2d01      	cmp	r5, #1
 800d162:	d903      	bls.n	800d16c <HAL_GPIO_Init+0xa0>
 800d164:	2c11      	cmp	r4, #17
 800d166:	d001      	beq.n	800d16c <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d168:	2c12      	cmp	r4, #18
 800d16a:	d112      	bne.n	800d192 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 800d16c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d16e:	005f      	lsls	r7, r3, #1
 800d170:	2403      	movs	r4, #3
 800d172:	40bc      	lsls	r4, r7
 800d174:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d178:	68cc      	ldr	r4, [r1, #12]
 800d17a:	40bc      	lsls	r4, r7
 800d17c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800d17e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800d180:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d182:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d186:	684c      	ldr	r4, [r1, #4]
 800d188:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800d18c:	409a      	lsls	r2, r3
 800d18e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800d190:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800d192:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d194:	005f      	lsls	r7, r3, #1
 800d196:	2203      	movs	r2, #3
 800d198:	40ba      	lsls	r2, r7
 800d19a:	43d2      	mvns	r2, r2
 800d19c:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d19e:	688d      	ldr	r5, [r1, #8]
 800d1a0:	40bd      	lsls	r5, r7
 800d1a2:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800d1a4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d1a6:	684c      	ldr	r4, [r1, #4]
 800d1a8:	2c02      	cmp	r4, #2
 800d1aa:	d001      	beq.n	800d1b0 <HAL_GPIO_Init+0xe4>
 800d1ac:	2c12      	cmp	r4, #18
 800d1ae:	d113      	bne.n	800d1d8 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 800d1b0:	08dd      	lsrs	r5, r3, #3
 800d1b2:	3508      	adds	r5, #8
 800d1b4:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d1b8:	f003 0407 	and.w	r4, r3, #7
 800d1bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d1c0:	240f      	movs	r4, #15
 800d1c2:	fa04 f40c 	lsl.w	r4, r4, ip
 800d1c6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d1ca:	690c      	ldr	r4, [r1, #16]
 800d1cc:	fa04 f40c 	lsl.w	r4, r4, ip
 800d1d0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800d1d4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800d1d8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d1da:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d1dc:	684c      	ldr	r4, [r1, #4]
 800d1de:	f004 0403 	and.w	r4, r4, #3
 800d1e2:	40bc      	lsls	r4, r7
 800d1e4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800d1e6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d1e8:	684a      	ldr	r2, [r1, #4]
 800d1ea:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800d1ee:	d0aa      	beq.n	800d146 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	9201      	str	r2, [sp, #4]
 800d1f4:	4a25      	ldr	r2, [pc, #148]	; (800d28c <HAL_GPIO_Init+0x1c0>)
 800d1f6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800d1f8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800d1fc:	6454      	str	r4, [r2, #68]	; 0x44
 800d1fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d200:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800d204:	9201      	str	r2, [sp, #4]
 800d206:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800d208:	089c      	lsrs	r4, r3, #2
 800d20a:	1ca5      	adds	r5, r4, #2
 800d20c:	4a1d      	ldr	r2, [pc, #116]	; (800d284 <HAL_GPIO_Init+0x1b8>)
 800d20e:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d212:	f003 0203 	and.w	r2, r3, #3
 800d216:	0095      	lsls	r5, r2, #2
 800d218:	220f      	movs	r2, #15
 800d21a:	40aa      	lsls	r2, r5
 800d21c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d220:	4a1b      	ldr	r2, [pc, #108]	; (800d290 <HAL_GPIO_Init+0x1c4>)
 800d222:	4290      	cmp	r0, r2
 800d224:	f43f af5b 	beq.w	800d0de <HAL_GPIO_Init+0x12>
 800d228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d22c:	4290      	cmp	r0, r2
 800d22e:	d01a      	beq.n	800d266 <HAL_GPIO_Init+0x19a>
 800d230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d234:	4290      	cmp	r0, r2
 800d236:	d018      	beq.n	800d26a <HAL_GPIO_Init+0x19e>
 800d238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d23c:	4290      	cmp	r0, r2
 800d23e:	d016      	beq.n	800d26e <HAL_GPIO_Init+0x1a2>
 800d240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d244:	4290      	cmp	r0, r2
 800d246:	d014      	beq.n	800d272 <HAL_GPIO_Init+0x1a6>
 800d248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d24c:	4290      	cmp	r0, r2
 800d24e:	d012      	beq.n	800d276 <HAL_GPIO_Init+0x1aa>
 800d250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d254:	4290      	cmp	r0, r2
 800d256:	d010      	beq.n	800d27a <HAL_GPIO_Init+0x1ae>
 800d258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d25c:	4290      	cmp	r0, r2
 800d25e:	f43f af3c 	beq.w	800d0da <HAL_GPIO_Init+0xe>
 800d262:	2208      	movs	r2, #8
 800d264:	e73c      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d266:	2201      	movs	r2, #1
 800d268:	e73a      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d26a:	2202      	movs	r2, #2
 800d26c:	e738      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d26e:	2203      	movs	r2, #3
 800d270:	e736      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d272:	2204      	movs	r2, #4
 800d274:	e734      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d276:	2205      	movs	r2, #5
 800d278:	e732      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
 800d27a:	2206      	movs	r2, #6
 800d27c:	e730      	b.n	800d0e0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800d27e:	b003      	add	sp, #12
 800d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d282:	4770      	bx	lr
 800d284:	40013800 	.word	0x40013800
 800d288:	40013c00 	.word	0x40013c00
 800d28c:	40023800 	.word	0x40023800
 800d290:	40020000 	.word	0x40020000

0800d294 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d294:	b912      	cbnz	r2, 800d29c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d296:	0409      	lsls	r1, r1, #16
 800d298:	6181      	str	r1, [r0, #24]
  }
}
 800d29a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800d29c:	6181      	str	r1, [r0, #24]
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	f000 81e4 	beq.w	800d66e <HAL_RCC_OscConfig+0x3ce>
{
 800d2a6:	b570      	push	{r4, r5, r6, lr}
 800d2a8:	b082      	sub	sp, #8
 800d2aa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d2ac:	6803      	ldr	r3, [r0, #0]
 800d2ae:	f013 0f01 	tst.w	r3, #1
 800d2b2:	d03b      	beq.n	800d32c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d2b4:	4ba7      	ldr	r3, [pc, #668]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f003 030c 	and.w	r3, r3, #12
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d02c      	beq.n	800d31a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d2c0:	4ba4      	ldr	r3, [pc, #656]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d2c8:	2b08      	cmp	r3, #8
 800d2ca:	d021      	beq.n	800d310 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d2cc:	6863      	ldr	r3, [r4, #4]
 800d2ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2d2:	d04f      	beq.n	800d374 <HAL_RCC_OscConfig+0xd4>
 800d2d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d2d8:	d052      	beq.n	800d380 <HAL_RCC_OscConfig+0xe0>
 800d2da:	4b9e      	ldr	r3, [pc, #632]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d2ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d2ec:	6863      	ldr	r3, [r4, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d050      	beq.n	800d394 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d2f2:	f7ff fc2f 	bl	800cb54 <HAL_GetTick>
 800d2f6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d2f8:	4b96      	ldr	r3, [pc, #600]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d300:	d114      	bne.n	800d32c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d302:	f7ff fc27 	bl	800cb54 <HAL_GetTick>
 800d306:	1b40      	subs	r0, r0, r5
 800d308:	2864      	cmp	r0, #100	; 0x64
 800d30a:	d9f5      	bls.n	800d2f8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800d30c:	2003      	movs	r0, #3
 800d30e:	e1b3      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d310:	4b90      	ldr	r3, [pc, #576]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800d318:	d0d8      	beq.n	800d2cc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d31a:	4b8e      	ldr	r3, [pc, #568]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d322:	d003      	beq.n	800d32c <HAL_RCC_OscConfig+0x8c>
 800d324:	6863      	ldr	r3, [r4, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 81a3 	beq.w	800d672 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	f013 0f02 	tst.w	r3, #2
 800d332:	d055      	beq.n	800d3e0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d334:	4b87      	ldr	r3, [pc, #540]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	f013 0f0c 	tst.w	r3, #12
 800d33c:	d03e      	beq.n	800d3bc <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d33e:	4b85      	ldr	r3, [pc, #532]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d346:	2b08      	cmp	r3, #8
 800d348:	d033      	beq.n	800d3b2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d34a:	68e3      	ldr	r3, [r4, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d068      	beq.n	800d422 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d350:	4b81      	ldr	r3, [pc, #516]	; (800d558 <HAL_RCC_OscConfig+0x2b8>)
 800d352:	2201      	movs	r2, #1
 800d354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d356:	f7ff fbfd 	bl	800cb54 <HAL_GetTick>
 800d35a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d35c:	4b7d      	ldr	r3, [pc, #500]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f013 0f02 	tst.w	r3, #2
 800d364:	d154      	bne.n	800d410 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d366:	f7ff fbf5 	bl	800cb54 <HAL_GetTick>
 800d36a:	1b40      	subs	r0, r0, r5
 800d36c:	2802      	cmp	r0, #2
 800d36e:	d9f5      	bls.n	800d35c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800d370:	2003      	movs	r0, #3
 800d372:	e181      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d374:	4a77      	ldr	r2, [pc, #476]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d37c:	6013      	str	r3, [r2, #0]
 800d37e:	e7b5      	b.n	800d2ec <HAL_RCC_OscConfig+0x4c>
 800d380:	4b74      	ldr	r3, [pc, #464]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d390:	601a      	str	r2, [r3, #0]
 800d392:	e7ab      	b.n	800d2ec <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800d394:	f7ff fbde 	bl	800cb54 <HAL_GetTick>
 800d398:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d39a:	4b6e      	ldr	r3, [pc, #440]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d3a2:	d0c3      	beq.n	800d32c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d3a4:	f7ff fbd6 	bl	800cb54 <HAL_GetTick>
 800d3a8:	1b40      	subs	r0, r0, r5
 800d3aa:	2864      	cmp	r0, #100	; 0x64
 800d3ac:	d9f5      	bls.n	800d39a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800d3ae:	2003      	movs	r0, #3
 800d3b0:	e162      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d3b2:	4b68      	ldr	r3, [pc, #416]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800d3ba:	d1c6      	bne.n	800d34a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d3bc:	4b65      	ldr	r3, [pc, #404]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f013 0f02 	tst.w	r3, #2
 800d3c4:	d004      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x130>
 800d3c6:	68e3      	ldr	r3, [r4, #12]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d001      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	e153      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3d0:	4a60      	ldr	r2, [pc, #384]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d3d2:	6813      	ldr	r3, [r2, #0]
 800d3d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d3d8:	6921      	ldr	r1, [r4, #16]
 800d3da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d3de:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	f013 0f08 	tst.w	r3, #8
 800d3e6:	d040      	beq.n	800d46a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d3e8:	6963      	ldr	r3, [r4, #20]
 800d3ea:	b363      	cbz	r3, 800d446 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d3ec:	4b5b      	ldr	r3, [pc, #364]	; (800d55c <HAL_RCC_OscConfig+0x2bc>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3f2:	f7ff fbaf 	bl	800cb54 <HAL_GetTick>
 800d3f6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3f8:	4b56      	ldr	r3, [pc, #344]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3fc:	f013 0f02 	tst.w	r3, #2
 800d400:	d133      	bne.n	800d46a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d402:	f7ff fba7 	bl	800cb54 <HAL_GetTick>
 800d406:	1b40      	subs	r0, r0, r5
 800d408:	2802      	cmp	r0, #2
 800d40a:	d9f5      	bls.n	800d3f8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800d40c:	2003      	movs	r0, #3
 800d40e:	e133      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d410:	4a50      	ldr	r2, [pc, #320]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d412:	6813      	ldr	r3, [r2, #0]
 800d414:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d418:	6921      	ldr	r1, [r4, #16]
 800d41a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	e7de      	b.n	800d3e0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800d422:	4b4d      	ldr	r3, [pc, #308]	; (800d558 <HAL_RCC_OscConfig+0x2b8>)
 800d424:	2200      	movs	r2, #0
 800d426:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d428:	f7ff fb94 	bl	800cb54 <HAL_GetTick>
 800d42c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d42e:	4b49      	ldr	r3, [pc, #292]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f013 0f02 	tst.w	r3, #2
 800d436:	d0d3      	beq.n	800d3e0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d438:	f7ff fb8c 	bl	800cb54 <HAL_GetTick>
 800d43c:	1b40      	subs	r0, r0, r5
 800d43e:	2802      	cmp	r0, #2
 800d440:	d9f5      	bls.n	800d42e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800d442:	2003      	movs	r0, #3
 800d444:	e118      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d446:	4b45      	ldr	r3, [pc, #276]	; (800d55c <HAL_RCC_OscConfig+0x2bc>)
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d44c:	f7ff fb82 	bl	800cb54 <HAL_GetTick>
 800d450:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d452:	4b40      	ldr	r3, [pc, #256]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d456:	f013 0f02 	tst.w	r3, #2
 800d45a:	d006      	beq.n	800d46a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d45c:	f7ff fb7a 	bl	800cb54 <HAL_GetTick>
 800d460:	1b40      	subs	r0, r0, r5
 800d462:	2802      	cmp	r0, #2
 800d464:	d9f5      	bls.n	800d452 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800d466:	2003      	movs	r0, #3
 800d468:	e106      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	f013 0f04 	tst.w	r3, #4
 800d470:	d079      	beq.n	800d566 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d472:	4b38      	ldr	r3, [pc, #224]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d476:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800d47a:	d133      	bne.n	800d4e4 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d47c:	2300      	movs	r3, #0
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	4b34      	ldr	r3, [pc, #208]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d488:	641a      	str	r2, [r3, #64]	; 0x40
 800d48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d490:	9301      	str	r3, [sp, #4]
 800d492:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d494:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d496:	4b32      	ldr	r3, [pc, #200]	; (800d560 <HAL_RCC_OscConfig+0x2c0>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d49e:	d023      	beq.n	800d4e8 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4a0:	68a3      	ldr	r3, [r4, #8]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d034      	beq.n	800d510 <HAL_RCC_OscConfig+0x270>
 800d4a6:	2b05      	cmp	r3, #5
 800d4a8:	d038      	beq.n	800d51c <HAL_RCC_OscConfig+0x27c>
 800d4aa:	4b2a      	ldr	r3, [pc, #168]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d4ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d4ae:	f022 0201 	bic.w	r2, r2, #1
 800d4b2:	671a      	str	r2, [r3, #112]	; 0x70
 800d4b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d4b6:	f022 0204 	bic.w	r2, r2, #4
 800d4ba:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4bc:	68a3      	ldr	r3, [r4, #8]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d036      	beq.n	800d530 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4c2:	f7ff fb47 	bl	800cb54 <HAL_GetTick>
 800d4c6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4c8:	4b22      	ldr	r3, [pc, #136]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4cc:	f013 0f02 	tst.w	r3, #2
 800d4d0:	d148      	bne.n	800d564 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4d2:	f7ff fb3f 	bl	800cb54 <HAL_GetTick>
 800d4d6:	1b80      	subs	r0, r0, r6
 800d4d8:	f241 3388 	movw	r3, #5000	; 0x1388
 800d4dc:	4298      	cmp	r0, r3
 800d4de:	d9f3      	bls.n	800d4c8 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800d4e0:	2003      	movs	r0, #3
 800d4e2:	e0c9      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 800d4e4:	2500      	movs	r5, #0
 800d4e6:	e7d6      	b.n	800d496 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d4e8:	4a1d      	ldr	r2, [pc, #116]	; (800d560 <HAL_RCC_OscConfig+0x2c0>)
 800d4ea:	6813      	ldr	r3, [r2, #0]
 800d4ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800d4f2:	f7ff fb2f 	bl	800cb54 <HAL_GetTick>
 800d4f6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d4f8:	4b19      	ldr	r3, [pc, #100]	; (800d560 <HAL_RCC_OscConfig+0x2c0>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d500:	d1ce      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d502:	f7ff fb27 	bl	800cb54 <HAL_GetTick>
 800d506:	1b80      	subs	r0, r0, r6
 800d508:	2802      	cmp	r0, #2
 800d50a:	d9f5      	bls.n	800d4f8 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800d50c:	2003      	movs	r0, #3
 800d50e:	e0b3      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d510:	4a10      	ldr	r2, [pc, #64]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d512:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d514:	f043 0301 	orr.w	r3, r3, #1
 800d518:	6713      	str	r3, [r2, #112]	; 0x70
 800d51a:	e7cf      	b.n	800d4bc <HAL_RCC_OscConfig+0x21c>
 800d51c:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d51e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d520:	f042 0204 	orr.w	r2, r2, #4
 800d524:	671a      	str	r2, [r3, #112]	; 0x70
 800d526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d528:	f042 0201 	orr.w	r2, r2, #1
 800d52c:	671a      	str	r2, [r3, #112]	; 0x70
 800d52e:	e7c5      	b.n	800d4bc <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d530:	f7ff fb10 	bl	800cb54 <HAL_GetTick>
 800d534:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d536:	4b07      	ldr	r3, [pc, #28]	; (800d554 <HAL_RCC_OscConfig+0x2b4>)
 800d538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d53a:	f013 0f02 	tst.w	r3, #2
 800d53e:	d011      	beq.n	800d564 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d540:	f7ff fb08 	bl	800cb54 <HAL_GetTick>
 800d544:	1b80      	subs	r0, r0, r6
 800d546:	f241 3388 	movw	r3, #5000	; 0x1388
 800d54a:	4298      	cmp	r0, r3
 800d54c:	d9f3      	bls.n	800d536 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800d54e:	2003      	movs	r0, #3
 800d550:	e092      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
 800d552:	bf00      	nop
 800d554:	40023800 	.word	0x40023800
 800d558:	42470000 	.word	0x42470000
 800d55c:	42470e80 	.word	0x42470e80
 800d560:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d564:	b9ed      	cbnz	r5, 800d5a2 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d566:	69a3      	ldr	r3, [r4, #24]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8084 	beq.w	800d676 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d56e:	4a45      	ldr	r2, [pc, #276]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d570:	6892      	ldr	r2, [r2, #8]
 800d572:	f002 020c 	and.w	r2, r2, #12
 800d576:	2a08      	cmp	r2, #8
 800d578:	d051      	beq.n	800d61e <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d017      	beq.n	800d5ae <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d57e:	4b42      	ldr	r3, [pc, #264]	; (800d688 <HAL_RCC_OscConfig+0x3e8>)
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d584:	f7ff fae6 	bl	800cb54 <HAL_GetTick>
 800d588:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d58a:	4b3e      	ldr	r3, [pc, #248]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d592:	d042      	beq.n	800d61a <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d594:	f7ff fade 	bl	800cb54 <HAL_GetTick>
 800d598:	1b00      	subs	r0, r0, r4
 800d59a:	2802      	cmp	r0, #2
 800d59c:	d9f5      	bls.n	800d58a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800d59e:	2003      	movs	r0, #3
 800d5a0:	e06a      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5a2:	4a38      	ldr	r2, [pc, #224]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d5a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d5a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5aa:	6413      	str	r3, [r2, #64]	; 0x40
 800d5ac:	e7db      	b.n	800d566 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800d5ae:	4b36      	ldr	r3, [pc, #216]	; (800d688 <HAL_RCC_OscConfig+0x3e8>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d5b4:	f7ff face 	bl	800cb54 <HAL_GetTick>
 800d5b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5ba:	4b32      	ldr	r3, [pc, #200]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d5c2:	d006      	beq.n	800d5d2 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5c4:	f7ff fac6 	bl	800cb54 <HAL_GetTick>
 800d5c8:	1b40      	subs	r0, r0, r5
 800d5ca:	2802      	cmp	r0, #2
 800d5cc:	d9f5      	bls.n	800d5ba <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800d5ce:	2003      	movs	r0, #3
 800d5d0:	e052      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d5d2:	69e3      	ldr	r3, [r4, #28]
 800d5d4:	6a22      	ldr	r2, [r4, #32]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d5da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d5de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d5e0:	0852      	lsrs	r2, r2, #1
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d5ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5ee:	4a25      	ldr	r2, [pc, #148]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d5f0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800d5f2:	4b25      	ldr	r3, [pc, #148]	; (800d688 <HAL_RCC_OscConfig+0x3e8>)
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d5f8:	f7ff faac 	bl	800cb54 <HAL_GetTick>
 800d5fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5fe:	4b21      	ldr	r3, [pc, #132]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d606:	d106      	bne.n	800d616 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d608:	f7ff faa4 	bl	800cb54 <HAL_GetTick>
 800d60c:	1b00      	subs	r0, r0, r4
 800d60e:	2802      	cmp	r0, #2
 800d610:	d9f5      	bls.n	800d5fe <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800d612:	2003      	movs	r0, #3
 800d614:	e030      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800d616:	2000      	movs	r0, #0
 800d618:	e02e      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
 800d61a:	2000      	movs	r0, #0
 800d61c:	e02c      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d02c      	beq.n	800d67c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800d622:	4b18      	ldr	r3, [pc, #96]	; (800d684 <HAL_RCC_OscConfig+0x3e4>)
 800d624:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d626:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800d62a:	69e2      	ldr	r2, [r4, #28]
 800d62c:	4291      	cmp	r1, r2
 800d62e:	d001      	beq.n	800d634 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 800d630:	2001      	movs	r0, #1
 800d632:	e021      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d638:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d63a:	428a      	cmp	r2, r1
 800d63c:	d001      	beq.n	800d642 <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 800d63e:	2001      	movs	r0, #1
 800d640:	e01a      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d642:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d644:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800d648:	401a      	ands	r2, r3
 800d64a:	428a      	cmp	r2, r1
 800d64c:	d001      	beq.n	800d652 <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 800d64e:	2001      	movs	r0, #1
 800d650:	e012      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d656:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d658:	428a      	cmp	r2, r1
 800d65a:	d001      	beq.n	800d660 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 800d65c:	2001      	movs	r0, #1
 800d65e:	e00b      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d660:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800d664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d666:	4293      	cmp	r3, r2
 800d668:	d00a      	beq.n	800d680 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 800d66a:	2001      	movs	r0, #1
 800d66c:	e004      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 800d66e:	2001      	movs	r0, #1
}
 800d670:	4770      	bx	lr
        return HAL_ERROR;
 800d672:	2001      	movs	r0, #1
 800d674:	e000      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800d676:	2000      	movs	r0, #0
}
 800d678:	b002      	add	sp, #8
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800d67c:	2001      	movs	r0, #1
 800d67e:	e7fb      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 800d680:	2000      	movs	r0, #0
 800d682:	e7f9      	b.n	800d678 <HAL_RCC_OscConfig+0x3d8>
 800d684:	40023800 	.word	0x40023800
 800d688:	42470060 	.word	0x42470060

0800d68c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d68c:	4b32      	ldr	r3, [pc, #200]	; (800d758 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	f003 030c 	and.w	r3, r3, #12
 800d694:	2b04      	cmp	r3, #4
 800d696:	d05c      	beq.n	800d752 <HAL_RCC_GetSysClockFreq+0xc6>
 800d698:	2b08      	cmp	r3, #8
 800d69a:	d001      	beq.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d69c:	482f      	ldr	r0, [pc, #188]	; (800d75c <HAL_RCC_GetSysClockFreq+0xd0>)
 800d69e:	4770      	bx	lr
{
 800d6a0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d6a4:	4b2c      	ldr	r3, [pc, #176]	; (800d758 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800d6b2:	d02b      	beq.n	800d70c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6b4:	4b28      	ldr	r3, [pc, #160]	; (800d758 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800d6bc:	461e      	mov	r6, r3
 800d6be:	2700      	movs	r7, #0
 800d6c0:	015c      	lsls	r4, r3, #5
 800d6c2:	2500      	movs	r5, #0
 800d6c4:	1ae4      	subs	r4, r4, r3
 800d6c6:	eb65 0507 	sbc.w	r5, r5, r7
 800d6ca:	01a9      	lsls	r1, r5, #6
 800d6cc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800d6d0:	01a0      	lsls	r0, r4, #6
 800d6d2:	1b00      	subs	r0, r0, r4
 800d6d4:	eb61 0105 	sbc.w	r1, r1, r5
 800d6d8:	00cb      	lsls	r3, r1, #3
 800d6da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d6de:	00c4      	lsls	r4, r0, #3
 800d6e0:	19a0      	adds	r0, r4, r6
 800d6e2:	eb43 0107 	adc.w	r1, r3, r7
 800d6e6:	024b      	lsls	r3, r1, #9
 800d6e8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800d6ec:	0244      	lsls	r4, r0, #9
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f7fe fd6a 	bl	800c1cc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d6f8:	4b17      	ldr	r3, [pc, #92]	; (800d758 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800d700:	3301      	adds	r3, #1
 800d702:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800d704:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d708:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d70c:	4b12      	ldr	r3, [pc, #72]	; (800d758 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800d714:	461e      	mov	r6, r3
 800d716:	2700      	movs	r7, #0
 800d718:	015c      	lsls	r4, r3, #5
 800d71a:	2500      	movs	r5, #0
 800d71c:	1ae4      	subs	r4, r4, r3
 800d71e:	eb65 0507 	sbc.w	r5, r5, r7
 800d722:	01a9      	lsls	r1, r5, #6
 800d724:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800d728:	01a0      	lsls	r0, r4, #6
 800d72a:	1b00      	subs	r0, r0, r4
 800d72c:	eb61 0105 	sbc.w	r1, r1, r5
 800d730:	00cb      	lsls	r3, r1, #3
 800d732:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d736:	00c4      	lsls	r4, r0, #3
 800d738:	19a0      	adds	r0, r4, r6
 800d73a:	eb43 0107 	adc.w	r1, r3, r7
 800d73e:	028b      	lsls	r3, r1, #10
 800d740:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800d744:	0284      	lsls	r4, r0, #10
 800d746:	4620      	mov	r0, r4
 800d748:	4619      	mov	r1, r3
 800d74a:	2300      	movs	r3, #0
 800d74c:	f7fe fd3e 	bl	800c1cc <__aeabi_uldivmod>
 800d750:	e7d2      	b.n	800d6f8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 800d752:	4803      	ldr	r0, [pc, #12]	; (800d760 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	40023800 	.word	0x40023800
 800d75c:	00f42400 	.word	0x00f42400
 800d760:	007a1200 	.word	0x007a1200

0800d764 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800d764:	2800      	cmp	r0, #0
 800d766:	f000 809e 	beq.w	800d8a6 <HAL_RCC_ClockConfig+0x142>
{
 800d76a:	b570      	push	{r4, r5, r6, lr}
 800d76c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d76e:	4b50      	ldr	r3, [pc, #320]	; (800d8b0 <HAL_RCC_ClockConfig+0x14c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 030f 	and.w	r3, r3, #15
 800d776:	428b      	cmp	r3, r1
 800d778:	d209      	bcs.n	800d78e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d77a:	b2cb      	uxtb	r3, r1
 800d77c:	4a4c      	ldr	r2, [pc, #304]	; (800d8b0 <HAL_RCC_ClockConfig+0x14c>)
 800d77e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d780:	6813      	ldr	r3, [r2, #0]
 800d782:	f003 030f 	and.w	r3, r3, #15
 800d786:	428b      	cmp	r3, r1
 800d788:	d001      	beq.n	800d78e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800d78a:	2001      	movs	r0, #1
}
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	f013 0f02 	tst.w	r3, #2
 800d794:	d017      	beq.n	800d7c6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d796:	f013 0f04 	tst.w	r3, #4
 800d79a:	d004      	beq.n	800d7a6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d79c:	4a45      	ldr	r2, [pc, #276]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d79e:	6893      	ldr	r3, [r2, #8]
 800d7a0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d7a4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	f013 0f08 	tst.w	r3, #8
 800d7ac:	d004      	beq.n	800d7b8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d7ae:	4a41      	ldr	r2, [pc, #260]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d7b0:	6893      	ldr	r3, [r2, #8]
 800d7b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d7b6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7b8:	4a3e      	ldr	r2, [pc, #248]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d7ba:	6893      	ldr	r3, [r2, #8]
 800d7bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7c0:	68a0      	ldr	r0, [r4, #8]
 800d7c2:	4303      	orrs	r3, r0
 800d7c4:	6093      	str	r3, [r2, #8]
 800d7c6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	f013 0f01 	tst.w	r3, #1
 800d7ce:	d032      	beq.n	800d836 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7d0:	6863      	ldr	r3, [r4, #4]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d021      	beq.n	800d81a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d7d6:	1e9a      	subs	r2, r3, #2
 800d7d8:	2a01      	cmp	r2, #1
 800d7da:	d925      	bls.n	800d828 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7dc:	4a35      	ldr	r2, [pc, #212]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d7de:	6812      	ldr	r2, [r2, #0]
 800d7e0:	f012 0f02 	tst.w	r2, #2
 800d7e4:	d061      	beq.n	800d8aa <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d7e6:	4933      	ldr	r1, [pc, #204]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d7e8:	688a      	ldr	r2, [r1, #8]
 800d7ea:	f022 0203 	bic.w	r2, r2, #3
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800d7f2:	f7ff f9af 	bl	800cb54 <HAL_GetTick>
 800d7f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7f8:	4b2e      	ldr	r3, [pc, #184]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	f003 030c 	and.w	r3, r3, #12
 800d800:	6862      	ldr	r2, [r4, #4]
 800d802:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d806:	d016      	beq.n	800d836 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d808:	f7ff f9a4 	bl	800cb54 <HAL_GetTick>
 800d80c:	1b80      	subs	r0, r0, r6
 800d80e:	f241 3388 	movw	r3, #5000	; 0x1388
 800d812:	4298      	cmp	r0, r3
 800d814:	d9f0      	bls.n	800d7f8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800d816:	2003      	movs	r0, #3
 800d818:	e7b8      	b.n	800d78c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d81a:	4a26      	ldr	r2, [pc, #152]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800d822:	d1e0      	bne.n	800d7e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800d824:	2001      	movs	r0, #1
 800d826:	e7b1      	b.n	800d78c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d828:	4a22      	ldr	r2, [pc, #136]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800d830:	d1d9      	bne.n	800d7e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800d832:	2001      	movs	r0, #1
 800d834:	e7aa      	b.n	800d78c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d836:	4b1e      	ldr	r3, [pc, #120]	; (800d8b0 <HAL_RCC_ClockConfig+0x14c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 030f 	and.w	r3, r3, #15
 800d83e:	42ab      	cmp	r3, r5
 800d840:	d909      	bls.n	800d856 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d842:	b2ea      	uxtb	r2, r5
 800d844:	4b1a      	ldr	r3, [pc, #104]	; (800d8b0 <HAL_RCC_ClockConfig+0x14c>)
 800d846:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 030f 	and.w	r3, r3, #15
 800d84e:	42ab      	cmp	r3, r5
 800d850:	d001      	beq.n	800d856 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800d852:	2001      	movs	r0, #1
 800d854:	e79a      	b.n	800d78c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	f013 0f04 	tst.w	r3, #4
 800d85c:	d006      	beq.n	800d86c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d85e:	4a15      	ldr	r2, [pc, #84]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d860:	6893      	ldr	r3, [r2, #8]
 800d862:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800d866:	68e1      	ldr	r1, [r4, #12]
 800d868:	430b      	orrs	r3, r1
 800d86a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	f013 0f08 	tst.w	r3, #8
 800d872:	d007      	beq.n	800d884 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d874:	4a0f      	ldr	r2, [pc, #60]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d876:	6893      	ldr	r3, [r2, #8]
 800d878:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d87c:	6921      	ldr	r1, [r4, #16]
 800d87e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d882:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d884:	f7ff ff02 	bl	800d68c <HAL_RCC_GetSysClockFreq>
 800d888:	4b0a      	ldr	r3, [pc, #40]	; (800d8b4 <HAL_RCC_ClockConfig+0x150>)
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d890:	4a09      	ldr	r2, [pc, #36]	; (800d8b8 <HAL_RCC_ClockConfig+0x154>)
 800d892:	5cd3      	ldrb	r3, [r2, r3]
 800d894:	40d8      	lsrs	r0, r3
 800d896:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <HAL_RCC_ClockConfig+0x158>)
 800d898:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800d89a:	4b09      	ldr	r3, [pc, #36]	; (800d8c0 <HAL_RCC_ClockConfig+0x15c>)
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	f7ff f90d 	bl	800cabc <HAL_InitTick>
  return HAL_OK;
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e772      	b.n	800d78c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800d8a6:	2001      	movs	r0, #1
}
 800d8a8:	4770      	bx	lr
        return HAL_ERROR;
 800d8aa:	2001      	movs	r0, #1
 800d8ac:	e76e      	b.n	800d78c <HAL_RCC_ClockConfig+0x28>
 800d8ae:	bf00      	nop
 800d8b0:	40023c00 	.word	0x40023c00
 800d8b4:	40023800 	.word	0x40023800
 800d8b8:	0800dd40 	.word	0x0800dd40
 800d8bc:	20000000 	.word	0x20000000
 800d8c0:	20000008 	.word	0x20000008

0800d8c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800d8c4:	4b01      	ldr	r3, [pc, #4]	; (800d8cc <HAL_RCC_GetHCLKFreq+0x8>)
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	20000000 	.word	0x20000000

0800d8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d8d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d8d2:	f7ff fff7 	bl	800d8c4 <HAL_RCC_GetHCLKFreq>
 800d8d6:	4b04      	ldr	r3, [pc, #16]	; (800d8e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800d8de:	4a03      	ldr	r2, [pc, #12]	; (800d8ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d8e0:	5cd3      	ldrb	r3, [r2, r3]
}
 800d8e2:	40d8      	lsrs	r0, r3
 800d8e4:	bd08      	pop	{r3, pc}
 800d8e6:	bf00      	nop
 800d8e8:	40023800 	.word	0x40023800
 800d8ec:	0800dd50 	.word	0x0800dd50

0800d8f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d8f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d8f2:	f7ff ffe7 	bl	800d8c4 <HAL_RCC_GetHCLKFreq>
 800d8f6:	4b04      	ldr	r3, [pc, #16]	; (800d908 <HAL_RCC_GetPCLK2Freq+0x18>)
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800d8fe:	4a03      	ldr	r2, [pc, #12]	; (800d90c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d900:	5cd3      	ldrb	r3, [r2, r3]
}
 800d902:	40d8      	lsrs	r0, r3
 800d904:	bd08      	pop	{r3, pc}
 800d906:	bf00      	nop
 800d908:	40023800 	.word	0x40023800
 800d90c:	0800dd50 	.word	0x0800dd50

0800d910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d910:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800d914:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d916:	6802      	ldr	r2, [r0, #0]
 800d918:	6913      	ldr	r3, [r2, #16]
 800d91a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d91e:	68c1      	ldr	r1, [r0, #12]
 800d920:	430b      	orrs	r3, r1
 800d922:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d924:	6883      	ldr	r3, [r0, #8]
 800d926:	6902      	ldr	r2, [r0, #16]
 800d928:	4313      	orrs	r3, r2
 800d92a:	6942      	ldr	r2, [r0, #20]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	69c2      	ldr	r2, [r0, #28]
 800d930:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800d932:	6801      	ldr	r1, [r0, #0]
 800d934:	68cb      	ldr	r3, [r1, #12]
 800d936:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d93a:	f023 030c 	bic.w	r3, r3, #12
 800d93e:	4313      	orrs	r3, r2
 800d940:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d942:	6802      	ldr	r2, [r0, #0]
 800d944:	6953      	ldr	r3, [r2, #20]
 800d946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d94a:	6981      	ldr	r1, [r0, #24]
 800d94c:	430b      	orrs	r3, r1
 800d94e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d950:	69c3      	ldr	r3, [r0, #28]
 800d952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d956:	d03b      	beq.n	800d9d0 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d958:	6803      	ldr	r3, [r0, #0]
 800d95a:	4a71      	ldr	r2, [pc, #452]	; (800db20 <UART_SetConfig+0x210>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	f000 80ab 	beq.w	800dab8 <UART_SetConfig+0x1a8>
 800d962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d966:	4293      	cmp	r3, r2
 800d968:	f000 80a6 	beq.w	800dab8 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d96c:	f7ff ffb0 	bl	800d8d0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d970:	f04f 0900 	mov.w	r9, #0
 800d974:	1806      	adds	r6, r0, r0
 800d976:	eb49 0709 	adc.w	r7, r9, r9
 800d97a:	eb16 0b00 	adds.w	fp, r6, r0
 800d97e:	eb47 0c09 	adc.w	ip, r7, r9
 800d982:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800d986:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800d98a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800d98e:	4693      	mov	fp, r2
 800d990:	469c      	mov	ip, r3
 800d992:	6863      	ldr	r3, [r4, #4]
 800d994:	009a      	lsls	r2, r3, #2
 800d996:	0f9b      	lsrs	r3, r3, #30
 800d998:	eb10 000b 	adds.w	r0, r0, fp
 800d99c:	eb49 010c 	adc.w	r1, r9, ip
 800d9a0:	f7fe fc14 	bl	800c1cc <__aeabi_uldivmod>
 800d9a4:	4d5f      	ldr	r5, [pc, #380]	; (800db24 <UART_SetConfig+0x214>)
 800d9a6:	fba5 3200 	umull	r3, r2, r5, r0
 800d9aa:	0951      	lsrs	r1, r2, #5
 800d9ac:	2264      	movs	r2, #100	; 0x64
 800d9ae:	fb02 0211 	mls	r2, r2, r1, r0
 800d9b2:	0113      	lsls	r3, r2, #4
 800d9b4:	3332      	adds	r3, #50	; 0x32
 800d9b6:	fba5 2303 	umull	r2, r3, r5, r3
 800d9ba:	095b      	lsrs	r3, r3, #5
 800d9bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d9c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d9c4:	f003 030f 	and.w	r3, r3, #15
 800d9c8:	6821      	ldr	r1, [r4, #0]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	608b      	str	r3, [r1, #8]
    }
  }
}
 800d9ce:	e0a4      	b.n	800db1a <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d9d0:	6803      	ldr	r3, [r0, #0]
 800d9d2:	4a53      	ldr	r2, [pc, #332]	; (800db20 <UART_SetConfig+0x210>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d039      	beq.n	800da4c <UART_SetConfig+0x13c>
 800d9d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d035      	beq.n	800da4c <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d9e0:	f7ff ff76 	bl	800d8d0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d9e4:	4683      	mov	fp, r0
 800d9e6:	f04f 0c00 	mov.w	ip, #0
 800d9ea:	1806      	adds	r6, r0, r0
 800d9ec:	eb4c 070c 	adc.w	r7, ip, ip
 800d9f0:	eb16 0800 	adds.w	r8, r6, r0
 800d9f4:	eb47 090c 	adc.w	r9, r7, ip
 800d9f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d9fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800da04:	4690      	mov	r8, r2
 800da06:	4699      	mov	r9, r3
 800da08:	6862      	ldr	r2, [r4, #4]
 800da0a:	2100      	movs	r1, #0
 800da0c:	1892      	adds	r2, r2, r2
 800da0e:	eb41 0301 	adc.w	r3, r1, r1
 800da12:	eb1b 0008 	adds.w	r0, fp, r8
 800da16:	eb4c 0109 	adc.w	r1, ip, r9
 800da1a:	f7fe fbd7 	bl	800c1cc <__aeabi_uldivmod>
 800da1e:	4d41      	ldr	r5, [pc, #260]	; (800db24 <UART_SetConfig+0x214>)
 800da20:	fba5 3200 	umull	r3, r2, r5, r0
 800da24:	0951      	lsrs	r1, r2, #5
 800da26:	2264      	movs	r2, #100	; 0x64
 800da28:	fb02 0211 	mls	r2, r2, r1, r0
 800da2c:	00d3      	lsls	r3, r2, #3
 800da2e:	3332      	adds	r3, #50	; 0x32
 800da30:	fba5 2303 	umull	r2, r3, r5, r3
 800da34:	095b      	lsrs	r3, r3, #5
 800da36:	005a      	lsls	r2, r3, #1
 800da38:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800da3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800da40:	f003 0307 	and.w	r3, r3, #7
 800da44:	6821      	ldr	r1, [r4, #0]
 800da46:	4413      	add	r3, r2
 800da48:	608b      	str	r3, [r1, #8]
 800da4a:	e066      	b.n	800db1a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800da4c:	f7ff ff50 	bl	800d8f0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800da50:	4680      	mov	r8, r0
 800da52:	f04f 0900 	mov.w	r9, #0
 800da56:	1806      	adds	r6, r0, r0
 800da58:	eb49 0709 	adc.w	r7, r9, r9
 800da5c:	eb16 0b00 	adds.w	fp, r6, r0
 800da60:	eb47 0c09 	adc.w	ip, r7, r9
 800da64:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800da68:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800da6c:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800da70:	4693      	mov	fp, r2
 800da72:	469c      	mov	ip, r3
 800da74:	6862      	ldr	r2, [r4, #4]
 800da76:	2100      	movs	r1, #0
 800da78:	1892      	adds	r2, r2, r2
 800da7a:	eb41 0301 	adc.w	r3, r1, r1
 800da7e:	eb18 000b 	adds.w	r0, r8, fp
 800da82:	eb49 010c 	adc.w	r1, r9, ip
 800da86:	f7fe fba1 	bl	800c1cc <__aeabi_uldivmod>
 800da8a:	4d26      	ldr	r5, [pc, #152]	; (800db24 <UART_SetConfig+0x214>)
 800da8c:	fba5 3200 	umull	r3, r2, r5, r0
 800da90:	0951      	lsrs	r1, r2, #5
 800da92:	2264      	movs	r2, #100	; 0x64
 800da94:	fb02 0211 	mls	r2, r2, r1, r0
 800da98:	00d3      	lsls	r3, r2, #3
 800da9a:	3332      	adds	r3, #50	; 0x32
 800da9c:	fba5 2303 	umull	r2, r3, r5, r3
 800daa0:	095b      	lsrs	r3, r3, #5
 800daa2:	005a      	lsls	r2, r3, #1
 800daa4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800daa8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800daac:	f003 0307 	and.w	r3, r3, #7
 800dab0:	6821      	ldr	r1, [r4, #0]
 800dab2:	4413      	add	r3, r2
 800dab4:	608b      	str	r3, [r1, #8]
 800dab6:	e030      	b.n	800db1a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800dab8:	f7ff ff1a 	bl	800d8f0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dabc:	f04f 0900 	mov.w	r9, #0
 800dac0:	1806      	adds	r6, r0, r0
 800dac2:	eb49 0709 	adc.w	r7, r9, r9
 800dac6:	eb16 0b00 	adds.w	fp, r6, r0
 800daca:	eb47 0c09 	adc.w	ip, r7, r9
 800dace:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800dad2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800dad6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800dada:	4693      	mov	fp, r2
 800dadc:	469c      	mov	ip, r3
 800dade:	6863      	ldr	r3, [r4, #4]
 800dae0:	009a      	lsls	r2, r3, #2
 800dae2:	0f9b      	lsrs	r3, r3, #30
 800dae4:	eb10 000b 	adds.w	r0, r0, fp
 800dae8:	eb49 010c 	adc.w	r1, r9, ip
 800daec:	f7fe fb6e 	bl	800c1cc <__aeabi_uldivmod>
 800daf0:	4d0c      	ldr	r5, [pc, #48]	; (800db24 <UART_SetConfig+0x214>)
 800daf2:	fba5 3200 	umull	r3, r2, r5, r0
 800daf6:	0951      	lsrs	r1, r2, #5
 800daf8:	2264      	movs	r2, #100	; 0x64
 800dafa:	fb02 0211 	mls	r2, r2, r1, r0
 800dafe:	0113      	lsls	r3, r2, #4
 800db00:	3332      	adds	r3, #50	; 0x32
 800db02:	fba5 2303 	umull	r2, r3, r5, r3
 800db06:	095b      	lsrs	r3, r3, #5
 800db08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800db0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800db10:	f003 030f 	and.w	r3, r3, #15
 800db14:	6821      	ldr	r1, [r4, #0]
 800db16:	4413      	add	r3, r2
 800db18:	608b      	str	r3, [r1, #8]
}
 800db1a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800db1e:	bf00      	nop
 800db20:	40011000 	.word	0x40011000
 800db24:	51eb851f 	.word	0x51eb851f

0800db28 <UART_WaitOnFlagUntilTimeout>:
{
 800db28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db2c:	4605      	mov	r5, r0
 800db2e:	460f      	mov	r7, r1
 800db30:	4616      	mov	r6, r2
 800db32:	4698      	mov	r8, r3
 800db34:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db36:	682b      	ldr	r3, [r5, #0]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	ea37 0303 	bics.w	r3, r7, r3
 800db3e:	bf0c      	ite	eq
 800db40:	2301      	moveq	r3, #1
 800db42:	2300      	movne	r3, #0
 800db44:	42b3      	cmp	r3, r6
 800db46:	d11d      	bne.n	800db84 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800db48:	f1b4 3fff 	cmp.w	r4, #4294967295
 800db4c:	d0f3      	beq.n	800db36 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800db4e:	b12c      	cbz	r4, 800db5c <UART_WaitOnFlagUntilTimeout+0x34>
 800db50:	f7ff f800 	bl	800cb54 <HAL_GetTick>
 800db54:	eba0 0008 	sub.w	r0, r0, r8
 800db58:	42a0      	cmp	r0, r4
 800db5a:	d9ec      	bls.n	800db36 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db5c:	682a      	ldr	r2, [r5, #0]
 800db5e:	68d3      	ldr	r3, [r2, #12]
 800db60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800db64:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db66:	682a      	ldr	r2, [r5, #0]
 800db68:	6953      	ldr	r3, [r2, #20]
 800db6a:	f023 0301 	bic.w	r3, r3, #1
 800db6e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800db70:	2320      	movs	r3, #32
 800db72:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800db76:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800db7a:	2300      	movs	r3, #0
 800db7c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800db80:	2003      	movs	r0, #3
 800db82:	e000      	b.n	800db86 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 800db84:	2000      	movs	r0, #0
}
 800db86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db8a <HAL_UART_Init>:
  if (huart == NULL)
 800db8a:	b358      	cbz	r0, 800dbe4 <HAL_UART_Init+0x5a>
{
 800db8c:	b510      	push	{r4, lr}
 800db8e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800db90:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800db94:	b30b      	cbz	r3, 800dbda <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800db96:	2324      	movs	r3, #36	; 0x24
 800db98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800db9c:	6822      	ldr	r2, [r4, #0]
 800db9e:	68d3      	ldr	r3, [r2, #12]
 800dba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dba4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7ff feb2 	bl	800d910 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbac:	6822      	ldr	r2, [r4, #0]
 800dbae:	6913      	ldr	r3, [r2, #16]
 800dbb0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800dbb4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbb6:	6822      	ldr	r2, [r4, #0]
 800dbb8:	6953      	ldr	r3, [r2, #20]
 800dbba:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800dbbe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800dbc0:	6822      	ldr	r2, [r4, #0]
 800dbc2:	68d3      	ldr	r3, [r2, #12]
 800dbc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dbc8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbca:	2000      	movs	r0, #0
 800dbcc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dbce:	2320      	movs	r3, #32
 800dbd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dbd4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800dbd8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800dbda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800dbde:	f7fe fef1 	bl	800c9c4 <HAL_UART_MspInit>
 800dbe2:	e7d8      	b.n	800db96 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800dbe4:	2001      	movs	r0, #1
}
 800dbe6:	4770      	bx	lr

0800dbe8 <HAL_UART_Receive>:
{
 800dbe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbec:	b083      	sub	sp, #12
 800dbee:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbf0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	d15c      	bne.n	800dcb4 <HAL_UART_Receive+0xcc>
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	460d      	mov	r5, r1
 800dbfe:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800dc00:	2900      	cmp	r1, #0
 800dc02:	d05b      	beq.n	800dcbc <HAL_UART_Receive+0xd4>
 800dc04:	2a00      	cmp	r2, #0
 800dc06:	d05b      	beq.n	800dcc0 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 800dc08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d059      	beq.n	800dcc4 <HAL_UART_Receive+0xdc>
 800dc10:	2301      	movs	r3, #1
 800dc12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc16:	f04f 0900 	mov.w	r9, #0
 800dc1a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc1e:	2322      	movs	r3, #34	; 0x22
 800dc20:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800dc24:	f7fe ff96 	bl	800cb54 <HAL_GetTick>
 800dc28:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800dc2a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800dc2e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 800dc32:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 800dc36:	e01d      	b.n	800dc74 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dc38:	9600      	str	r6, [sp, #0]
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2120      	movs	r1, #32
 800dc40:	4620      	mov	r0, r4
 800dc42:	f7ff ff71 	bl	800db28 <UART_WaitOnFlagUntilTimeout>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d13e      	bne.n	800dcc8 <HAL_UART_Receive+0xe0>
        if (huart->Init.Parity == UART_PARITY_NONE)
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	b933      	cbnz	r3, 800dc5c <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc56:	f825 3b02 	strh.w	r3, [r5], #2
 800dc5a:	e00b      	b.n	800dc74 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f825 3b01 	strh.w	r3, [r5], #1
 800dc66:	e005      	b.n	800dc74 <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc70:	702b      	strb	r3, [r5, #0]
 800dc72:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 800dc74:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	b1bb      	cbz	r3, 800dcaa <HAL_UART_Receive+0xc2>
      huart->RxXferCount--;
 800dc7a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dc82:	68a3      	ldr	r3, [r4, #8]
 800dc84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc88:	d0d6      	beq.n	800dc38 <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dc8a:	9600      	str	r6, [sp, #0]
 800dc8c:	463b      	mov	r3, r7
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2120      	movs	r1, #32
 800dc92:	4620      	mov	r0, r4
 800dc94:	f7ff ff48 	bl	800db28 <UART_WaitOnFlagUntilTimeout>
 800dc98:	b9c0      	cbnz	r0, 800dccc <HAL_UART_Receive+0xe4>
        if (huart->Init.Parity == UART_PARITY_NONE)
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1e3      	bne.n	800dc68 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	702b      	strb	r3, [r5, #0]
 800dca6:	3501      	adds	r5, #1
 800dca8:	e7e4      	b.n	800dc74 <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 800dcaa:	2320      	movs	r3, #32
 800dcac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	e000      	b.n	800dcb6 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 800dcb4:	2002      	movs	r0, #2
}
 800dcb6:	b003      	add	sp, #12
 800dcb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	e7fa      	b.n	800dcb6 <HAL_UART_Receive+0xce>
 800dcc0:	2001      	movs	r0, #1
 800dcc2:	e7f8      	b.n	800dcb6 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 800dcc4:	2002      	movs	r0, #2
 800dcc6:	e7f6      	b.n	800dcb6 <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 800dcc8:	2003      	movs	r0, #3
 800dcca:	e7f4      	b.n	800dcb6 <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 800dccc:	2003      	movs	r0, #3
 800dcce:	e7f2      	b.n	800dcb6 <HAL_UART_Receive+0xce>

0800dcd0 <__libc_init_array>:
 800dcd0:	b570      	push	{r4, r5, r6, lr}
 800dcd2:	4e0d      	ldr	r6, [pc, #52]	; (800dd08 <__libc_init_array+0x38>)
 800dcd4:	4c0d      	ldr	r4, [pc, #52]	; (800dd0c <__libc_init_array+0x3c>)
 800dcd6:	1ba4      	subs	r4, r4, r6
 800dcd8:	10a4      	asrs	r4, r4, #2
 800dcda:	2500      	movs	r5, #0
 800dcdc:	42a5      	cmp	r5, r4
 800dcde:	d109      	bne.n	800dcf4 <__libc_init_array+0x24>
 800dce0:	4e0b      	ldr	r6, [pc, #44]	; (800dd10 <__libc_init_array+0x40>)
 800dce2:	4c0c      	ldr	r4, [pc, #48]	; (800dd14 <__libc_init_array+0x44>)
 800dce4:	f000 f820 	bl	800dd28 <_init>
 800dce8:	1ba4      	subs	r4, r4, r6
 800dcea:	10a4      	asrs	r4, r4, #2
 800dcec:	2500      	movs	r5, #0
 800dcee:	42a5      	cmp	r5, r4
 800dcf0:	d105      	bne.n	800dcfe <__libc_init_array+0x2e>
 800dcf2:	bd70      	pop	{r4, r5, r6, pc}
 800dcf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dcf8:	4798      	blx	r3
 800dcfa:	3501      	adds	r5, #1
 800dcfc:	e7ee      	b.n	800dcdc <__libc_init_array+0xc>
 800dcfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd02:	4798      	blx	r3
 800dd04:	3501      	adds	r5, #1
 800dd06:	e7f2      	b.n	800dcee <__libc_init_array+0x1e>
 800dd08:	0800dd60 	.word	0x0800dd60
 800dd0c:	0800dd60 	.word	0x0800dd60
 800dd10:	0800dd60 	.word	0x0800dd60
 800dd14:	0800dd64 	.word	0x0800dd64

0800dd18 <memset>:
 800dd18:	4402      	add	r2, r0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d100      	bne.n	800dd22 <memset+0xa>
 800dd20:	4770      	bx	lr
 800dd22:	f803 1b01 	strb.w	r1, [r3], #1
 800dd26:	e7f9      	b.n	800dd1c <memset+0x4>

0800dd28 <_init>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr

0800dd34 <_fini>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	bf00      	nop
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr
